{"ast":null,"code":"import { coordEach } from \"@turf/meta\";\n/**\n * Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.\n *\n * @name truncate\n * @param {GeoJSON} geojson any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection.\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.precision=6] coordinate decimal precision\n * @param {number} [options.coordinates=3] maximum number of coordinates (primarly used to remove z coordinates)\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} layer with truncated geometry\n * @example\n * var point = turf.point([\n *     70.46923055566859,\n *     58.11088890802906,\n *     1508\n * ]);\n * var options = {precision: 3, coordinates: 2};\n * var truncated = turf.truncate(point, options);\n * //=truncated.geometry.coordinates => [70.469, 58.111]\n *\n * //addToMap\n * var addToMap = [truncated];\n */\n\nfunction truncate(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  } // Optional parameters\n\n\n  var precision = options.precision;\n  var coordinates = options.coordinates;\n  var mutate = options.mutate; // default params\n\n  precision = precision === undefined || precision === null || isNaN(precision) ? 6 : precision;\n  coordinates = coordinates === undefined || coordinates === null || isNaN(coordinates) ? 3 : coordinates; // validation\n\n  if (!geojson) throw new Error(\"<geojson> is required\");\n  if (typeof precision !== \"number\") throw new Error(\"<precision> must be a number\");\n  if (typeof coordinates !== \"number\") throw new Error(\"<coordinates> must be a number\"); // prevent input mutation\n\n  if (mutate === false || mutate === undefined) geojson = JSON.parse(JSON.stringify(geojson));\n  var factor = Math.pow(10, precision); // Truncate Coordinates\n\n  coordEach(geojson, function (coords) {\n    truncateCoords(coords, factor, coordinates);\n  });\n  return geojson;\n}\n/**\n * Truncate Coordinates - Mutates coordinates in place\n *\n * @private\n * @param {Array<any>} coords Geometry Coordinates\n * @param {number} factor rounding factor for coordinate decimal precision\n * @param {number} coordinates maximum number of coordinates (primarly used to remove z coordinates)\n * @returns {Array<any>} mutated coordinates\n */\n\n\nfunction truncateCoords(coords, factor, coordinates) {\n  // Remove extra coordinates (usually elevation coordinates and more)\n  if (coords.length > coordinates) coords.splice(coordinates, coords.length); // Truncate coordinate decimals\n\n  for (var i = 0; i < coords.length; i++) {\n    coords[i] = Math.round(coords[i] * factor) / factor;\n  }\n\n  return coords;\n}\n\nexport default truncate;","map":{"version":3,"names":["coordEach","truncate","geojson","options","precision","coordinates","mutate","undefined","isNaN","Error","JSON","parse","stringify","factor","Math","pow","coords","truncateCoords","length","splice","i","round"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/truncate/dist/es/index.js"],"sourcesContent":["import { coordEach } from \"@turf/meta\";\n/**\n * Takes a GeoJSON Feature or FeatureCollection and truncates the precision of the geometry.\n *\n * @name truncate\n * @param {GeoJSON} geojson any GeoJSON Feature, FeatureCollection, Geometry or GeometryCollection.\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.precision=6] coordinate decimal precision\n * @param {number} [options.coordinates=3] maximum number of coordinates (primarly used to remove z coordinates)\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} layer with truncated geometry\n * @example\n * var point = turf.point([\n *     70.46923055566859,\n *     58.11088890802906,\n *     1508\n * ]);\n * var options = {precision: 3, coordinates: 2};\n * var truncated = turf.truncate(point, options);\n * //=truncated.geometry.coordinates => [70.469, 58.111]\n *\n * //addToMap\n * var addToMap = [truncated];\n */\nfunction truncate(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    var precision = options.precision;\n    var coordinates = options.coordinates;\n    var mutate = options.mutate;\n    // default params\n    precision =\n        precision === undefined || precision === null || isNaN(precision)\n            ? 6\n            : precision;\n    coordinates =\n        coordinates === undefined || coordinates === null || isNaN(coordinates)\n            ? 3\n            : coordinates;\n    // validation\n    if (!geojson)\n        throw new Error(\"<geojson> is required\");\n    if (typeof precision !== \"number\")\n        throw new Error(\"<precision> must be a number\");\n    if (typeof coordinates !== \"number\")\n        throw new Error(\"<coordinates> must be a number\");\n    // prevent input mutation\n    if (mutate === false || mutate === undefined)\n        geojson = JSON.parse(JSON.stringify(geojson));\n    var factor = Math.pow(10, precision);\n    // Truncate Coordinates\n    coordEach(geojson, function (coords) {\n        truncateCoords(coords, factor, coordinates);\n    });\n    return geojson;\n}\n/**\n * Truncate Coordinates - Mutates coordinates in place\n *\n * @private\n * @param {Array<any>} coords Geometry Coordinates\n * @param {number} factor rounding factor for coordinate decimal precision\n * @param {number} coordinates maximum number of coordinates (primarly used to remove z coordinates)\n * @returns {Array<any>} mutated coordinates\n */\nfunction truncateCoords(coords, factor, coordinates) {\n    // Remove extra coordinates (usually elevation coordinates and more)\n    if (coords.length > coordinates)\n        coords.splice(coordinates, coords.length);\n    // Truncate coordinate decimals\n    for (var i = 0; i < coords.length; i++) {\n        coords[i] = Math.round(coords[i] * factor) / factor;\n    }\n    return coords;\n}\nexport default truncate;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoC;EAChC,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe,CADT,CAEhC;;;EACA,IAAIC,SAAS,GAAGD,OAAO,CAACC,SAAxB;EACA,IAAIC,WAAW,GAAGF,OAAO,CAACE,WAA1B;EACA,IAAIC,MAAM,GAAGH,OAAO,CAACG,MAArB,CALgC,CAMhC;;EACAF,SAAS,GACLA,SAAS,KAAKG,SAAd,IAA2BH,SAAS,KAAK,IAAzC,IAAiDI,KAAK,CAACJ,SAAD,CAAtD,GACM,CADN,GAEMA,SAHV;EAIAC,WAAW,GACPA,WAAW,KAAKE,SAAhB,IAA6BF,WAAW,KAAK,IAA7C,IAAqDG,KAAK,CAACH,WAAD,CAA1D,GACM,CADN,GAEMA,WAHV,CAXgC,CAehC;;EACA,IAAI,CAACH,OAAL,EACI,MAAM,IAAIO,KAAJ,CAAU,uBAAV,CAAN;EACJ,IAAI,OAAOL,SAAP,KAAqB,QAAzB,EACI,MAAM,IAAIK,KAAJ,CAAU,8BAAV,CAAN;EACJ,IAAI,OAAOJ,WAAP,KAAuB,QAA3B,EACI,MAAM,IAAII,KAAJ,CAAU,gCAAV,CAAN,CArB4B,CAsBhC;;EACA,IAAIH,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAKC,SAAnC,EACIL,OAAO,GAAGQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeV,OAAf,CAAX,CAAV;EACJ,IAAIW,MAAM,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaX,SAAb,CAAb,CAzBgC,CA0BhC;;EACAJ,SAAS,CAACE,OAAD,EAAU,UAAUc,MAAV,EAAkB;IACjCC,cAAc,CAACD,MAAD,EAASH,MAAT,EAAiBR,WAAjB,CAAd;EACH,CAFQ,CAAT;EAGA,OAAOH,OAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,cAAT,CAAwBD,MAAxB,EAAgCH,MAAhC,EAAwCR,WAAxC,EAAqD;EACjD;EACA,IAAIW,MAAM,CAACE,MAAP,GAAgBb,WAApB,EACIW,MAAM,CAACG,MAAP,CAAcd,WAAd,EAA2BW,MAAM,CAACE,MAAlC,EAH6C,CAIjD;;EACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACE,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;IACpCJ,MAAM,CAACI,CAAD,CAAN,GAAYN,IAAI,CAACO,KAAL,CAAWL,MAAM,CAACI,CAAD,CAAN,GAAYP,MAAvB,IAAiCA,MAA7C;EACH;;EACD,OAAOG,MAAP;AACH;;AACD,eAAef,QAAf"},"metadata":{},"sourceType":"module"}