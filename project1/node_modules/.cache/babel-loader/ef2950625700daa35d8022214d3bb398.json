{"ast":null,"code":"import { polygon } from \"@turf/helpers\";\nimport { coordEach } from \"@turf/meta\";\nimport concaveman from \"concaveman\";\n/**\n * Takes a {@link Feature} or a {@link FeatureCollection} and returns a convex hull {@link Polygon}.\n *\n * Internally this uses\n * the [convex-hull](https://github.com/mikolalysenko/convex-hull) module that implements a\n * [monotone chain hull](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain).\n *\n * @name convex\n * @param {GeoJSON} geojson input Feature or FeatureCollection\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.concavity=Infinity] 1 - thin shape. Infinity - convex hull.\n * @param {Object} [options.properties={}] Translate Properties to Feature\n * @returns {Feature<Polygon>} a convex hull\n * @example\n * var points = turf.featureCollection([\n *   turf.point([10.195312, 43.755225]),\n *   turf.point([10.404052, 43.8424511]),\n *   turf.point([10.579833, 43.659924]),\n *   turf.point([10.360107, 43.516688]),\n *   turf.point([10.14038, 43.588348]),\n *   turf.point([10.195312, 43.755225])\n * ]);\n *\n * var hull = turf.convex(points);\n *\n * //addToMap\n * var addToMap = [points, hull]\n */\n\nexport default function convex(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  } // Default parameters\n\n\n  options.concavity = options.concavity || Infinity; // Container\n\n  var points = []; // Convert all points to flat 2D coordinate Array\n\n  coordEach(geojson, function (coord) {\n    points.push([coord[0], coord[1]]);\n  });\n\n  if (!points.length) {\n    return null;\n  }\n\n  var convexHull = concaveman(points, options.concavity); // Convex hull should have at least 3 different vertices in order to create a valid polygon\n\n  if (convexHull.length > 3) {\n    return polygon([convexHull]);\n  }\n\n  return null;\n}","map":{"version":3,"names":["polygon","coordEach","concaveman","convex","geojson","options","concavity","Infinity","points","coord","push","length","convexHull"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/convex/dist/es/index.js"],"sourcesContent":["import { polygon, } from \"@turf/helpers\";\nimport { coordEach } from \"@turf/meta\";\nimport concaveman from \"concaveman\";\n/**\n * Takes a {@link Feature} or a {@link FeatureCollection} and returns a convex hull {@link Polygon}.\n *\n * Internally this uses\n * the [convex-hull](https://github.com/mikolalysenko/convex-hull) module that implements a\n * [monotone chain hull](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain).\n *\n * @name convex\n * @param {GeoJSON} geojson input Feature or FeatureCollection\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.concavity=Infinity] 1 - thin shape. Infinity - convex hull.\n * @param {Object} [options.properties={}] Translate Properties to Feature\n * @returns {Feature<Polygon>} a convex hull\n * @example\n * var points = turf.featureCollection([\n *   turf.point([10.195312, 43.755225]),\n *   turf.point([10.404052, 43.8424511]),\n *   turf.point([10.579833, 43.659924]),\n *   turf.point([10.360107, 43.516688]),\n *   turf.point([10.14038, 43.588348]),\n *   turf.point([10.195312, 43.755225])\n * ]);\n *\n * var hull = turf.convex(points);\n *\n * //addToMap\n * var addToMap = [points, hull]\n */\nexport default function convex(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Default parameters\n    options.concavity = options.concavity || Infinity;\n    // Container\n    var points = [];\n    // Convert all points to flat 2D coordinate Array\n    coordEach(geojson, function (coord) {\n        points.push([coord[0], coord[1]]);\n    });\n    if (!points.length) {\n        return null;\n    }\n    var convexHull = concaveman(points, options.concavity);\n    // Convex hull should have at least 3 different vertices in order to create a valid polygon\n    if (convexHull.length > 3) {\n        return polygon([convexHull]);\n    }\n    return null;\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAyB,eAAzB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,OAAzB,EAAkC;EAC7C,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe,CADI,CAE7C;;;EACAA,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,IAAqBC,QAAzC,CAH6C,CAI7C;;EACA,IAAIC,MAAM,GAAG,EAAb,CAL6C,CAM7C;;EACAP,SAAS,CAACG,OAAD,EAAU,UAAUK,KAAV,EAAiB;IAChCD,MAAM,CAACE,IAAP,CAAY,CAACD,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAAZ;EACH,CAFQ,CAAT;;EAGA,IAAI,CAACD,MAAM,CAACG,MAAZ,EAAoB;IAChB,OAAO,IAAP;EACH;;EACD,IAAIC,UAAU,GAAGV,UAAU,CAACM,MAAD,EAASH,OAAO,CAACC,SAAjB,CAA3B,CAb6C,CAc7C;;EACA,IAAIM,UAAU,CAACD,MAAX,GAAoB,CAAxB,EAA2B;IACvB,OAAOX,OAAO,CAAC,CAACY,UAAD,CAAD,CAAd;EACH;;EACD,OAAO,IAAP;AACH"},"metadata":{},"sourceType":"module"}