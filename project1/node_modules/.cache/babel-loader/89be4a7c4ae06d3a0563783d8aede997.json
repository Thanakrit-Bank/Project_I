{"ast":null,"code":"var rbush = require('rbush');\n\nvar helpers = require('@turf/helpers');\n\nvar meta = require('@turf/meta');\n\nvar turfBBox = require('@turf/bbox').default;\n\nvar featureEach = meta.featureEach;\nvar coordEach = meta.coordEach;\nvar polygon = helpers.polygon;\nvar featureCollection = helpers.featureCollection;\n/**\r\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\r\n *\r\n * @name rbush\r\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\r\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\r\n * @returns {RBush} GeoJSON RBush\r\n * @example\r\n * var geojsonRbush = require('geojson-rbush').default;\r\n * var tree = geojsonRbush();\r\n */\n\nfunction geojsonRbush(maxEntries) {\n  var tree = new rbush(maxEntries);\n  /**\r\n   * [insert](https://github.com/mourner/rbush#data-format)\r\n   *\r\n   * @param {Feature} feature insert single GeoJSON Feature\r\n   * @returns {RBush} GeoJSON RBush\r\n   * @example\r\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n   * tree.insert(poly)\r\n   */\n\n  tree.insert = function (feature) {\n    if (feature.type !== 'Feature') throw new Error('invalid feature');\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.insert.call(this, feature);\n  };\n  /**\r\n   * [load](https://github.com/mourner/rbush#bulk-inserting-data)\r\n   *\r\n   * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\r\n   * @returns {RBush} GeoJSON RBush\r\n   * @example\r\n   * var polys = turf.polygons([\r\n   *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\r\n   *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\r\n   * ]);\r\n   * tree.load(polys);\r\n   */\n\n\n  tree.load = function (features) {\n    var load = []; // Load an Array of Features\n\n    if (Array.isArray(features)) {\n      features.forEach(function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid features');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    } else {\n      // Load a FeatureCollection\n      featureEach(features, function (feature) {\n        if (feature.type !== 'Feature') throw new Error('invalid features');\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    }\n\n    return rbush.prototype.load.call(this, load);\n  };\n  /**\r\n   * [remove](https://github.com/mourner/rbush#removing-data)\r\n   *\r\n   * @param {Feature} feature remove single GeoJSON Feature\r\n   * @param {Function} equals Pass a custom equals function to compare by value for removal.\r\n   * @returns {RBush} GeoJSON RBush\r\n   * @example\r\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n   *\r\n   * tree.remove(poly);\r\n   */\n\n\n  tree.remove = function (feature, equals) {\n    if (feature.type !== 'Feature') throw new Error('invalid feature');\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.remove.call(this, feature, equals);\n  };\n  /**\r\n   * [clear](https://github.com/mourner/rbush#removing-data)\r\n   *\r\n   * @returns {RBush} GeoJSON Rbush\r\n   * @example\r\n   * tree.clear()\r\n   */\n\n\n  tree.clear = function () {\n    return rbush.prototype.clear.call(this);\n  };\n  /**\r\n   * [search](https://github.com/mourner/rbush#search)\r\n   *\r\n   * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\r\n   * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\r\n   * @example\r\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n   *\r\n   * tree.search(poly);\r\n   */\n\n\n  tree.search = function (geojson) {\n    var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n    return featureCollection(features);\n  };\n  /**\r\n   * [collides](https://github.com/mourner/rbush#collisions)\r\n   *\r\n   * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\r\n   * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\r\n   * @example\r\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n   *\r\n   * tree.collides(poly);\r\n   */\n\n\n  tree.collides = function (geojson) {\n    return rbush.prototype.collides.call(this, this.toBBox(geojson));\n  };\n  /**\r\n   * [all](https://github.com/mourner/rbush#search)\r\n   *\r\n   * @returns {FeatureCollection} all the features in RBush\r\n   * @example\r\n   * tree.all()\r\n   */\n\n\n  tree.all = function () {\n    var features = rbush.prototype.all.call(this);\n    return featureCollection(features);\n  };\n  /**\r\n   * [toJSON](https://github.com/mourner/rbush#export-and-import)\r\n   *\r\n   * @returns {any} export data as JSON object\r\n   * @example\r\n   * var exported = tree.toJSON()\r\n   */\n\n\n  tree.toJSON = function () {\n    return rbush.prototype.toJSON.call(this);\n  };\n  /**\r\n   * [fromJSON](https://github.com/mourner/rbush#export-and-import)\r\n   *\r\n   * @param {any} json import previously exported data\r\n   * @returns {RBush} GeoJSON RBush\r\n   * @example\r\n   * var exported = {\r\n   *   \"children\": [\r\n   *     {\r\n   *       \"type\": \"Feature\",\r\n   *       \"geometry\": {\r\n   *         \"type\": \"Point\",\r\n   *         \"coordinates\": [110, 50]\r\n   *       },\r\n   *       \"properties\": {},\r\n   *       \"bbox\": [110, 50, 110, 50]\r\n   *     }\r\n   *   ],\r\n   *   \"height\": 1,\r\n   *   \"leaf\": true,\r\n   *   \"minX\": 110,\r\n   *   \"minY\": 50,\r\n   *   \"maxX\": 110,\r\n   *   \"maxY\": 50\r\n   * }\r\n   * tree.fromJSON(exported)\r\n   */\n\n\n  tree.fromJSON = function (json) {\n    return rbush.prototype.fromJSON.call(this, json);\n  };\n  /**\r\n   * Converts GeoJSON to {minX, minY, maxX, maxY} schema\r\n   *\r\n   * @private\r\n   * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\r\n   * @returns {Object} converted to {minX, minY, maxX, maxY}\r\n   */\n\n\n  tree.toBBox = function (geojson) {\n    var bbox;\n    if (geojson.bbox) bbox = geojson.bbox;else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];else if (geojson.type === 'Feature') bbox = turfBBox(geojson);else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);else throw new Error('invalid geojson');\n    return {\n      minX: bbox[0],\n      minY: bbox[1],\n      maxX: bbox[2],\n      maxY: bbox[3]\n    };\n  };\n\n  return tree;\n}\n\nmodule.exports = geojsonRbush;\nmodule.exports.default = geojsonRbush;","map":{"version":3,"names":["rbush","require","helpers","meta","turfBBox","default","featureEach","coordEach","polygon","featureCollection","geojsonRbush","maxEntries","tree","insert","feature","type","Error","bbox","prototype","call","load","features","Array","isArray","forEach","push","remove","equals","clear","search","geojson","toBBox","collides","all","toJSON","fromJSON","json","length","minX","minY","maxX","maxY","module","exports"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/geojson-rbush/index.js"],"sourcesContent":["var rbush = require('rbush');\r\nvar helpers = require('@turf/helpers');\r\nvar meta = require('@turf/meta');\r\nvar turfBBox = require('@turf/bbox').default;\r\nvar featureEach = meta.featureEach;\r\nvar coordEach = meta.coordEach;\r\nvar polygon = helpers.polygon;\r\nvar featureCollection = helpers.featureCollection;\r\n\r\n/**\r\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\r\n *\r\n * @name rbush\r\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\r\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\r\n * @returns {RBush} GeoJSON RBush\r\n * @example\r\n * var geojsonRbush = require('geojson-rbush').default;\r\n * var tree = geojsonRbush();\r\n */\r\nfunction geojsonRbush(maxEntries) {\r\n    var tree = new rbush(maxEntries);\r\n    /**\r\n     * [insert](https://github.com/mourner/rbush#data-format)\r\n     *\r\n     * @param {Feature} feature insert single GeoJSON Feature\r\n     * @returns {RBush} GeoJSON RBush\r\n     * @example\r\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n     * tree.insert(poly)\r\n     */\r\n    tree.insert = function (feature) {\r\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\r\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\r\n        return rbush.prototype.insert.call(this, feature);\r\n    };\r\n\r\n    /**\r\n     * [load](https://github.com/mourner/rbush#bulk-inserting-data)\r\n     *\r\n     * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\r\n     * @returns {RBush} GeoJSON RBush\r\n     * @example\r\n     * var polys = turf.polygons([\r\n     *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\r\n     *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\r\n     * ]);\r\n     * tree.load(polys);\r\n     */\r\n    tree.load = function (features) {\r\n        var load = [];\r\n        // Load an Array of Features\r\n        if (Array.isArray(features)) {\r\n            features.forEach(function (feature) {\r\n                if (feature.type !== 'Feature') throw new Error('invalid features');\r\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\r\n                load.push(feature);\r\n            });\r\n        } else {\r\n            // Load a FeatureCollection\r\n            featureEach(features, function (feature) {\r\n                if (feature.type !== 'Feature') throw new Error('invalid features');\r\n                feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\r\n                load.push(feature);\r\n            });\r\n        }\r\n        return rbush.prototype.load.call(this, load);\r\n    };\r\n\r\n    /**\r\n     * [remove](https://github.com/mourner/rbush#removing-data)\r\n     *\r\n     * @param {Feature} feature remove single GeoJSON Feature\r\n     * @param {Function} equals Pass a custom equals function to compare by value for removal.\r\n     * @returns {RBush} GeoJSON RBush\r\n     * @example\r\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n     *\r\n     * tree.remove(poly);\r\n     */\r\n    tree.remove = function (feature, equals) {\r\n        if (feature.type !== 'Feature') throw new Error('invalid feature');\r\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\r\n        return rbush.prototype.remove.call(this, feature, equals);\r\n    };\r\n\r\n    /**\r\n     * [clear](https://github.com/mourner/rbush#removing-data)\r\n     *\r\n     * @returns {RBush} GeoJSON Rbush\r\n     * @example\r\n     * tree.clear()\r\n     */\r\n    tree.clear = function () {\r\n        return rbush.prototype.clear.call(this);\r\n    };\r\n\r\n    /**\r\n     * [search](https://github.com/mourner/rbush#search)\r\n     *\r\n     * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\r\n     * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\r\n     * @example\r\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n     *\r\n     * tree.search(poly);\r\n     */\r\n    tree.search = function (geojson) {\r\n        var features = rbush.prototype.search.call(this, this.toBBox(geojson));\r\n        return featureCollection(features);\r\n    };\r\n\r\n    /**\r\n     * [collides](https://github.com/mourner/rbush#collisions)\r\n     *\r\n     * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\r\n     * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\r\n     * @example\r\n     * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\r\n     *\r\n     * tree.collides(poly);\r\n     */\r\n    tree.collides = function (geojson) {\r\n        return rbush.prototype.collides.call(this, this.toBBox(geojson));\r\n    };\r\n\r\n    /**\r\n     * [all](https://github.com/mourner/rbush#search)\r\n     *\r\n     * @returns {FeatureCollection} all the features in RBush\r\n     * @example\r\n     * tree.all()\r\n     */\r\n    tree.all = function () {\r\n        var features = rbush.prototype.all.call(this);\r\n        return featureCollection(features);\r\n    };\r\n\r\n    /**\r\n     * [toJSON](https://github.com/mourner/rbush#export-and-import)\r\n     *\r\n     * @returns {any} export data as JSON object\r\n     * @example\r\n     * var exported = tree.toJSON()\r\n     */\r\n    tree.toJSON = function () {\r\n        return rbush.prototype.toJSON.call(this);\r\n    };\r\n\r\n    /**\r\n     * [fromJSON](https://github.com/mourner/rbush#export-and-import)\r\n     *\r\n     * @param {any} json import previously exported data\r\n     * @returns {RBush} GeoJSON RBush\r\n     * @example\r\n     * var exported = {\r\n     *   \"children\": [\r\n     *     {\r\n     *       \"type\": \"Feature\",\r\n     *       \"geometry\": {\r\n     *         \"type\": \"Point\",\r\n     *         \"coordinates\": [110, 50]\r\n     *       },\r\n     *       \"properties\": {},\r\n     *       \"bbox\": [110, 50, 110, 50]\r\n     *     }\r\n     *   ],\r\n     *   \"height\": 1,\r\n     *   \"leaf\": true,\r\n     *   \"minX\": 110,\r\n     *   \"minY\": 50,\r\n     *   \"maxX\": 110,\r\n     *   \"maxY\": 50\r\n     * }\r\n     * tree.fromJSON(exported)\r\n     */\r\n    tree.fromJSON = function (json) {\r\n        return rbush.prototype.fromJSON.call(this, json);\r\n    };\r\n\r\n    /**\r\n     * Converts GeoJSON to {minX, minY, maxX, maxY} schema\r\n     *\r\n     * @private\r\n     * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\r\n     * @returns {Object} converted to {minX, minY, maxX, maxY}\r\n     */\r\n    tree.toBBox = function (geojson) {\r\n        var bbox;\r\n        if (geojson.bbox) bbox = geojson.bbox;\r\n        else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\r\n        else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\r\n        else if (geojson.type === 'Feature') bbox = turfBBox(geojson);\r\n        else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);\r\n        else throw new Error('invalid geojson')\r\n\r\n        return {\r\n            minX: bbox[0],\r\n            minY: bbox[1],\r\n            maxX: bbox[2],\r\n            maxY: bbox[3]\r\n        };\r\n    };\r\n    return tree;\r\n}\r\n\r\nmodule.exports = geojsonRbush;\r\nmodule.exports.default = geojsonRbush;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}