{"ast":null,"code":"import bearing from \"@turf/bearing\";\nimport destination from \"@turf/destination\";\nimport measureDistance from \"@turf/distance\";\nimport { point } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\r\n * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.\r\n *\r\n * @name along\r\n * @param {Feature<LineString>} line input line\r\n * @param {number} distance distance along the line\r\n * @param {Object} [options] Optional parameters\r\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\r\n * @returns {Feature<Point>} Point `distance` `units` along the line\r\n * @example\r\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\r\n * var options = {units: 'miles'};\r\n *\r\n * var along = turf.along(line, 200, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [along, line]\r\n */\n\nexport default function along(line, distance, options) {\n  if (options === void 0) {\n    options = {};\n  } // Get Coords\n\n\n  var geom = getGeom(line);\n  var coords = geom.coordinates;\n  var travelled = 0;\n\n  for (var i = 0; i < coords.length; i++) {\n    if (distance >= travelled && i === coords.length - 1) {\n      break;\n    } else if (travelled >= distance) {\n      var overshot = distance - travelled;\n\n      if (!overshot) {\n        return point(coords[i]);\n      } else {\n        var direction = bearing(coords[i], coords[i - 1]) - 180;\n        var interpolated = destination(coords[i], overshot, direction, options);\n        return interpolated;\n      }\n    } else {\n      travelled += measureDistance(coords[i], coords[i + 1], options);\n    }\n  }\n\n  return point(coords[coords.length - 1]);\n}","map":{"version":3,"names":["bearing","destination","measureDistance","point","getGeom","along","line","distance","options","geom","coords","coordinates","travelled","i","length","overshot","direction","interpolated"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/along/dist/es/index.js"],"sourcesContent":["import bearing from \"@turf/bearing\";\r\nimport destination from \"@turf/destination\";\r\nimport measureDistance from \"@turf/distance\";\r\nimport { point } from \"@turf/helpers\";\r\nimport { getGeom } from \"@turf/invariant\";\r\n/**\r\n * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.\r\n *\r\n * @name along\r\n * @param {Feature<LineString>} line input line\r\n * @param {number} distance distance along the line\r\n * @param {Object} [options] Optional parameters\r\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\r\n * @returns {Feature<Point>} Point `distance` `units` along the line\r\n * @example\r\n * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);\r\n * var options = {units: 'miles'};\r\n *\r\n * var along = turf.along(line, 200, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [along, line]\r\n */\r\nexport default function along(line, distance, options) {\r\n    if (options === void 0) { options = {}; }\r\n    // Get Coords\r\n    var geom = getGeom(line);\r\n    var coords = geom.coordinates;\r\n    var travelled = 0;\r\n    for (var i = 0; i < coords.length; i++) {\r\n        if (distance >= travelled && i === coords.length - 1) {\r\n            break;\r\n        }\r\n        else if (travelled >= distance) {\r\n            var overshot = distance - travelled;\r\n            if (!overshot) {\r\n                return point(coords[i]);\r\n            }\r\n            else {\r\n                var direction = bearing(coords[i], coords[i - 1]) - 180;\r\n                var interpolated = destination(coords[i], overshot, direction, options);\r\n                return interpolated;\r\n            }\r\n        }\r\n        else {\r\n            travelled += measureDistance(coords[i], coords[i + 1], options);\r\n        }\r\n    }\r\n    return point(coords[coords.length - 1]);\r\n}\r\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,eAApB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,KAAT,CAAeC,IAAf,EAAqBC,QAArB,EAA+BC,OAA/B,EAAwC;EACnD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe,CADU,CAEnD;;;EACA,IAAIC,IAAI,GAAGL,OAAO,CAACE,IAAD,CAAlB;EACA,IAAII,MAAM,GAAGD,IAAI,CAACE,WAAlB;EACA,IAAIC,SAAS,GAAG,CAAhB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;IACpC,IAAIN,QAAQ,IAAIK,SAAZ,IAAyBC,CAAC,KAAKH,MAAM,CAACI,MAAP,GAAgB,CAAnD,EAAsD;MAClD;IACH,CAFD,MAGK,IAAIF,SAAS,IAAIL,QAAjB,EAA2B;MAC5B,IAAIQ,QAAQ,GAAGR,QAAQ,GAAGK,SAA1B;;MACA,IAAI,CAACG,QAAL,EAAe;QACX,OAAOZ,KAAK,CAACO,MAAM,CAACG,CAAD,CAAP,CAAZ;MACH,CAFD,MAGK;QACD,IAAIG,SAAS,GAAGhB,OAAO,CAACU,MAAM,CAACG,CAAD,CAAP,EAAYH,MAAM,CAACG,CAAC,GAAG,CAAL,CAAlB,CAAP,GAAoC,GAApD;QACA,IAAII,YAAY,GAAGhB,WAAW,CAACS,MAAM,CAACG,CAAD,CAAP,EAAYE,QAAZ,EAAsBC,SAAtB,EAAiCR,OAAjC,CAA9B;QACA,OAAOS,YAAP;MACH;IACJ,CAVI,MAWA;MACDL,SAAS,IAAIV,eAAe,CAACQ,MAAM,CAACG,CAAD,CAAP,EAAYH,MAAM,CAACG,CAAC,GAAG,CAAL,CAAlB,EAA2BL,OAA3B,CAA5B;IACH;EACJ;;EACD,OAAOL,KAAK,CAACO,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAAP,CAAZ;AACH"},"metadata":{},"sourceType":"module"}