{"ast":null,"code":"import rbush from 'geojson-rbush';\nimport square from '@turf/square';\nimport bbox from '@turf/bbox';\nimport truncate from '@turf/truncate';\nimport lineSegment from '@turf/line-segment';\nimport lineIntersect from '@turf/line-intersect';\nimport nearestPointOnLine from '@turf/nearest-point-on-line';\nimport { getType, getCoords, getCoord } from '@turf/invariant';\nimport { flattenEach, featureEach, featureReduce } from '@turf/meta';\nimport { featureCollection, lineString } from '@turf/helpers';\n/**\n * Split a LineString by another GeoJSON Feature.\n *\n * @name lineSplit\n * @param {Feature<LineString>} line LineString Feature to split\n * @param {Feature<any>} splitter Feature used to split line\n * @returns {FeatureCollection<LineString>} Split LineStrings\n * @example\n * var line = turf.lineString([[120, -25], [145, -25]]);\n * var splitter = turf.lineString([[130, -15], [130, -35]]);\n *\n * var split = turf.lineSplit(line, splitter);\n *\n * //addToMap\n * var addToMap = [line, splitter]\n */\n\nfunction lineSplit(line, splitter) {\n  if (!line) throw new Error(\"line is required\");\n  if (!splitter) throw new Error(\"splitter is required\");\n  var lineType = getType(line);\n  var splitterType = getType(splitter);\n  if (lineType !== \"LineString\") throw new Error(\"line must be LineString\");\n  if (splitterType === \"FeatureCollection\") throw new Error(\"splitter cannot be a FeatureCollection\");\n  if (splitterType === \"GeometryCollection\") throw new Error(\"splitter cannot be a GeometryCollection\"); // remove excessive decimals from splitter\n  // to avoid possible approximation issues in rbush\n\n  var truncatedSplitter = truncate(splitter, {\n    precision: 7\n  });\n\n  switch (splitterType) {\n    case \"Point\":\n      return splitLineWithPoint(line, truncatedSplitter);\n\n    case \"MultiPoint\":\n      return splitLineWithPoints(line, truncatedSplitter);\n\n    case \"LineString\":\n    case \"MultiLineString\":\n    case \"Polygon\":\n    case \"MultiPolygon\":\n      return splitLineWithPoints(line, lineIntersect(line, truncatedSplitter));\n  }\n}\n/**\n * Split LineString with MultiPoint\n *\n * @private\n * @param {Feature<LineString>} line LineString\n * @param {FeatureCollection<Point>} splitter Point\n * @returns {FeatureCollection<LineString>} split LineStrings\n */\n\n\nfunction splitLineWithPoints(line, splitter) {\n  var results = [];\n  var tree = rbush();\n  flattenEach(splitter, function (point) {\n    // Add index/id to features (needed for filter)\n    results.forEach(function (feature, index) {\n      feature.id = index;\n    }); // First Point - doesn't need to handle any previous line results\n\n    if (!results.length) {\n      results = splitLineWithPoint(line, point).features; // Add Square BBox to each feature for GeoJSON-RBush\n\n      results.forEach(function (feature) {\n        if (!feature.bbox) feature.bbox = square(bbox(feature));\n      });\n      tree.load(featureCollection(results)); // Split with remaining points - lines might needed to be split multiple times\n    } else {\n      // Find all lines that are within the splitter's bbox\n      var search = tree.search(point);\n\n      if (search.features.length) {\n        // RBush might return multiple lines - only process the closest line to splitter\n        var closestLine = findClosestFeature(point, search); // Remove closest line from results since this will be split into two lines\n        // This removes any duplicates inside the results & index\n\n        results = results.filter(function (feature) {\n          return feature.id !== closestLine.id;\n        });\n        tree.remove(closestLine); // Append the two newly split lines into the results\n\n        featureEach(splitLineWithPoint(closestLine, point), function (line) {\n          results.push(line);\n          tree.insert(line);\n        });\n      }\n    }\n  });\n  return featureCollection(results);\n}\n/**\n * Split LineString with Point\n *\n * @private\n * @param {Feature<LineString>} line LineString\n * @param {Feature<Point>} splitter Point\n * @returns {FeatureCollection<LineString>} split LineStrings\n */\n\n\nfunction splitLineWithPoint(line, splitter) {\n  var results = []; // handle endpoints\n\n  var startPoint = getCoords(line)[0];\n  var endPoint = getCoords(line)[line.geometry.coordinates.length - 1];\n  if (pointsEquals(startPoint, getCoord(splitter)) || pointsEquals(endPoint, getCoord(splitter))) return featureCollection([line]); // Create spatial index\n\n  var tree = rbush();\n  var segments = lineSegment(line);\n  tree.load(segments); // Find all segments that are within bbox of splitter\n\n  var search = tree.search(splitter); // Return itself if point is not within spatial index\n\n  if (!search.features.length) return featureCollection([line]); // RBush might return multiple lines - only process the closest line to splitter\n\n  var closestSegment = findClosestFeature(splitter, search); // Initial value is the first point of the first segments (beginning of line)\n\n  var initialValue = [startPoint];\n  var lastCoords = featureReduce(segments, function (previous, current, index) {\n    var currentCoords = getCoords(current)[1];\n    var splitterCoords = getCoord(splitter); // Location where segment intersects with line\n\n    if (index === closestSegment.id) {\n      previous.push(splitterCoords);\n      results.push(lineString(previous)); // Don't duplicate splitter coordinate (Issue #688)\n\n      if (pointsEquals(splitterCoords, currentCoords)) return [splitterCoords];\n      return [splitterCoords, currentCoords]; // Keep iterating over coords until finished or intersection is found\n    } else {\n      previous.push(currentCoords);\n      return previous;\n    }\n  }, initialValue); // Append last line to final split results\n\n  if (lastCoords.length > 1) {\n    results.push(lineString(lastCoords));\n  }\n\n  return featureCollection(results);\n}\n/**\n * Find Closest Feature\n *\n * @private\n * @param {Feature<Point>} point Feature must be closest to this point\n * @param {FeatureCollection<LineString>} lines Collection of Features\n * @returns {Feature<LineString>} closest LineString\n */\n\n\nfunction findClosestFeature(point, lines) {\n  if (!lines.features.length) throw new Error(\"lines must contain features\"); // Filter to one segment that is the closest to the line\n\n  if (lines.features.length === 1) return lines.features[0];\n  var closestFeature;\n  var closestDistance = Infinity;\n  featureEach(lines, function (segment) {\n    var pt = nearestPointOnLine(segment, point);\n    var dist = pt.properties.dist;\n\n    if (dist < closestDistance) {\n      closestFeature = segment;\n      closestDistance = dist;\n    }\n  });\n  return closestFeature;\n}\n/**\n * Compares two points and returns if they are equals\n *\n * @private\n * @param {Array<number>} pt1 point\n * @param {Array<number>} pt2 point\n * @returns {boolean} true if they are equals\n */\n\n\nfunction pointsEquals(pt1, pt2) {\n  return pt1[0] === pt2[0] && pt1[1] === pt2[1];\n}\n\nexport default lineSplit;","map":{"version":3,"names":["rbush","square","bbox","truncate","lineSegment","lineIntersect","nearestPointOnLine","getType","getCoords","getCoord","flattenEach","featureEach","featureReduce","featureCollection","lineString","lineSplit","line","splitter","Error","lineType","splitterType","truncatedSplitter","precision","splitLineWithPoint","splitLineWithPoints","results","tree","point","forEach","feature","index","id","length","features","load","search","closestLine","findClosestFeature","filter","remove","push","insert","startPoint","endPoint","geometry","coordinates","pointsEquals","segments","closestSegment","initialValue","lastCoords","previous","current","currentCoords","splitterCoords","lines","closestFeature","closestDistance","Infinity","segment","pt","dist","properties","pt1","pt2"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/line-split/dist/es/index.js"],"sourcesContent":["import rbush from 'geojson-rbush';\nimport square from '@turf/square';\nimport bbox from '@turf/bbox';\nimport truncate from '@turf/truncate';\nimport lineSegment from '@turf/line-segment';\nimport lineIntersect from '@turf/line-intersect';\nimport nearestPointOnLine from '@turf/nearest-point-on-line';\nimport { getType, getCoords, getCoord } from '@turf/invariant';\nimport { flattenEach, featureEach, featureReduce } from '@turf/meta';\nimport { featureCollection, lineString } from '@turf/helpers';\n\n/**\n * Split a LineString by another GeoJSON Feature.\n *\n * @name lineSplit\n * @param {Feature<LineString>} line LineString Feature to split\n * @param {Feature<any>} splitter Feature used to split line\n * @returns {FeatureCollection<LineString>} Split LineStrings\n * @example\n * var line = turf.lineString([[120, -25], [145, -25]]);\n * var splitter = turf.lineString([[130, -15], [130, -35]]);\n *\n * var split = turf.lineSplit(line, splitter);\n *\n * //addToMap\n * var addToMap = [line, splitter]\n */\nfunction lineSplit(line, splitter) {\n  if (!line) throw new Error(\"line is required\");\n  if (!splitter) throw new Error(\"splitter is required\");\n\n  var lineType = getType(line);\n  var splitterType = getType(splitter);\n\n  if (lineType !== \"LineString\") throw new Error(\"line must be LineString\");\n  if (splitterType === \"FeatureCollection\")\n    throw new Error(\"splitter cannot be a FeatureCollection\");\n  if (splitterType === \"GeometryCollection\")\n    throw new Error(\"splitter cannot be a GeometryCollection\");\n\n  // remove excessive decimals from splitter\n  // to avoid possible approximation issues in rbush\n  var truncatedSplitter = truncate(splitter, { precision: 7 });\n\n  switch (splitterType) {\n    case \"Point\":\n      return splitLineWithPoint(line, truncatedSplitter);\n    case \"MultiPoint\":\n      return splitLineWithPoints(line, truncatedSplitter);\n    case \"LineString\":\n    case \"MultiLineString\":\n    case \"Polygon\":\n    case \"MultiPolygon\":\n      return splitLineWithPoints(line, lineIntersect(line, truncatedSplitter));\n  }\n}\n\n/**\n * Split LineString with MultiPoint\n *\n * @private\n * @param {Feature<LineString>} line LineString\n * @param {FeatureCollection<Point>} splitter Point\n * @returns {FeatureCollection<LineString>} split LineStrings\n */\nfunction splitLineWithPoints(line, splitter) {\n  var results = [];\n  var tree = rbush();\n\n  flattenEach(splitter, function (point) {\n    // Add index/id to features (needed for filter)\n    results.forEach(function (feature, index) {\n      feature.id = index;\n    });\n    // First Point - doesn't need to handle any previous line results\n    if (!results.length) {\n      results = splitLineWithPoint(line, point).features;\n\n      // Add Square BBox to each feature for GeoJSON-RBush\n      results.forEach(function (feature) {\n        if (!feature.bbox) feature.bbox = square(bbox(feature));\n      });\n      tree.load(featureCollection(results));\n      // Split with remaining points - lines might needed to be split multiple times\n    } else {\n      // Find all lines that are within the splitter's bbox\n      var search = tree.search(point);\n\n      if (search.features.length) {\n        // RBush might return multiple lines - only process the closest line to splitter\n        var closestLine = findClosestFeature(point, search);\n\n        // Remove closest line from results since this will be split into two lines\n        // This removes any duplicates inside the results & index\n        results = results.filter(function (feature) {\n          return feature.id !== closestLine.id;\n        });\n        tree.remove(closestLine);\n\n        // Append the two newly split lines into the results\n        featureEach(splitLineWithPoint(closestLine, point), function (line) {\n          results.push(line);\n          tree.insert(line);\n        });\n      }\n    }\n  });\n  return featureCollection(results);\n}\n\n/**\n * Split LineString with Point\n *\n * @private\n * @param {Feature<LineString>} line LineString\n * @param {Feature<Point>} splitter Point\n * @returns {FeatureCollection<LineString>} split LineStrings\n */\nfunction splitLineWithPoint(line, splitter) {\n  var results = [];\n\n  // handle endpoints\n  var startPoint = getCoords(line)[0];\n  var endPoint = getCoords(line)[line.geometry.coordinates.length - 1];\n  if (\n    pointsEquals(startPoint, getCoord(splitter)) ||\n    pointsEquals(endPoint, getCoord(splitter))\n  )\n    return featureCollection([line]);\n\n  // Create spatial index\n  var tree = rbush();\n  var segments = lineSegment(line);\n  tree.load(segments);\n\n  // Find all segments that are within bbox of splitter\n  var search = tree.search(splitter);\n\n  // Return itself if point is not within spatial index\n  if (!search.features.length) return featureCollection([line]);\n\n  // RBush might return multiple lines - only process the closest line to splitter\n  var closestSegment = findClosestFeature(splitter, search);\n\n  // Initial value is the first point of the first segments (beginning of line)\n  var initialValue = [startPoint];\n  var lastCoords = featureReduce(\n    segments,\n    function (previous, current, index) {\n      var currentCoords = getCoords(current)[1];\n      var splitterCoords = getCoord(splitter);\n\n      // Location where segment intersects with line\n      if (index === closestSegment.id) {\n        previous.push(splitterCoords);\n        results.push(lineString(previous));\n        // Don't duplicate splitter coordinate (Issue #688)\n        if (pointsEquals(splitterCoords, currentCoords))\n          return [splitterCoords];\n        return [splitterCoords, currentCoords];\n\n        // Keep iterating over coords until finished or intersection is found\n      } else {\n        previous.push(currentCoords);\n        return previous;\n      }\n    },\n    initialValue\n  );\n  // Append last line to final split results\n  if (lastCoords.length > 1) {\n    results.push(lineString(lastCoords));\n  }\n  return featureCollection(results);\n}\n\n/**\n * Find Closest Feature\n *\n * @private\n * @param {Feature<Point>} point Feature must be closest to this point\n * @param {FeatureCollection<LineString>} lines Collection of Features\n * @returns {Feature<LineString>} closest LineString\n */\nfunction findClosestFeature(point, lines) {\n  if (!lines.features.length) throw new Error(\"lines must contain features\");\n  // Filter to one segment that is the closest to the line\n  if (lines.features.length === 1) return lines.features[0];\n\n  var closestFeature;\n  var closestDistance = Infinity;\n  featureEach(lines, function (segment) {\n    var pt = nearestPointOnLine(segment, point);\n    var dist = pt.properties.dist;\n    if (dist < closestDistance) {\n      closestFeature = segment;\n      closestDistance = dist;\n    }\n  });\n  return closestFeature;\n}\n\n/**\n * Compares two points and returns if they are equals\n *\n * @private\n * @param {Array<number>} pt1 point\n * @param {Array<number>} pt2 point\n * @returns {boolean} true if they are equals\n */\nfunction pointsEquals(pt1, pt2) {\n  return pt1[0] === pt2[0] && pt1[1] === pt2[1];\n}\n\nexport default lineSplit;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,QAA7B,QAA6C,iBAA7C;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,aAAnC,QAAwD,YAAxD;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,eAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAmC;EACjC,IAAI,CAACD,IAAL,EAAW,MAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;EACX,IAAI,CAACD,QAAL,EAAe,MAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;EAEf,IAAIC,QAAQ,GAAGZ,OAAO,CAACS,IAAD,CAAtB;EACA,IAAII,YAAY,GAAGb,OAAO,CAACU,QAAD,CAA1B;EAEA,IAAIE,QAAQ,KAAK,YAAjB,EAA+B,MAAM,IAAID,KAAJ,CAAU,yBAAV,CAAN;EAC/B,IAAIE,YAAY,KAAK,mBAArB,EACE,MAAM,IAAIF,KAAJ,CAAU,wCAAV,CAAN;EACF,IAAIE,YAAY,KAAK,oBAArB,EACE,MAAM,IAAIF,KAAJ,CAAU,yCAAV,CAAN,CAX+B,CAajC;EACA;;EACA,IAAIG,iBAAiB,GAAGlB,QAAQ,CAACc,QAAD,EAAW;IAAEK,SAAS,EAAE;EAAb,CAAX,CAAhC;;EAEA,QAAQF,YAAR;IACE,KAAK,OAAL;MACE,OAAOG,kBAAkB,CAACP,IAAD,EAAOK,iBAAP,CAAzB;;IACF,KAAK,YAAL;MACE,OAAOG,mBAAmB,CAACR,IAAD,EAAOK,iBAAP,CAA1B;;IACF,KAAK,YAAL;IACA,KAAK,iBAAL;IACA,KAAK,SAAL;IACA,KAAK,cAAL;MACE,OAAOG,mBAAmB,CAACR,IAAD,EAAOX,aAAa,CAACW,IAAD,EAAOK,iBAAP,CAApB,CAA1B;EATJ;AAWD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,mBAAT,CAA6BR,IAA7B,EAAmCC,QAAnC,EAA6C;EAC3C,IAAIQ,OAAO,GAAG,EAAd;EACA,IAAIC,IAAI,GAAG1B,KAAK,EAAhB;EAEAU,WAAW,CAACO,QAAD,EAAW,UAAUU,KAAV,EAAiB;IACrC;IACAF,OAAO,CAACG,OAAR,CAAgB,UAAUC,OAAV,EAAmBC,KAAnB,EAA0B;MACxCD,OAAO,CAACE,EAAR,GAAaD,KAAb;IACD,CAFD,EAFqC,CAKrC;;IACA,IAAI,CAACL,OAAO,CAACO,MAAb,EAAqB;MACnBP,OAAO,GAAGF,kBAAkB,CAACP,IAAD,EAAOW,KAAP,CAAlB,CAAgCM,QAA1C,CADmB,CAGnB;;MACAR,OAAO,CAACG,OAAR,CAAgB,UAAUC,OAAV,EAAmB;QACjC,IAAI,CAACA,OAAO,CAAC3B,IAAb,EAAmB2B,OAAO,CAAC3B,IAAR,GAAeD,MAAM,CAACC,IAAI,CAAC2B,OAAD,CAAL,CAArB;MACpB,CAFD;MAGAH,IAAI,CAACQ,IAAL,CAAUrB,iBAAiB,CAACY,OAAD,CAA3B,EAPmB,CAQnB;IACD,CATD,MASO;MACL;MACA,IAAIU,MAAM,GAAGT,IAAI,CAACS,MAAL,CAAYR,KAAZ,CAAb;;MAEA,IAAIQ,MAAM,CAACF,QAAP,CAAgBD,MAApB,EAA4B;QAC1B;QACA,IAAII,WAAW,GAAGC,kBAAkB,CAACV,KAAD,EAAQQ,MAAR,CAApC,CAF0B,CAI1B;QACA;;QACAV,OAAO,GAAGA,OAAO,CAACa,MAAR,CAAe,UAAUT,OAAV,EAAmB;UAC1C,OAAOA,OAAO,CAACE,EAAR,KAAeK,WAAW,CAACL,EAAlC;QACD,CAFS,CAAV;QAGAL,IAAI,CAACa,MAAL,CAAYH,WAAZ,EAT0B,CAW1B;;QACAzB,WAAW,CAACY,kBAAkB,CAACa,WAAD,EAAcT,KAAd,CAAnB,EAAyC,UAAUX,IAAV,EAAgB;UAClES,OAAO,CAACe,IAAR,CAAaxB,IAAb;UACAU,IAAI,CAACe,MAAL,CAAYzB,IAAZ;QACD,CAHU,CAAX;MAID;IACF;EACF,CArCU,CAAX;EAsCA,OAAOH,iBAAiB,CAACY,OAAD,CAAxB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,kBAAT,CAA4BP,IAA5B,EAAkCC,QAAlC,EAA4C;EAC1C,IAAIQ,OAAO,GAAG,EAAd,CAD0C,CAG1C;;EACA,IAAIiB,UAAU,GAAGlC,SAAS,CAACQ,IAAD,CAAT,CAAgB,CAAhB,CAAjB;EACA,IAAI2B,QAAQ,GAAGnC,SAAS,CAACQ,IAAD,CAAT,CAAgBA,IAAI,CAAC4B,QAAL,CAAcC,WAAd,CAA0Bb,MAA1B,GAAmC,CAAnD,CAAf;EACA,IACEc,YAAY,CAACJ,UAAD,EAAajC,QAAQ,CAACQ,QAAD,CAArB,CAAZ,IACA6B,YAAY,CAACH,QAAD,EAAWlC,QAAQ,CAACQ,QAAD,CAAnB,CAFd,EAIE,OAAOJ,iBAAiB,CAAC,CAACG,IAAD,CAAD,CAAxB,CAVwC,CAY1C;;EACA,IAAIU,IAAI,GAAG1B,KAAK,EAAhB;EACA,IAAI+C,QAAQ,GAAG3C,WAAW,CAACY,IAAD,CAA1B;EACAU,IAAI,CAACQ,IAAL,CAAUa,QAAV,EAf0C,CAiB1C;;EACA,IAAIZ,MAAM,GAAGT,IAAI,CAACS,MAAL,CAAYlB,QAAZ,CAAb,CAlB0C,CAoB1C;;EACA,IAAI,CAACkB,MAAM,CAACF,QAAP,CAAgBD,MAArB,EAA6B,OAAOnB,iBAAiB,CAAC,CAACG,IAAD,CAAD,CAAxB,CArBa,CAuB1C;;EACA,IAAIgC,cAAc,GAAGX,kBAAkB,CAACpB,QAAD,EAAWkB,MAAX,CAAvC,CAxB0C,CA0B1C;;EACA,IAAIc,YAAY,GAAG,CAACP,UAAD,CAAnB;EACA,IAAIQ,UAAU,GAAGtC,aAAa,CAC5BmC,QAD4B,EAE5B,UAAUI,QAAV,EAAoBC,OAApB,EAA6BtB,KAA7B,EAAoC;IAClC,IAAIuB,aAAa,GAAG7C,SAAS,CAAC4C,OAAD,CAAT,CAAmB,CAAnB,CAApB;IACA,IAAIE,cAAc,GAAG7C,QAAQ,CAACQ,QAAD,CAA7B,CAFkC,CAIlC;;IACA,IAAIa,KAAK,KAAKkB,cAAc,CAACjB,EAA7B,EAAiC;MAC/BoB,QAAQ,CAACX,IAAT,CAAcc,cAAd;MACA7B,OAAO,CAACe,IAAR,CAAa1B,UAAU,CAACqC,QAAD,CAAvB,EAF+B,CAG/B;;MACA,IAAIL,YAAY,CAACQ,cAAD,EAAiBD,aAAjB,CAAhB,EACE,OAAO,CAACC,cAAD,CAAP;MACF,OAAO,CAACA,cAAD,EAAiBD,aAAjB,CAAP,CAN+B,CAQ/B;IACD,CATD,MASO;MACLF,QAAQ,CAACX,IAAT,CAAca,aAAd;MACA,OAAOF,QAAP;IACD;EACF,CApB2B,EAqB5BF,YArB4B,CAA9B,CA5B0C,CAmD1C;;EACA,IAAIC,UAAU,CAAClB,MAAX,GAAoB,CAAxB,EAA2B;IACzBP,OAAO,CAACe,IAAR,CAAa1B,UAAU,CAACoC,UAAD,CAAvB;EACD;;EACD,OAAOrC,iBAAiB,CAACY,OAAD,CAAxB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,kBAAT,CAA4BV,KAA5B,EAAmC4B,KAAnC,EAA0C;EACxC,IAAI,CAACA,KAAK,CAACtB,QAAN,CAAeD,MAApB,EAA4B,MAAM,IAAId,KAAJ,CAAU,6BAAV,CAAN,CADY,CAExC;;EACA,IAAIqC,KAAK,CAACtB,QAAN,CAAeD,MAAf,KAA0B,CAA9B,EAAiC,OAAOuB,KAAK,CAACtB,QAAN,CAAe,CAAf,CAAP;EAEjC,IAAIuB,cAAJ;EACA,IAAIC,eAAe,GAAGC,QAAtB;EACA/C,WAAW,CAAC4C,KAAD,EAAQ,UAAUI,OAAV,EAAmB;IACpC,IAAIC,EAAE,GAAGtD,kBAAkB,CAACqD,OAAD,EAAUhC,KAAV,CAA3B;IACA,IAAIkC,IAAI,GAAGD,EAAE,CAACE,UAAH,CAAcD,IAAzB;;IACA,IAAIA,IAAI,GAAGJ,eAAX,EAA4B;MAC1BD,cAAc,GAAGG,OAAjB;MACAF,eAAe,GAAGI,IAAlB;IACD;EACF,CAPU,CAAX;EAQA,OAAOL,cAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASV,YAAT,CAAsBiB,GAAtB,EAA2BC,GAA3B,EAAgC;EAC9B,OAAOD,GAAG,CAAC,CAAD,CAAH,KAAWC,GAAG,CAAC,CAAD,CAAd,IAAqBD,GAAG,CAAC,CAAD,CAAH,KAAWC,GAAG,CAAC,CAAD,CAA1C;AACD;;AAED,eAAejD,SAAf"},"metadata":{},"sourceType":"module"}