{"ast":null,"code":"import pointEqual from \"../pointEqual\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n\n  this.e = entry; // is an entry?\n\n  this.v = false; // visited\n\n  this.n = this.p = null; // next & previous\n} // A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\n\n\nexport default function (segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n  segments.forEach(function (segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n,\n        p0 = segment[0],\n        p1 = segment[n],\n        x; // If the first and last points of a segment are coincident, then treat as a\n    // closed ring. TODO if all rings are closed, then the winding order of the\n    // exterior ring should be checked.\n\n    if (pointEqual(p0, p1)) {\n      stream.lineStart();\n\n      for (i = 0; i < n; ++i) {\n        stream.point((p0 = segment[i])[0], p0[1]);\n      }\n\n      stream.lineEnd();\n      return;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n  if (!subject.length) return;\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n\n    while (current.v) {\n      if ((current = current.n) === start) return;\n    }\n\n    points = current.z;\n    stream.lineStart();\n\n    do {\n      current.v = current.o.v = true;\n\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n\n          for (i = points.length - 1; i >= 0; --i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n\n        current = current.p;\n      }\n\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n\n  a.n = b = array[0];\n  b.p = a;\n}","map":{"version":3,"names":["pointEqual","Intersection","point","points","other","entry","x","z","o","e","v","n","p","segments","compareIntersection","startInside","interpolate","stream","subject","clip","i","forEach","segment","length","p0","p1","lineStart","lineEnd","push","sort","link","start","current","isSubject","array","a","b"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/d3-geo/src/clip/polygon.js"],"sourcesContent":["import pointEqual from \"../pointEqual\";\r\n\r\nfunction Intersection(point, points, other, entry) {\r\n  this.x = point;\r\n  this.z = points;\r\n  this.o = other; // another intersection\r\n  this.e = entry; // is an entry?\r\n  this.v = false; // visited\r\n  this.n = this.p = null; // next & previous\r\n}\r\n\r\n// A generalized polygon clipping algorithm: given a polygon that has been cut\r\n// into its visible line segments, and rejoins the segments by interpolating\r\n// along the clip edge.\r\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\r\n  var subject = [],\r\n      clip = [],\r\n      i,\r\n      n;\r\n\r\n  segments.forEach(function(segment) {\r\n    if ((n = segment.length - 1) <= 0) return;\r\n    var n, p0 = segment[0], p1 = segment[n], x;\r\n\r\n    // If the first and last points of a segment are coincident, then treat as a\r\n    // closed ring. TODO if all rings are closed, then the winding order of the\r\n    // exterior ring should be checked.\r\n    if (pointEqual(p0, p1)) {\r\n      stream.lineStart();\r\n      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\r\n      stream.lineEnd();\r\n      return;\r\n    }\r\n\r\n    subject.push(x = new Intersection(p0, segment, null, true));\r\n    clip.push(x.o = new Intersection(p0, null, x, false));\r\n    subject.push(x = new Intersection(p1, segment, null, false));\r\n    clip.push(x.o = new Intersection(p1, null, x, true));\r\n  });\r\n\r\n  if (!subject.length) return;\r\n\r\n  clip.sort(compareIntersection);\r\n  link(subject);\r\n  link(clip);\r\n\r\n  for (i = 0, n = clip.length; i < n; ++i) {\r\n    clip[i].e = startInside = !startInside;\r\n  }\r\n\r\n  var start = subject[0],\r\n      points,\r\n      point;\r\n\r\n  while (1) {\r\n    // Find first unvisited intersection.\r\n    var current = start,\r\n        isSubject = true;\r\n    while (current.v) if ((current = current.n) === start) return;\r\n    points = current.z;\r\n    stream.lineStart();\r\n    do {\r\n      current.v = current.o.v = true;\r\n      if (current.e) {\r\n        if (isSubject) {\r\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\r\n        } else {\r\n          interpolate(current.x, current.n.x, 1, stream);\r\n        }\r\n        current = current.n;\r\n      } else {\r\n        if (isSubject) {\r\n          points = current.p.z;\r\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\r\n        } else {\r\n          interpolate(current.x, current.p.x, -1, stream);\r\n        }\r\n        current = current.p;\r\n      }\r\n      current = current.o;\r\n      points = current.z;\r\n      isSubject = !isSubject;\r\n    } while (!current.v);\r\n    stream.lineEnd();\r\n  }\r\n}\r\n\r\nfunction link(array) {\r\n  if (!(n = array.length)) return;\r\n  var n,\r\n      i = 0,\r\n      a = array[0],\r\n      b;\r\n  while (++i < n) {\r\n    a.n = b = array[i];\r\n    b.p = a;\r\n    a = b;\r\n  }\r\n  a.n = b = array[0];\r\n  b.p = a;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}