{"ast":null,"code":"import centroid from '@turf/centroid';\nimport rhumbBearing from '@turf/rhumb-bearing';\nimport rhumbDistance from '@turf/rhumb-distance';\nimport rhumbDestination from '@turf/rhumb-destination';\nimport clone from '@turf/clone';\nimport { coordEach } from '@turf/meta';\nimport { getCoords } from '@turf/invariant';\nimport { isObject } from '@turf/helpers';\n/**\n * Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point.\n *\n * @name transformRotate\n * @param {GeoJSON} geojson object to be rotated\n * @param {number} angle of rotation in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {Coord} [options.pivot='centroid'] point around which the rotation will be performed\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the rotated GeoJSON feature\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var options = {pivot: [0, 25]};\n * var rotatedPoly = turf.transformRotate(poly, 10, options);\n *\n * //addToMap\n * var addToMap = [poly, rotatedPoly];\n * rotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\n\nfunction transformRotate(geojson, angle, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var pivot = options.pivot;\n  var mutate = options.mutate; // Input validation\n\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (angle === undefined || angle === null || isNaN(angle)) throw new Error(\"angle is required\"); // Shortcut no-rotation\n\n  if (angle === 0) return geojson; // Use centroid of GeoJSON if pivot is not provided\n\n  if (!pivot) pivot = centroid(geojson); // Clone geojson to avoid side effects\n\n  if (mutate === false || mutate === undefined) geojson = clone(geojson); // Rotate each coordinate\n\n  coordEach(geojson, function (pointCoords) {\n    var initialAngle = rhumbBearing(pivot, pointCoords);\n    var finalAngle = initialAngle + angle;\n    var distance = rhumbDistance(pivot, pointCoords);\n    var newCoords = getCoords(rhumbDestination(pivot, distance, finalAngle));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n  });\n  return geojson;\n}\n\nexport default transformRotate;","map":{"version":3,"names":["centroid","rhumbBearing","rhumbDistance","rhumbDestination","clone","coordEach","getCoords","isObject","transformRotate","geojson","angle","options","Error","pivot","mutate","undefined","isNaN","pointCoords","initialAngle","finalAngle","distance","newCoords"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/transform-rotate/dist/es/index.js"],"sourcesContent":["import centroid from '@turf/centroid';\nimport rhumbBearing from '@turf/rhumb-bearing';\nimport rhumbDistance from '@turf/rhumb-distance';\nimport rhumbDestination from '@turf/rhumb-destination';\nimport clone from '@turf/clone';\nimport { coordEach } from '@turf/meta';\nimport { getCoords } from '@turf/invariant';\nimport { isObject } from '@turf/helpers';\n\n/**\n * Rotates any geojson Feature or Geometry of a specified angle, around its `centroid` or a given `pivot` point.\n *\n * @name transformRotate\n * @param {GeoJSON} geojson object to be rotated\n * @param {number} angle of rotation in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {Coord} [options.pivot='centroid'] point around which the rotation will be performed\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the rotated GeoJSON feature\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var options = {pivot: [0, 25]};\n * var rotatedPoly = turf.transformRotate(poly, 10, options);\n *\n * //addToMap\n * var addToMap = [poly, rotatedPoly];\n * rotatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\nfunction transformRotate(geojson, angle, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var pivot = options.pivot;\n  var mutate = options.mutate;\n\n  // Input validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (angle === undefined || angle === null || isNaN(angle))\n    throw new Error(\"angle is required\");\n\n  // Shortcut no-rotation\n  if (angle === 0) return geojson;\n\n  // Use centroid of GeoJSON if pivot is not provided\n  if (!pivot) pivot = centroid(geojson);\n\n  // Clone geojson to avoid side effects\n  if (mutate === false || mutate === undefined) geojson = clone(geojson);\n\n  // Rotate each coordinate\n  coordEach(geojson, function (pointCoords) {\n    var initialAngle = rhumbBearing(pivot, pointCoords);\n    var finalAngle = initialAngle + angle;\n    var distance = rhumbDistance(pivot, pointCoords);\n    var newCoords = getCoords(rhumbDestination(pivot, distance, finalAngle));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n  });\n  return geojson;\n}\n\nexport default transformRotate;\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,QAAT,QAAyB,eAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,KAAlC,EAAyCC,OAAzC,EAAkD;EAChD;EACAA,OAAO,GAAGA,OAAO,IAAI,EAArB;EACA,IAAI,CAACJ,QAAQ,CAACI,OAAD,CAAb,EAAwB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;EACxB,IAAIC,KAAK,GAAGF,OAAO,CAACE,KAApB;EACA,IAAIC,MAAM,GAAGH,OAAO,CAACG,MAArB,CALgD,CAOhD;;EACA,IAAI,CAACL,OAAL,EAAc,MAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;EACd,IAAIF,KAAK,KAAKK,SAAV,IAAuBL,KAAK,KAAK,IAAjC,IAAyCM,KAAK,CAACN,KAAD,CAAlD,EACE,MAAM,IAAIE,KAAJ,CAAU,mBAAV,CAAN,CAV8C,CAYhD;;EACA,IAAIF,KAAK,KAAK,CAAd,EAAiB,OAAOD,OAAP,CAb+B,CAehD;;EACA,IAAI,CAACI,KAAL,EAAYA,KAAK,GAAGb,QAAQ,CAACS,OAAD,CAAhB,CAhBoC,CAkBhD;;EACA,IAAIK,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAKC,SAAnC,EAA8CN,OAAO,GAAGL,KAAK,CAACK,OAAD,CAAf,CAnBE,CAqBhD;;EACAJ,SAAS,CAACI,OAAD,EAAU,UAAUQ,WAAV,EAAuB;IACxC,IAAIC,YAAY,GAAGjB,YAAY,CAACY,KAAD,EAAQI,WAAR,CAA/B;IACA,IAAIE,UAAU,GAAGD,YAAY,GAAGR,KAAhC;IACA,IAAIU,QAAQ,GAAGlB,aAAa,CAACW,KAAD,EAAQI,WAAR,CAA5B;IACA,IAAII,SAAS,GAAGf,SAAS,CAACH,gBAAgB,CAACU,KAAD,EAAQO,QAAR,EAAkBD,UAAlB,CAAjB,CAAzB;IACAF,WAAW,CAAC,CAAD,CAAX,GAAiBI,SAAS,CAAC,CAAD,CAA1B;IACAJ,WAAW,CAAC,CAAD,CAAX,GAAiBI,SAAS,CAAC,CAAD,CAA1B;EACD,CAPQ,CAAT;EAQA,OAAOZ,OAAP;AACD;;AAED,eAAeD,eAAf"},"metadata":{},"sourceType":"module"}