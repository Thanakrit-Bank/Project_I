{"ast":null,"code":"import distance from \"@turf/distance\";\nimport intersect from \"@turf/intersect\";\nimport { polygon, featureCollection } from \"@turf/helpers\";\n/**\n * Takes a bounding box and a cell depth and returns a set of triangular {@link Polygon|polygons} in a grid.\n *\n * @name triangleGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSide dimension of each cell\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees, radians, miles, or kilometers\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Polygon>} grid of polygons\n * @example\n * var bbox = [-95, 30 ,-85, 40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [triangleGrid];\n */\n\nfunction triangleGrid(bbox, cellSide, options) {\n  if (options === void 0) {\n    options = {};\n  } // Containers\n\n\n  var results = []; // Input Validation is being handled by Typescript\n  // if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');\n  // if (!isNumber(cellSide)) throw new Error('cellSide is invalid');\n  // if (!bbox) throw new Error('bbox is required');\n  // if (!Array.isArray(bbox)) throw new Error('bbox must be array');\n  // if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');\n  // if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');\n  // Main\n\n  var xFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], options);\n  var cellWidth = xFraction * (bbox[2] - bbox[0]);\n  var yFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], options);\n  var cellHeight = yFraction * (bbox[3] - bbox[1]);\n  var xi = 0;\n  var currentX = bbox[0];\n\n  while (currentX <= bbox[2]) {\n    var yi = 0;\n    var currentY = bbox[1];\n\n    while (currentY <= bbox[3]) {\n      var cellTriangle1 = null;\n      var cellTriangle2 = null;\n\n      if (xi % 2 === 0 && yi % 2 === 0) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], options.properties);\n      } else if (xi % 2 === 0 && yi % 2 === 1) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], options.properties);\n      } else if (yi % 2 === 0 && xi % 2 === 1) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n      } else if (yi % 2 === 1 && xi % 2 === 1) {\n        cellTriangle1 = polygon([[[currentX, currentY], [currentX, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY]]], options.properties);\n        cellTriangle2 = polygon([[[currentX, currentY + cellHeight], [currentX + cellWidth, currentY + cellHeight], [currentX + cellWidth, currentY], [currentX, currentY + cellHeight]]], options.properties);\n      }\n\n      if (options.mask) {\n        if (intersect(options.mask, cellTriangle1)) results.push(cellTriangle1);\n        if (intersect(options.mask, cellTriangle2)) results.push(cellTriangle2);\n      } else {\n        results.push(cellTriangle1);\n        results.push(cellTriangle2);\n      }\n\n      currentY += cellHeight;\n      yi++;\n    }\n\n    xi++;\n    currentX += cellWidth;\n  }\n\n  return featureCollection(results);\n}\n\nexport default triangleGrid;","map":{"version":3,"names":["distance","intersect","polygon","featureCollection","triangleGrid","bbox","cellSide","options","results","xFraction","cellWidth","yFraction","cellHeight","xi","currentX","yi","currentY","cellTriangle1","cellTriangle2","properties","mask","push"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/triangle-grid/dist/es/index.js"],"sourcesContent":["import distance from \"@turf/distance\";\nimport intersect from \"@turf/intersect\";\nimport { polygon, featureCollection, } from \"@turf/helpers\";\n/**\n * Takes a bounding box and a cell depth and returns a set of triangular {@link Polygon|polygons} in a grid.\n *\n * @name triangleGrid\n * @param {Array<number>} bbox extent in [minX, minY, maxX, maxY] order\n * @param {number} cellSide dimension of each cell\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] used in calculating cellSide, can be degrees, radians, miles, or kilometers\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\n * @param {Object} [options.properties={}] passed to each point of the grid\n * @returns {FeatureCollection<Polygon>} grid of polygons\n * @example\n * var bbox = [-95, 30 ,-85, 40];\n * var cellSide = 50;\n * var options = {units: 'miles'};\n *\n * var triangleGrid = turf.triangleGrid(bbox, cellSide, options);\n *\n * //addToMap\n * var addToMap = [triangleGrid];\n */\nfunction triangleGrid(bbox, cellSide, options) {\n    if (options === void 0) { options = {}; }\n    // Containers\n    var results = [];\n    // Input Validation is being handled by Typescript\n    // if (cellSide === null || cellSide === undefined) throw new Error('cellSide is required');\n    // if (!isNumber(cellSide)) throw new Error('cellSide is invalid');\n    // if (!bbox) throw new Error('bbox is required');\n    // if (!Array.isArray(bbox)) throw new Error('bbox must be array');\n    // if (bbox.length !== 4) throw new Error('bbox must contain 4 numbers');\n    // if (mask && ['Polygon', 'MultiPolygon'].indexOf(getType(mask)) === -1) throw new Error('options.mask must be a (Multi)Polygon');\n    // Main\n    var xFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[2], bbox[1]], options);\n    var cellWidth = xFraction * (bbox[2] - bbox[0]);\n    var yFraction = cellSide / distance([bbox[0], bbox[1]], [bbox[0], bbox[3]], options);\n    var cellHeight = yFraction * (bbox[3] - bbox[1]);\n    var xi = 0;\n    var currentX = bbox[0];\n    while (currentX <= bbox[2]) {\n        var yi = 0;\n        var currentY = bbox[1];\n        while (currentY <= bbox[3]) {\n            var cellTriangle1 = null;\n            var cellTriangle2 = null;\n            if (xi % 2 === 0 && yi % 2 === 0) {\n                cellTriangle1 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n                cellTriangle2 = polygon([\n                    [\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY + cellHeight],\n                    ],\n                ], options.properties);\n            }\n            else if (xi % 2 === 0 && yi % 2 === 1) {\n                cellTriangle1 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n                cellTriangle2 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n            }\n            else if (yi % 2 === 0 && xi % 2 === 1) {\n                cellTriangle1 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n                cellTriangle2 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n            }\n            else if (yi % 2 === 1 && xi % 2 === 1) {\n                cellTriangle1 = polygon([\n                    [\n                        [currentX, currentY],\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY],\n                    ],\n                ], options.properties);\n                cellTriangle2 = polygon([\n                    [\n                        [currentX, currentY + cellHeight],\n                        [currentX + cellWidth, currentY + cellHeight],\n                        [currentX + cellWidth, currentY],\n                        [currentX, currentY + cellHeight],\n                    ],\n                ], options.properties);\n            }\n            if (options.mask) {\n                if (intersect(options.mask, cellTriangle1))\n                    results.push(cellTriangle1);\n                if (intersect(options.mask, cellTriangle2))\n                    results.push(cellTriangle2);\n            }\n            else {\n                results.push(cellTriangle1);\n                results.push(cellTriangle2);\n            }\n            currentY += cellHeight;\n            yi++;\n        }\n        xi++;\n        currentX += cellWidth;\n    }\n    return featureCollection(results);\n}\nexport default triangleGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}