{"ast":null,"code":"import { isObject, multiPolygon, featureCollection } from '@turf/helpers';\nimport { collectionOf } from '@turf/invariant';\nimport { featureEach } from '@turf/meta';\nimport flatten from '@turf/flatten';\nimport polygonClipping from 'polygon-clipping';\n/**\n * Dissolves a FeatureCollection of {@link polygon} features, filtered by an optional property name:value.\n * Note that {@link mulitpolygon} features within the collection are not supported\n *\n * @name dissolve\n * @param {FeatureCollection<Polygon>} featureCollection input feature collection to be dissolved\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.propertyName] features with the same `propertyName` value will be dissolved.\n * @returns {FeatureCollection<Polygon>} a FeatureCollection containing the dissolved polygons\n * @example\n * var features = turf.featureCollection([\n *   turf.polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], {combine: 'yes'}),\n *   turf.polygon([[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]], {combine: 'yes'}),\n *   turf.polygon([[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]], {combine: 'no'}),\n * ]);\n *\n * var dissolved = turf.dissolve(features, {propertyName: 'combine'});\n *\n * //addToMap\n * var addToMap = [features, dissolved]\n */\n\nfunction dissolve(fc, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var propertyName = options.propertyName; // Input validation\n\n  collectionOf(fc, \"Polygon\", \"dissolve\"); // Main\n\n  var outFeatures = [];\n\n  if (!options.propertyName) {\n    return flatten(multiPolygon(polygonClipping.union.apply(null, fc.features.map(function (f) {\n      return f.geometry.coordinates;\n    }))));\n  } else {\n    var uniquePropertyVals = {};\n    featureEach(fc, function (feature) {\n      if (!Object.prototype.hasOwnProperty.call(uniquePropertyVals, feature.properties[propertyName])) {\n        uniquePropertyVals[feature.properties[propertyName]] = [];\n      }\n\n      uniquePropertyVals[feature.properties[propertyName]].push(feature);\n    });\n    var vals = Object.keys(uniquePropertyVals);\n\n    for (var i = 0; i < vals.length; i++) {\n      var mp = multiPolygon(polygonClipping.union.apply(null, uniquePropertyVals[vals[i]].map(function (f) {\n        return f.geometry.coordinates;\n      })));\n      mp.properties[propertyName] = vals[i];\n      outFeatures.push(mp);\n    }\n  }\n\n  return flatten(featureCollection(outFeatures));\n}\n\nexport default dissolve;","map":{"version":3,"names":["isObject","multiPolygon","featureCollection","collectionOf","featureEach","flatten","polygonClipping","dissolve","fc","options","Error","propertyName","outFeatures","union","apply","features","map","f","geometry","coordinates","uniquePropertyVals","feature","Object","prototype","hasOwnProperty","call","properties","push","vals","keys","i","length","mp"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/dissolve/dist/es/index.js"],"sourcesContent":["import { isObject, multiPolygon, featureCollection } from '@turf/helpers';\nimport { collectionOf } from '@turf/invariant';\nimport { featureEach } from '@turf/meta';\nimport flatten from '@turf/flatten';\nimport polygonClipping from 'polygon-clipping';\n\n/**\n * Dissolves a FeatureCollection of {@link polygon} features, filtered by an optional property name:value.\n * Note that {@link mulitpolygon} features within the collection are not supported\n *\n * @name dissolve\n * @param {FeatureCollection<Polygon>} featureCollection input feature collection to be dissolved\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.propertyName] features with the same `propertyName` value will be dissolved.\n * @returns {FeatureCollection<Polygon>} a FeatureCollection containing the dissolved polygons\n * @example\n * var features = turf.featureCollection([\n *   turf.polygon([[[0, 0], [0, 1], [1, 1], [1, 0], [0, 0]]], {combine: 'yes'}),\n *   turf.polygon([[[0, -1], [0, 0], [1, 0], [1, -1], [0,-1]]], {combine: 'yes'}),\n *   turf.polygon([[[1,-1],[1, 0], [2, 0], [2, -1], [1, -1]]], {combine: 'no'}),\n * ]);\n *\n * var dissolved = turf.dissolve(features, {propertyName: 'combine'});\n *\n * //addToMap\n * var addToMap = [features, dissolved]\n */\nfunction dissolve(fc, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var propertyName = options.propertyName;\n\n  // Input validation\n  collectionOf(fc, \"Polygon\", \"dissolve\");\n\n  // Main\n  var outFeatures = [];\n  if (!options.propertyName) {\n    return flatten(\n      multiPolygon(\n        polygonClipping.union.apply(\n          null,\n          fc.features.map(function (f) {\n            return f.geometry.coordinates;\n          })\n        )\n      )\n    );\n  } else {\n    var uniquePropertyVals = {};\n    featureEach(fc, function (feature) {\n      if (\n        !Object.prototype.hasOwnProperty.call(\n          uniquePropertyVals,\n          feature.properties[propertyName]\n        )\n      ) {\n        uniquePropertyVals[feature.properties[propertyName]] = [];\n      }\n      uniquePropertyVals[feature.properties[propertyName]].push(feature);\n    });\n    var vals = Object.keys(uniquePropertyVals);\n    for (var i = 0; i < vals.length; i++) {\n      var mp = multiPolygon(\n        polygonClipping.union.apply(\n          null,\n          uniquePropertyVals[vals[i]].map(function (f) {\n            return f.geometry.coordinates;\n          })\n        )\n      );\n      mp.properties[propertyName] = vals[i];\n      outFeatures.push(mp);\n    }\n  }\n\n  return flatten(featureCollection(outFeatures));\n}\n\nexport default dissolve;\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,EAAiCC,iBAAjC,QAA0D,eAA1D;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,EAAlB,EAAsBC,OAAtB,EAA+B;EAC7B;EACAA,OAAO,GAAGA,OAAO,IAAI,EAArB;EACA,IAAI,CAACT,QAAQ,CAACS,OAAD,CAAb,EAAwB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;EACxB,IAAIC,YAAY,GAAGF,OAAO,CAACE,YAA3B,CAJ6B,CAM7B;;EACAR,YAAY,CAACK,EAAD,EAAK,SAAL,EAAgB,UAAhB,CAAZ,CAP6B,CAS7B;;EACA,IAAII,WAAW,GAAG,EAAlB;;EACA,IAAI,CAACH,OAAO,CAACE,YAAb,EAA2B;IACzB,OAAON,OAAO,CACZJ,YAAY,CACVK,eAAe,CAACO,KAAhB,CAAsBC,KAAtB,CACE,IADF,EAEEN,EAAE,CAACO,QAAH,CAAYC,GAAZ,CAAgB,UAAUC,CAAV,EAAa;MAC3B,OAAOA,CAAC,CAACC,QAAF,CAAWC,WAAlB;IACD,CAFD,CAFF,CADU,CADA,CAAd;EAUD,CAXD,MAWO;IACL,IAAIC,kBAAkB,GAAG,EAAzB;IACAhB,WAAW,CAACI,EAAD,EAAK,UAAUa,OAAV,EAAmB;MACjC,IACE,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CACCL,kBADD,EAECC,OAAO,CAACK,UAAR,CAAmBf,YAAnB,CAFD,CADH,EAKE;QACAS,kBAAkB,CAACC,OAAO,CAACK,UAAR,CAAmBf,YAAnB,CAAD,CAAlB,GAAuD,EAAvD;MACD;;MACDS,kBAAkB,CAACC,OAAO,CAACK,UAAR,CAAmBf,YAAnB,CAAD,CAAlB,CAAqDgB,IAArD,CAA0DN,OAA1D;IACD,CAVU,CAAX;IAWA,IAAIO,IAAI,GAAGN,MAAM,CAACO,IAAP,CAAYT,kBAAZ,CAAX;;IACA,KAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,IAAIE,EAAE,GAAG/B,YAAY,CACnBK,eAAe,CAACO,KAAhB,CAAsBC,KAAtB,CACE,IADF,EAEEM,kBAAkB,CAACQ,IAAI,CAACE,CAAD,CAAL,CAAlB,CAA4Bd,GAA5B,CAAgC,UAAUC,CAAV,EAAa;QAC3C,OAAOA,CAAC,CAACC,QAAF,CAAWC,WAAlB;MACD,CAFD,CAFF,CADmB,CAArB;MAQAa,EAAE,CAACN,UAAH,CAAcf,YAAd,IAA8BiB,IAAI,CAACE,CAAD,CAAlC;MACAlB,WAAW,CAACe,IAAZ,CAAiBK,EAAjB;IACD;EACF;;EAED,OAAO3B,OAAO,CAACH,iBAAiB,CAACU,WAAD,CAAlB,CAAd;AACD;;AAED,eAAeL,QAAf"},"metadata":{},"sourceType":"module"}