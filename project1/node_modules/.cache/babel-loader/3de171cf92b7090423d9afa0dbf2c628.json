{"ast":null,"code":"// https://en.wikipedia.org/wiki/Rhumb_line\nimport { convertLength, earthRadius } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n/**\n * Calculates the distance along a rhumb line between two {@link Point|points} in degrees, radians,\n * miles, or kilometers.\n *\n * @name rhumbDistance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.rhumbDistance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\n\nfunction rhumbDistance(from, to, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var origin = getCoord(from);\n  var destination = getCoord(to); // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n  // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n\n  destination[0] += destination[0] - origin[0] > 180 ? -360 : origin[0] - destination[0] > 180 ? 360 : 0;\n  var distanceInMeters = calculateRhumbDistance(origin, destination);\n  var distance = convertLength(distanceInMeters, \"meters\", options.units);\n  return distance;\n}\n/**\n * Returns the distance travelling from ‘this’ point to destination point along a rhumb line.\n * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js\n *\n * @private\n * @param   {Array<number>} origin point.\n * @param   {Array<number>} destination point.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {number} Distance in km between this point and destination point (same units as radius).\n *\n * @example\n *     var p1 = new LatLon(51.127, 1.338);\n *     var p2 = new LatLon(50.964, 1.853);\n *     var d = p1.distanceTo(p2); // 40.31 km\n */\n\n\nfunction calculateRhumbDistance(origin, destination, radius) {\n  // φ => phi\n  // λ => lambda\n  // ψ => psi\n  // Δ => Delta\n  // δ => delta\n  // θ => theta\n  radius = radius === undefined ? earthRadius : Number(radius); // see www.edwilliams.org/avform.htm#Rhumb\n\n  var R = radius;\n  var phi1 = origin[1] * Math.PI / 180;\n  var phi2 = destination[1] * Math.PI / 180;\n  var DeltaPhi = phi2 - phi1;\n  var DeltaLambda = Math.abs(destination[0] - origin[0]) * Math.PI / 180; // if dLon over 180° take shorter rhumb line across the anti-meridian:\n\n  if (DeltaLambda > Math.PI) {\n    DeltaLambda -= 2 * Math.PI;\n  } // on Mercator projection, longitude distances shrink by latitude; q is the 'stretch factor'\n  // q becomes ill-conditioned along E-W line (0/0); use empirical tolerance to avoid it\n\n\n  var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n  var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1); // distance is pythagoras on 'stretched' Mercator projection\n\n  var delta = Math.sqrt(DeltaPhi * DeltaPhi + q * q * DeltaLambda * DeltaLambda); // angular distance in radians\n\n  var dist = delta * R;\n  return dist;\n}\n\nexport default rhumbDistance;","map":{"version":3,"names":["convertLength","earthRadius","getCoord","rhumbDistance","from","to","options","origin","destination","distanceInMeters","calculateRhumbDistance","distance","units","radius","undefined","Number","R","phi1","Math","PI","phi2","DeltaPhi","DeltaLambda","abs","DeltaPsi","log","tan","q","cos","delta","sqrt","dist"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/rhumb-distance/dist/es/index.js"],"sourcesContent":["// https://en.wikipedia.org/wiki/Rhumb_line\nimport { convertLength, earthRadius } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n/**\n * Calculates the distance along a rhumb line between two {@link Point|points} in degrees, radians,\n * miles, or kilometers.\n *\n * @name rhumbDistance\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.rhumbDistance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction rhumbDistance(from, to, options) {\n    if (options === void 0) { options = {}; }\n    var origin = getCoord(from);\n    var destination = getCoord(to);\n    // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n    // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n    destination[0] +=\n        destination[0] - origin[0] > 180\n            ? -360\n            : origin[0] - destination[0] > 180\n                ? 360\n                : 0;\n    var distanceInMeters = calculateRhumbDistance(origin, destination);\n    var distance = convertLength(distanceInMeters, \"meters\", options.units);\n    return distance;\n}\n/**\n * Returns the distance travelling from ‘this’ point to destination point along a rhumb line.\n * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js\n *\n * @private\n * @param   {Array<number>} origin point.\n * @param   {Array<number>} destination point.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {number} Distance in km between this point and destination point (same units as radius).\n *\n * @example\n *     var p1 = new LatLon(51.127, 1.338);\n *     var p2 = new LatLon(50.964, 1.853);\n *     var d = p1.distanceTo(p2); // 40.31 km\n */\nfunction calculateRhumbDistance(origin, destination, radius) {\n    // φ => phi\n    // λ => lambda\n    // ψ => psi\n    // Δ => Delta\n    // δ => delta\n    // θ => theta\n    radius = radius === undefined ? earthRadius : Number(radius);\n    // see www.edwilliams.org/avform.htm#Rhumb\n    var R = radius;\n    var phi1 = (origin[1] * Math.PI) / 180;\n    var phi2 = (destination[1] * Math.PI) / 180;\n    var DeltaPhi = phi2 - phi1;\n    var DeltaLambda = (Math.abs(destination[0] - origin[0]) * Math.PI) / 180;\n    // if dLon over 180° take shorter rhumb line across the anti-meridian:\n    if (DeltaLambda > Math.PI) {\n        DeltaLambda -= 2 * Math.PI;\n    }\n    // on Mercator projection, longitude distances shrink by latitude; q is the 'stretch factor'\n    // q becomes ill-conditioned along E-W line (0/0); use empirical tolerance to avoid it\n    var DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n    var q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n    // distance is pythagoras on 'stretched' Mercator projection\n    var delta = Math.sqrt(DeltaPhi * DeltaPhi + q * q * DeltaLambda * DeltaLambda); // angular distance in radians\n    var dist = delta * R;\n    return dist;\n}\nexport default rhumbDistance;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}