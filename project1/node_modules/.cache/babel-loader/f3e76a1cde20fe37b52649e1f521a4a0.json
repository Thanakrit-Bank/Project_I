{"ast":null,"code":"import centroid from \"@turf/centroid\";\nimport { getCoord } from \"@turf/invariant\";\nimport { featureEach } from \"@turf/meta\";\n/**\r\n * calcualte the Minkowski p-norm distance between two features.\r\n * @param feature1 point feature\r\n * @param feature2 point feature\r\n * @param p p-norm 1=<p<=infinity 1: Manhattan distance 2: Euclidean distance\r\n */\n\nexport function pNormDistance(feature1, feature2, p) {\n  if (p === void 0) {\n    p = 2;\n  }\n\n  var coordinate1 = getCoord(feature1);\n  var coordinate2 = getCoord(feature2);\n  var xDiff = coordinate1[0] - coordinate2[0];\n  var yDiff = coordinate1[1] - coordinate2[1];\n\n  if (p === 1) {\n    return Math.abs(xDiff) + Math.abs(yDiff);\n  }\n\n  return Math.pow(Math.pow(xDiff, p) + Math.pow(yDiff, p), 1 / p);\n}\n/**\r\n *\r\n *\r\n * @name distanceWeight\r\n * @param {FeatureCollection<any>} fc FeatureCollection.\r\n * @param {Object} [options] option object.\r\n * @param {number} [options.threshold=10000] If the distance between neighbor and\r\n * target features is greater than threshold, the weight of that neighbor is 0.\r\n * @param {number} [options.p=2] Minkowski p-norm distance parameter.\r\n * 1: Manhattan distance. 2: Euclidean distance. 1=<p<=infinity.\r\n * @param {boolean} [options.binary=false] If true, weight=1 if d <= threshold otherwise weight=0.\r\n *  If false, weight=Math.pow(d, alpha).\r\n * @param {number} [options.alpha=-1] distance decay parameter.\r\n * A big value means the weight decay quickly as distance increases.\r\n * @param {boolean} [options.standardization=false] row standardization.\r\n * @returns {Array<Array<number>>} distance weight matrix.\r\n * @example\r\n *\r\n * var bbox = [-65, 40, -63, 42];\r\n * var dataset = turf.randomPoint(100, { bbox: bbox });\r\n * var result = turf.distanceWeight(dataset);\r\n */\n\nexport default function distanceWeight(fc, options) {\n  options = options || {};\n  var threshold = options.threshold || 10000;\n  var p = options.p || 2;\n  var binary = options.binary || false;\n  var alpha = options.alpha || -1;\n  var rowTransform = options.standardization || false;\n  var features = [];\n  featureEach(fc, function (feature) {\n    features.push(centroid(feature));\n  }); // computing the distance between the features\n\n  var weights = [];\n\n  for (var i = 0; i < features.length; i++) {\n    weights[i] = [];\n  }\n\n  for (var i = 0; i < features.length; i++) {\n    for (var j = i; j < features.length; j++) {\n      if (i === j) {\n        weights[i][j] = 0;\n      }\n\n      var dis = pNormDistance(features[i], features[j], p);\n      weights[i][j] = dis;\n      weights[j][i] = dis;\n    }\n  } // binary or distance decay\n\n\n  for (var i = 0; i < features.length; i++) {\n    for (var j = 0; j < features.length; j++) {\n      var dis = weights[i][j];\n\n      if (dis === 0) {\n        continue;\n      }\n\n      if (binary) {\n        if (dis <= threshold) {\n          weights[i][j] = 1.0;\n        } else {\n          weights[i][j] = 0.0;\n        }\n      } else {\n        if (dis <= threshold) {\n          weights[i][j] = Math.pow(dis, alpha);\n        } else {\n          weights[i][j] = 0.0;\n        }\n      }\n    }\n  }\n\n  if (rowTransform) {\n    for (var i = 0; i < features.length; i++) {\n      var rowSum = weights[i].reduce(function (sum, currentVal) {\n        return sum + currentVal;\n      }, 0);\n\n      for (var j = 0; j < features.length; j++) {\n        weights[i][j] = weights[i][j] / rowSum;\n      }\n    }\n  }\n\n  return weights;\n}","map":{"version":3,"names":["centroid","getCoord","featureEach","pNormDistance","feature1","feature2","p","coordinate1","coordinate2","xDiff","yDiff","Math","abs","pow","distanceWeight","fc","options","threshold","binary","alpha","rowTransform","standardization","features","feature","push","weights","i","length","j","dis","rowSum","reduce","sum","currentVal"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/distance-weight/dist/es/index.js"],"sourcesContent":["import centroid from \"@turf/centroid\";\r\nimport { getCoord } from \"@turf/invariant\";\r\nimport { featureEach } from \"@turf/meta\";\r\n/**\r\n * calcualte the Minkowski p-norm distance between two features.\r\n * @param feature1 point feature\r\n * @param feature2 point feature\r\n * @param p p-norm 1=<p<=infinity 1: Manhattan distance 2: Euclidean distance\r\n */\r\nexport function pNormDistance(feature1, feature2, p) {\r\n    if (p === void 0) { p = 2; }\r\n    var coordinate1 = getCoord(feature1);\r\n    var coordinate2 = getCoord(feature2);\r\n    var xDiff = coordinate1[0] - coordinate2[0];\r\n    var yDiff = coordinate1[1] - coordinate2[1];\r\n    if (p === 1) {\r\n        return Math.abs(xDiff) + Math.abs(yDiff);\r\n    }\r\n    return Math.pow(Math.pow(xDiff, p) + Math.pow(yDiff, p), 1 / p);\r\n}\r\n/**\r\n *\r\n *\r\n * @name distanceWeight\r\n * @param {FeatureCollection<any>} fc FeatureCollection.\r\n * @param {Object} [options] option object.\r\n * @param {number} [options.threshold=10000] If the distance between neighbor and\r\n * target features is greater than threshold, the weight of that neighbor is 0.\r\n * @param {number} [options.p=2] Minkowski p-norm distance parameter.\r\n * 1: Manhattan distance. 2: Euclidean distance. 1=<p<=infinity.\r\n * @param {boolean} [options.binary=false] If true, weight=1 if d <= threshold otherwise weight=0.\r\n *  If false, weight=Math.pow(d, alpha).\r\n * @param {number} [options.alpha=-1] distance decay parameter.\r\n * A big value means the weight decay quickly as distance increases.\r\n * @param {boolean} [options.standardization=false] row standardization.\r\n * @returns {Array<Array<number>>} distance weight matrix.\r\n * @example\r\n *\r\n * var bbox = [-65, 40, -63, 42];\r\n * var dataset = turf.randomPoint(100, { bbox: bbox });\r\n * var result = turf.distanceWeight(dataset);\r\n */\r\nexport default function distanceWeight(fc, options) {\r\n    options = options || {};\r\n    var threshold = options.threshold || 10000;\r\n    var p = options.p || 2;\r\n    var binary = options.binary || false;\r\n    var alpha = options.alpha || -1;\r\n    var rowTransform = options.standardization || false;\r\n    var features = [];\r\n    featureEach(fc, function (feature) {\r\n        features.push(centroid(feature));\r\n    });\r\n    // computing the distance between the features\r\n    var weights = [];\r\n    for (var i = 0; i < features.length; i++) {\r\n        weights[i] = [];\r\n    }\r\n    for (var i = 0; i < features.length; i++) {\r\n        for (var j = i; j < features.length; j++) {\r\n            if (i === j) {\r\n                weights[i][j] = 0;\r\n            }\r\n            var dis = pNormDistance(features[i], features[j], p);\r\n            weights[i][j] = dis;\r\n            weights[j][i] = dis;\r\n        }\r\n    }\r\n    // binary or distance decay\r\n    for (var i = 0; i < features.length; i++) {\r\n        for (var j = 0; j < features.length; j++) {\r\n            var dis = weights[i][j];\r\n            if (dis === 0) {\r\n                continue;\r\n            }\r\n            if (binary) {\r\n                if (dis <= threshold) {\r\n                    weights[i][j] = 1.0;\r\n                }\r\n                else {\r\n                    weights[i][j] = 0.0;\r\n                }\r\n            }\r\n            else {\r\n                if (dis <= threshold) {\r\n                    weights[i][j] = Math.pow(dis, alpha);\r\n                }\r\n                else {\r\n                    weights[i][j] = 0.0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (rowTransform) {\r\n        for (var i = 0; i < features.length; i++) {\r\n            var rowSum = weights[i].reduce(function (sum, currentVal) {\r\n                return sum + currentVal;\r\n            }, 0);\r\n            for (var j = 0; j < features.length; j++) {\r\n                weights[i][j] = weights[i][j] / rowSum;\r\n            }\r\n        }\r\n    }\r\n    return weights;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}