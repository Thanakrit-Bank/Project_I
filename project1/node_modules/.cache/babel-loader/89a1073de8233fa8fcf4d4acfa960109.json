{"ast":null,"code":"/**\r\n * KMEANS clustering\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\n\n/**\r\n * KMEANS class constructor\r\n * @constructor\r\n *\r\n * @param {Array} dataset\r\n * @param {number} k - number of clusters\r\n * @param {function} distance - distance function\r\n * @returns {KMEANS}\r\n */\nfunction KMEANS(dataset, k, distance) {\n  this.k = 3; // number of clusters\n\n  this.dataset = []; // set of feature vectors\n\n  this.assignments = []; // set of associated clusters for each feature vector\n\n  this.centroids = []; // vectors for our clusters\n\n  this.init(dataset, k, distance);\n}\n/**\r\n * @returns {undefined}\r\n */\n\n\nKMEANS.prototype.init = function (dataset, k, distance) {\n  this.assignments = [];\n  this.centroids = [];\n\n  if (typeof dataset !== 'undefined') {\n    this.dataset = dataset;\n  }\n\n  if (typeof k !== 'undefined') {\n    this.k = k;\n  }\n\n  if (typeof distance !== 'undefined') {\n    this.distance = distance;\n  }\n};\n/**\r\n * @returns {undefined}\r\n */\n\n\nKMEANS.prototype.run = function (dataset, k) {\n  this.init(dataset, k);\n  var len = this.dataset.length; // initialize centroids\n\n  for (var i = 0; i < this.k; i++) {\n    this.centroids[i] = this.randomCentroid();\n  }\n\n  var change = true;\n\n  while (change) {\n    // assign feature vectors to clusters\n    change = this.assign(); // adjust location of centroids\n\n    for (var centroidId = 0; centroidId < this.k; centroidId++) {\n      var mean = new Array(maxDim);\n      var count = 0; // init mean vector\n\n      for (var dim = 0; dim < maxDim; dim++) {\n        mean[dim] = 0;\n      }\n\n      for (var j = 0; j < len; j++) {\n        var maxDim = this.dataset[j].length; // if current cluster id is assigned to point\n\n        if (centroidId === this.assignments[j]) {\n          for (var dim = 0; dim < maxDim; dim++) {\n            mean[dim] += this.dataset[j][dim];\n          }\n\n          count++;\n        }\n      }\n\n      if (count > 0) {\n        // if cluster contain points, adjust centroid position\n        for (var dim = 0; dim < maxDim; dim++) {\n          mean[dim] /= count;\n        }\n\n        this.centroids[centroidId] = mean;\n      } else {\n        // if cluster is empty, generate new random centroid\n        this.centroids[centroidId] = this.randomCentroid();\n        change = true;\n      }\n    }\n  }\n\n  return this.getClusters();\n};\n/**\r\n * Generate random centroid\r\n *\r\n * @returns {Array}\r\n */\n\n\nKMEANS.prototype.randomCentroid = function () {\n  var maxId = this.dataset.length - 1;\n  var centroid;\n  var id;\n\n  do {\n    id = Math.round(Math.random() * maxId);\n    centroid = this.dataset[id];\n  } while (this.centroids.indexOf(centroid) >= 0);\n\n  return centroid;\n};\n/**\r\n * Assign points to clusters\r\n *\r\n * @returns {boolean}\r\n */\n\n\nKMEANS.prototype.assign = function () {\n  var change = false;\n  var len = this.dataset.length;\n  var closestCentroid;\n\n  for (var i = 0; i < len; i++) {\n    closestCentroid = this.argmin(this.dataset[i], this.centroids, this.distance);\n\n    if (closestCentroid != this.assignments[i]) {\n      this.assignments[i] = closestCentroid;\n      change = true;\n    }\n  }\n\n  return change;\n};\n/**\r\n * Extract information about clusters\r\n *\r\n * @returns {undefined}\r\n */\n\n\nKMEANS.prototype.getClusters = function () {\n  var clusters = new Array(this.k);\n  var centroidId;\n\n  for (var pointId = 0; pointId < this.assignments.length; pointId++) {\n    centroidId = this.assignments[pointId]; // init empty cluster\n\n    if (typeof clusters[centroidId] === 'undefined') {\n      clusters[centroidId] = [];\n    }\n\n    clusters[centroidId].push(pointId);\n  }\n\n  return clusters;\n}; // utils\n\n/**\r\n * @params {Array} point\r\n * @params {Array.<Array>} set\r\n * @params {Function} f\r\n * @returns {number}\r\n */\n\n\nKMEANS.prototype.argmin = function (point, set, f) {\n  var min = Number.MAX_VALUE;\n  var arg = 0;\n  var len = set.length;\n  var d;\n\n  for (var i = 0; i < len; i++) {\n    d = f(point, set[i]);\n\n    if (d < min) {\n      min = d;\n      arg = i;\n    }\n  }\n\n  return arg;\n};\n/**\r\n * Euclidean distance\r\n *\r\n * @params {number} p\r\n * @params {number} q\r\n * @returns {number}\r\n */\n\n\nKMEANS.prototype.distance = function (p, q) {\n  var sum = 0;\n  var i = Math.min(p.length, q.length);\n\n  while (i--) {\n    var diff = p[i] - q[i];\n    sum += diff * diff;\n  }\n\n  return Math.sqrt(sum);\n};\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = KMEANS;\n}","map":{"version":3,"names":["KMEANS","dataset","k","distance","assignments","centroids","init","prototype","run","len","length","i","randomCentroid","change","assign","centroidId","mean","Array","maxDim","count","dim","j","getClusters","maxId","centroid","id","Math","round","random","indexOf","closestCentroid","argmin","clusters","pointId","push","point","set","f","min","Number","MAX_VALUE","arg","d","p","q","sum","diff","sqrt","module","exports"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/density-clustering/lib/KMEANS.js"],"sourcesContent":["/**\r\n * KMEANS clustering\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\r\n\r\n/**\r\n * KMEANS class constructor\r\n * @constructor\r\n *\r\n * @param {Array} dataset\r\n * @param {number} k - number of clusters\r\n * @param {function} distance - distance function\r\n * @returns {KMEANS}\r\n */\r\n function KMEANS(dataset, k, distance) {\r\n  this.k = 3; // number of clusters\r\n  this.dataset = []; // set of feature vectors\r\n  this.assignments = []; // set of associated clusters for each feature vector\r\n  this.centroids = []; // vectors for our clusters\r\n\r\n  this.init(dataset, k, distance);\r\n}\r\n\r\n/**\r\n * @returns {undefined}\r\n */\r\nKMEANS.prototype.init = function(dataset, k, distance) {\r\n  this.assignments = [];\r\n  this.centroids = [];\r\n\r\n  if (typeof dataset !== 'undefined') {\r\n    this.dataset = dataset;\r\n  }\r\n\r\n  if (typeof k !== 'undefined') {\r\n    this.k = k;\r\n  }\r\n\r\n  if (typeof distance !== 'undefined') {\r\n    this.distance = distance;\r\n  }\r\n};\r\n\r\n/**\r\n * @returns {undefined}\r\n */\r\nKMEANS.prototype.run = function(dataset, k) {\r\n  this.init(dataset, k);\r\n\r\n  var len = this.dataset.length;\r\n\r\n  // initialize centroids\r\n  for (var i = 0; i < this.k; i++) {\r\n    this.centroids[i] = this.randomCentroid();\r\n\t}\r\n\r\n  var change = true;\r\n  while(change) {\r\n\r\n    // assign feature vectors to clusters\r\n    change = this.assign();\r\n\r\n    // adjust location of centroids\r\n    for (var centroidId = 0; centroidId < this.k; centroidId++) {\r\n      var mean = new Array(maxDim);\r\n      var count = 0;\r\n\r\n      // init mean vector\r\n      for (var dim = 0; dim < maxDim; dim++) {\r\n        mean[dim] = 0;\r\n      }\r\n\r\n      for (var j = 0; j < len; j++) {\r\n        var maxDim = this.dataset[j].length;\r\n\r\n        // if current cluster id is assigned to point\r\n        if (centroidId === this.assignments[j]) {\r\n          for (var dim = 0; dim < maxDim; dim++) {\r\n            mean[dim] += this.dataset[j][dim];\r\n          }\r\n          count++;\r\n        }\r\n      }\r\n\r\n      if (count > 0) {\r\n        // if cluster contain points, adjust centroid position\r\n        for (var dim = 0; dim < maxDim; dim++) {\r\n          mean[dim] /= count;\r\n        }\r\n        this.centroids[centroidId] = mean;\r\n      } else {\r\n        // if cluster is empty, generate new random centroid\r\n        this.centroids[centroidId] = this.randomCentroid();\r\n        change = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return this.getClusters();\r\n};\r\n\r\n/**\r\n * Generate random centroid\r\n *\r\n * @returns {Array}\r\n */\r\nKMEANS.prototype.randomCentroid = function() {\r\n  var maxId = this.dataset.length -1;\r\n  var centroid;\r\n  var id;\r\n\r\n  do {\r\n    id = Math.round(Math.random() * maxId);\r\n    centroid = this.dataset[id];\r\n  } while (this.centroids.indexOf(centroid) >= 0);\r\n\r\n  return centroid;\r\n}\r\n\r\n/**\r\n * Assign points to clusters\r\n *\r\n * @returns {boolean}\r\n */\r\nKMEANS.prototype.assign = function() {\r\n  var change = false;\r\n  var len = this.dataset.length;\r\n  var closestCentroid;\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    closestCentroid = this.argmin(this.dataset[i], this.centroids, this.distance);\r\n\r\n    if (closestCentroid != this.assignments[i]) {\r\n      this.assignments[i] = closestCentroid;\r\n      change = true;\r\n    }\r\n  }\r\n\r\n  return change;\r\n}\r\n\r\n/**\r\n * Extract information about clusters\r\n *\r\n * @returns {undefined}\r\n */\r\nKMEANS.prototype.getClusters = function() {\r\n  var clusters = new Array(this.k);\r\n  var centroidId;\r\n\r\n  for (var pointId = 0; pointId < this.assignments.length; pointId++) {\r\n    centroidId = this.assignments[pointId];\r\n\r\n    // init empty cluster\r\n    if (typeof clusters[centroidId] === 'undefined') {\r\n      clusters[centroidId] = [];\r\n    }\r\n\r\n    clusters[centroidId].push(pointId);\r\n  }\r\n\r\n  return clusters;\r\n};\r\n\r\n// utils\r\n\r\n/**\r\n * @params {Array} point\r\n * @params {Array.<Array>} set\r\n * @params {Function} f\r\n * @returns {number}\r\n */\r\nKMEANS.prototype.argmin = function(point, set, f) {\r\n  var min = Number.MAX_VALUE;\r\n  var arg = 0;\r\n  var len = set.length;\r\n  var d;\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    d = f(point, set[i]);\r\n    if (d < min) {\r\n      min = d;\r\n      arg = i;\r\n    }\r\n  }\r\n\r\n  return arg;\r\n};\r\n\r\n/**\r\n * Euclidean distance\r\n *\r\n * @params {number} p\r\n * @params {number} q\r\n * @returns {number}\r\n */\r\nKMEANS.prototype.distance = function(p, q) {\r\n  var sum = 0;\r\n  var i = Math.min(p.length, q.length);\r\n\r\n  while (i--) {\r\n    var diff = p[i] - q[i];\r\n    sum += diff * diff;\r\n  }\r\n\r\n  return Math.sqrt(sum);\r\n};\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = KMEANS;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}