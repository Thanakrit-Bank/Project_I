{"ast":null,"code":"import { isObject, isNumber, degreesToRadians, polygon } from '@turf/helpers';\nimport rhumbDestination from '@turf/rhumb-destination';\nimport transformRotate from '@turf/transform-rotate';\nimport { getCoord } from '@turf/invariant';\n/**\r\n * Takes a {@link Point} and calculates the ellipse polygon given two semi-axes expressed in variable units and steps for precision.\r\n *\r\n * @param {Coord} center center point\r\n * @param {number} xSemiAxis semi (major) axis of the ellipse along the x-axis\r\n * @param {number} ySemiAxis semi (minor) axis of the ellipse along the y-axis\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {number} [options.angle=0] angle of rotation in decimal degrees, positive clockwise\r\n * @param {Coord} [options.pivot='origin'] point around which the rotation will be performed\r\n * @param {number} [options.steps=64] number of steps\r\n * @param {string} [options.units='kilometers'] unit of measurement for axes\r\n * @param {Object} [options.properties={}] properties\r\n * @returns {Feature<Polygon>} ellipse polygon\r\n * @example\r\n * var center = [-75, 40];\r\n * var xSemiAxis = 5;\r\n * var ySemiAxis = 2;\r\n * var ellipse = turf.ellipse(center, xSemiAxis, ySemiAxis);\r\n *\r\n * //addToMap\r\n * var addToMap = [turf.point(center), ellipse]\r\n */\n\nfunction ellipse(center, xSemiAxis, ySemiAxis, options) {\n  // Optional params\n  options = options || {};\n  var steps = options.steps || 64;\n  var units = options.units || \"kilometers\";\n  var angle = options.angle || 0;\n  var pivot = options.pivot || center;\n  var properties = options.properties || center.properties || {}; // validation\n\n  if (!center) throw new Error(\"center is required\");\n  if (!xSemiAxis) throw new Error(\"xSemiAxis is required\");\n  if (!ySemiAxis) throw new Error(\"ySemiAxis is required\");\n  if (!isObject(options)) throw new Error(\"options must be an object\");\n  if (!isNumber(steps)) throw new Error(\"steps must be a number\");\n  if (!isNumber(angle)) throw new Error(\"angle must be a number\");\n  var centerCoords = getCoord(center);\n\n  if (units === \"degrees\") {\n    var angleRad = degreesToRadians(angle);\n  } else {\n    xSemiAxis = rhumbDestination(center, xSemiAxis, 90, {\n      units: units\n    });\n    ySemiAxis = rhumbDestination(center, ySemiAxis, 0, {\n      units: units\n    });\n    xSemiAxis = getCoord(xSemiAxis)[0] - centerCoords[0];\n    ySemiAxis = getCoord(ySemiAxis)[1] - centerCoords[1];\n  }\n\n  var coordinates = [];\n\n  for (var i = 0; i < steps; i += 1) {\n    var stepAngle = i * -360 / steps;\n    var x = xSemiAxis * ySemiAxis / Math.sqrt(Math.pow(ySemiAxis, 2) + Math.pow(xSemiAxis, 2) * Math.pow(getTanDeg(stepAngle), 2));\n    var y = xSemiAxis * ySemiAxis / Math.sqrt(Math.pow(xSemiAxis, 2) + Math.pow(ySemiAxis, 2) / Math.pow(getTanDeg(stepAngle), 2));\n    if (stepAngle < -90 && stepAngle >= -270) x = -x;\n    if (stepAngle < -180 && stepAngle >= -360) y = -y;\n\n    if (units === \"degrees\") {\n      var newx = x * Math.cos(angleRad) + y * Math.sin(angleRad);\n      var newy = y * Math.cos(angleRad) - x * Math.sin(angleRad);\n      x = newx;\n      y = newy;\n    }\n\n    coordinates.push([x + centerCoords[0], y + centerCoords[1]]);\n  }\n\n  coordinates.push(coordinates[0]);\n\n  if (units === \"degrees\") {\n    return polygon([coordinates], properties);\n  } else {\n    return transformRotate(polygon([coordinates], properties), angle, {\n      pivot: pivot\n    });\n  }\n}\n/**\r\n * Get Tan Degrees\r\n *\r\n * @private\r\n * @param {number} deg Degrees\r\n * @returns {number} Tan Degrees\r\n */\n\n\nfunction getTanDeg(deg) {\n  var rad = deg * Math.PI / 180;\n  return Math.tan(rad);\n}\n\nexport default ellipse;","map":{"version":3,"names":["isObject","isNumber","degreesToRadians","polygon","rhumbDestination","transformRotate","getCoord","ellipse","center","xSemiAxis","ySemiAxis","options","steps","units","angle","pivot","properties","Error","centerCoords","angleRad","coordinates","i","stepAngle","x","Math","sqrt","pow","getTanDeg","y","newx","cos","sin","newy","push","deg","rad","PI","tan"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/ellipse/dist/es/index.js"],"sourcesContent":["import { isObject, isNumber, degreesToRadians, polygon } from '@turf/helpers';\r\nimport rhumbDestination from '@turf/rhumb-destination';\r\nimport transformRotate from '@turf/transform-rotate';\r\nimport { getCoord } from '@turf/invariant';\r\n\r\n/**\r\n * Takes a {@link Point} and calculates the ellipse polygon given two semi-axes expressed in variable units and steps for precision.\r\n *\r\n * @param {Coord} center center point\r\n * @param {number} xSemiAxis semi (major) axis of the ellipse along the x-axis\r\n * @param {number} ySemiAxis semi (minor) axis of the ellipse along the y-axis\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {number} [options.angle=0] angle of rotation in decimal degrees, positive clockwise\r\n * @param {Coord} [options.pivot='origin'] point around which the rotation will be performed\r\n * @param {number} [options.steps=64] number of steps\r\n * @param {string} [options.units='kilometers'] unit of measurement for axes\r\n * @param {Object} [options.properties={}] properties\r\n * @returns {Feature<Polygon>} ellipse polygon\r\n * @example\r\n * var center = [-75, 40];\r\n * var xSemiAxis = 5;\r\n * var ySemiAxis = 2;\r\n * var ellipse = turf.ellipse(center, xSemiAxis, ySemiAxis);\r\n *\r\n * //addToMap\r\n * var addToMap = [turf.point(center), ellipse]\r\n */\r\nfunction ellipse(center, xSemiAxis, ySemiAxis, options) {\r\n  // Optional params\r\n  options = options || {};\r\n  var steps = options.steps || 64;\r\n  var units = options.units || \"kilometers\";\r\n  var angle = options.angle || 0;\r\n  var pivot = options.pivot || center;\r\n  var properties = options.properties || center.properties || {};\r\n\r\n  // validation\r\n  if (!center) throw new Error(\"center is required\");\r\n  if (!xSemiAxis) throw new Error(\"xSemiAxis is required\");\r\n  if (!ySemiAxis) throw new Error(\"ySemiAxis is required\");\r\n  if (!isObject(options)) throw new Error(\"options must be an object\");\r\n  if (!isNumber(steps)) throw new Error(\"steps must be a number\");\r\n  if (!isNumber(angle)) throw new Error(\"angle must be a number\");\r\n\r\n  var centerCoords = getCoord(center);\r\n  if (units === \"degrees\") {\r\n    var angleRad = degreesToRadians(angle);\r\n  } else {\r\n    xSemiAxis = rhumbDestination(center, xSemiAxis, 90, { units: units });\r\n    ySemiAxis = rhumbDestination(center, ySemiAxis, 0, { units: units });\r\n    xSemiAxis = getCoord(xSemiAxis)[0] - centerCoords[0];\r\n    ySemiAxis = getCoord(ySemiAxis)[1] - centerCoords[1];\r\n  }\r\n\r\n  var coordinates = [];\r\n  for (var i = 0; i < steps; i += 1) {\r\n    var stepAngle = (i * -360) / steps;\r\n    var x =\r\n      (xSemiAxis * ySemiAxis) /\r\n      Math.sqrt(\r\n        Math.pow(ySemiAxis, 2) +\r\n          Math.pow(xSemiAxis, 2) * Math.pow(getTanDeg(stepAngle), 2)\r\n      );\r\n    var y =\r\n      (xSemiAxis * ySemiAxis) /\r\n      Math.sqrt(\r\n        Math.pow(xSemiAxis, 2) +\r\n          Math.pow(ySemiAxis, 2) / Math.pow(getTanDeg(stepAngle), 2)\r\n      );\r\n\r\n    if (stepAngle < -90 && stepAngle >= -270) x = -x;\r\n    if (stepAngle < -180 && stepAngle >= -360) y = -y;\r\n    if (units === \"degrees\") {\r\n      var newx = x * Math.cos(angleRad) + y * Math.sin(angleRad);\r\n      var newy = y * Math.cos(angleRad) - x * Math.sin(angleRad);\r\n      x = newx;\r\n      y = newy;\r\n    }\r\n\r\n    coordinates.push([x + centerCoords[0], y + centerCoords[1]]);\r\n  }\r\n  coordinates.push(coordinates[0]);\r\n  if (units === \"degrees\") {\r\n    return polygon([coordinates], properties);\r\n  } else {\r\n    return transformRotate(polygon([coordinates], properties), angle, {\r\n      pivot: pivot,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Get Tan Degrees\r\n *\r\n * @private\r\n * @param {number} deg Degrees\r\n * @returns {number} Tan Degrees\r\n */\r\nfunction getTanDeg(deg) {\r\n  var rad = (deg * Math.PI) / 180;\r\n  return Math.tan(rad);\r\n}\r\n\r\nexport default ellipse;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}