{"ast":null,"code":"import clone from \"@turf/clone\";\nimport { geometryCollection } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport { merge } from \"topojson-client\";\nimport { topology } from \"topojson-server\";\n/**\n * Dissolves all overlapping (Multi)Polygon\n *\n * @param {FeatureCollection<Polygon|MultiPolygon>} geojson Polygons to dissolve\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<Polygon|MultiPolygon>} Dissolved Polygons\n */\n\nexport default function polygonDissolve(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  } // Validation\n\n\n  if (getType(geojson) !== \"FeatureCollection\") {\n    throw new Error(\"geojson must be a FeatureCollection\");\n  }\n\n  if (!geojson.features.length) {\n    throw new Error(\"geojson is empty\");\n  } // Clone geojson to avoid side effects\n  // Topojson modifies in place, so we need to deep clone first\n\n\n  if (options.mutate === false || options.mutate === undefined) {\n    geojson = clone(geojson);\n  }\n\n  var geoms = [];\n  flattenEach(geojson, function (feature) {\n    geoms.push(feature.geometry);\n  });\n  var topo = topology({\n    geoms: geometryCollection(geoms).geometry\n  });\n  var merged = merge(topo, topo.objects.geoms.geometries);\n  return merged;\n}","map":{"version":3,"names":["clone","geometryCollection","getType","flattenEach","merge","topology","polygonDissolve","geojson","options","Error","features","length","mutate","undefined","geoms","feature","push","geometry","topo","merged","objects","geometries"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/concave/dist/es/lib/turf-polygon-dissolve.js"],"sourcesContent":["import clone from \"@turf/clone\";\nimport { geometryCollection } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport { merge } from \"topojson-client\";\nimport { topology } from \"topojson-server\";\n/**\n * Dissolves all overlapping (Multi)Polygon\n *\n * @param {FeatureCollection<Polygon|MultiPolygon>} geojson Polygons to dissolve\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<Polygon|MultiPolygon>} Dissolved Polygons\n */\nexport default function polygonDissolve(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Validation\n    if (getType(geojson) !== \"FeatureCollection\") {\n        throw new Error(\"geojson must be a FeatureCollection\");\n    }\n    if (!geojson.features.length) {\n        throw new Error(\"geojson is empty\");\n    }\n    // Clone geojson to avoid side effects\n    // Topojson modifies in place, so we need to deep clone first\n    if (options.mutate === false || options.mutate === undefined) {\n        geojson = clone(geojson);\n    }\n    var geoms = [];\n    flattenEach(geojson, function (feature) {\n        geoms.push(feature.geometry);\n    });\n    var topo = topology({ geoms: geometryCollection(geoms).geometry });\n    var merged = merge(topo, topo.objects.geoms.geometries);\n    return merged;\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,kBAAT,QAAmC,eAAnC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,OAAlC,EAA2C;EACtD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe,CADa,CAEtD;;;EACA,IAAIN,OAAO,CAACK,OAAD,CAAP,KAAqB,mBAAzB,EAA8C;IAC1C,MAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;EACH;;EACD,IAAI,CAACF,OAAO,CAACG,QAAR,CAAiBC,MAAtB,EAA8B;IAC1B,MAAM,IAAIF,KAAJ,CAAU,kBAAV,CAAN;EACH,CARqD,CAStD;EACA;;;EACA,IAAID,OAAO,CAACI,MAAR,KAAmB,KAAnB,IAA4BJ,OAAO,CAACI,MAAR,KAAmBC,SAAnD,EAA8D;IAC1DN,OAAO,GAAGP,KAAK,CAACO,OAAD,CAAf;EACH;;EACD,IAAIO,KAAK,GAAG,EAAZ;EACAX,WAAW,CAACI,OAAD,EAAU,UAAUQ,OAAV,EAAmB;IACpCD,KAAK,CAACE,IAAN,CAAWD,OAAO,CAACE,QAAnB;EACH,CAFU,CAAX;EAGA,IAAIC,IAAI,GAAGb,QAAQ,CAAC;IAAES,KAAK,EAAEb,kBAAkB,CAACa,KAAD,CAAlB,CAA0BG;EAAnC,CAAD,CAAnB;EACA,IAAIE,MAAM,GAAGf,KAAK,CAACc,IAAD,EAAOA,IAAI,CAACE,OAAL,CAAaN,KAAb,CAAmBO,UAA1B,CAAlB;EACA,OAAOF,MAAP;AACH"},"metadata":{},"sourceType":"module"}