{"ast":null,"code":"import _slicedToArray from \"D:/Project/Mix_Project/Project_I/project1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\Project\\\\Mix_Project\\\\Project_I\\\\project1\\\\src\\\\components\\\\GridData.jsx\",\n    _s = $RefreshSig$();\n\nimport { GeoJSON, MapContainer, TileLayer, Popup, FeatureGroup, LayersControl } from 'react-leaflet';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GridData(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState('http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02')),\n      _useState2 = _slicedToArray(_useState, 2),\n      url = _useState2[0],\n      seturl = _useState2[1]; // const [url, seturl] = useState('http://127.0.0.1:5000/get_province/Chiang Mai')\n  // const [url, seturl] = useState('http://127.0.0.1:5000/get_grid')\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  useEffect(function () {\n    fetchData(url);\n  }, [props.pName]);\n\n  function fetchData(url) {\n    var reqOptions = {\n      method: \"get\",\n      headers: {\n        \"x-access-token\": \"test\"\n      }\n    };\n    var request = fetch(url, reqOptions);\n    console.log('feching');\n    request.then(function (r) {\n      return r.json();\n    }).then(function (data) {\n      setData(data);\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n    children: data.map(function (data) {\n      var myStyleGrid = {\n        color: \"white\",\n        weight: 0,\n        fillOpacity: 0.75,\n        fillColor: 'white'\n      };\n\n      if (data.properties.index < 600) {\n        myStyleGrid.fillColor = '#FFEDA0';\n      } else if (data.properties.index < 700) {\n        myStyleGrid.fillColor = '#FED976';\n      } else if (data.properties.index < 800) {\n        myStyleGrid.fillColor = '#FEB24C';\n      } else if (data.properties.index < 900) {\n        myStyleGrid.fillColor = '#FD8D3C';\n      } else if (data.properties.index < 1000) {\n        myStyleGrid.fillColor = '#FC4E2A';\n      } else if (data.properties.index < 1100) {\n        myStyleGrid.fillColor = '#E31A1C';\n      } else if (data.properties.index < 1200) {\n        myStyleGrid.fillColor = '#BD0026';\n      } else {\n        myStyleGrid.fillColor = '#800026';\n      }\n\n      return /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: data,\n        style: myStyleGrid,\n        children: [console.log(data), /*#__PURE__*/_jsxDEV(Popup, {\n          children: [\" \", Math.round(data.properties.index * 1000) / 1000, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, _this)]\n      }, data.properties.grid_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GridData, \"MvmAYY6Qy7D1vwVhxTYXWR89Q5g=\");\n\n_c = GridData;\nexport default GridData;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridData\");","map":{"version":3,"names":["GeoJSON","MapContainer","TileLayer","Popup","FeatureGroup","LayersControl","React","useState","useEffect","GridData","props","concat","pName","url","seturl","data","setData","fetchData","reqOptions","method","headers","request","fetch","console","log","then","r","json","error","map","myStyleGrid","color","weight","fillOpacity","fillColor","properties","index","Math","round","grid_id"],"sources":["D:/Project/Mix_Project/Project_I/project1/src/components/GridData.jsx"],"sourcesContent":["import {GeoJSON, MapContainer, TileLayer, Popup, FeatureGroup,LayersControl} from 'react-leaflet' \r\nimport React, { useState,useEffect } from 'react'\r\n\r\n\r\nfunction GridData(props) {\r\n    const [url, seturl] = useState('http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02'))\r\n    // const [url, seturl] = useState('http://127.0.0.1:5000/get_province/Chiang Mai')\r\n    // const [url, seturl] = useState('http://127.0.0.1:5000/get_grid')\r\n    const [data, setData] = useState([])\r\n\r\n    useEffect(()=>{\r\n        fetchData(url)\r\n    }, [props.pName])\r\n\r\n    function fetchData(url) {\r\n        const reqOptions ={\r\n          method:\"get\", \r\n          headers:{\"x-access-token\": \"test\"},\r\n        }\r\n          let request = fetch(url, reqOptions);\r\n          console.log('feching');\r\n          request\r\n            .then(r => r.json())\r\n            .then(data => {\r\n                setData(data)\r\n            }, (error) => {\r\n              console.error(error);\r\n            });\r\n      }\r\n    return (\r\n    <FeatureGroup>\r\n        {data.map(data => {\r\n        var myStyleGrid = {\r\n            color: \"white\",\r\n            weight: 0,\r\n            fillOpacity: 0.75,\r\n            fillColor: 'white',\r\n        }\r\n        if(data.properties.index < 600){\r\n            myStyleGrid.fillColor = '#FFEDA0'\r\n        }else if(data.properties.index < 700){\r\n            myStyleGrid.fillColor = '#FED976'\r\n        }else if(data.properties.index < 800){\r\n            myStyleGrid.fillColor = '#FEB24C'\r\n        }else if(data.properties.index < 900){\r\n            myStyleGrid.fillColor = '#FD8D3C'\r\n        }else if(data.properties.index < 1000){\r\n            myStyleGrid.fillColor = '#FC4E2A'\r\n        }else if(data.properties.index < 1100){\r\n            myStyleGrid.fillColor = '#E31A1C'\r\n        }else if(data.properties.index < 1200){\r\n            myStyleGrid.fillColor = '#BD0026'\r\n        }else {\r\n            myStyleGrid.fillColor = '#800026'\r\n        }\r\n        \r\n        return (\r\n        <GeoJSON key={data.properties.grid_id}  data={data} style={myStyleGrid}>\r\n            {console.log(data)}\r\n            <Popup> {Math.round(data.properties.index*1000)/1000} </Popup>\r\n        </GeoJSON>)\r\n        })}\r\n    \r\n    </FeatureGroup> \r\n  )\r\n}\r\n\r\n\r\n\r\nexport default GridData"],"mappings":"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"},"metadata":{},"sourceType":"module"}