{"ast":null,"code":"import convex from \"@turf/convex\";\nimport centroid from \"@turf/centroid\";\nimport { point } from \"@turf/helpers\";\nimport { getType, getCoord } from \"@turf/invariant\";\nimport { coordEach } from \"@turf/meta\";\n/**\r\n * Takes any {@link Feature} or a {@link FeatureCollection} and returns its [center of mass](https://en.wikipedia.org/wiki/Center_of_mass) using this formula: [Centroid of Polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon).\r\n *\r\n * @name centerOfMass\r\n * @param {GeoJSON} geojson GeoJSON to be centered\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Object} [options.properties={}] Translate Properties to Feature\r\n * @returns {Feature<Point>} the center of mass\r\n * @example\r\n * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\r\n *\r\n * var center = turf.centerOfMass(polygon);\r\n *\r\n * //addToMap\r\n * var addToMap = [polygon, center]\r\n */\n\nfunction centerOfMass(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  switch (getType(geojson)) {\n    case \"Point\":\n      return point(getCoord(geojson), options.properties);\n\n    case \"Polygon\":\n      var coords = [];\n      coordEach(geojson, function (coord) {\n        coords.push(coord);\n      }); // First, we neutralize the feature (set it around coordinates [0,0]) to prevent rounding errors\n      // We take any point to translate all the points around 0\n\n      var centre = centroid(geojson, {\n        properties: options.properties\n      });\n      var translation = centre.geometry.coordinates;\n      var sx = 0;\n      var sy = 0;\n      var sArea = 0;\n      var i, pi, pj, xi, xj, yi, yj, a;\n      var neutralizedPoints = coords.map(function (point) {\n        return [point[0] - translation[0], point[1] - translation[1]];\n      });\n\n      for (i = 0; i < coords.length - 1; i++) {\n        // pi is the current point\n        pi = neutralizedPoints[i];\n        xi = pi[0];\n        yi = pi[1]; // pj is the next point (pi+1)\n\n        pj = neutralizedPoints[i + 1];\n        xj = pj[0];\n        yj = pj[1]; // a is the common factor to compute the signed area and the final coordinates\n\n        a = xi * yj - xj * yi; // sArea is the sum used to compute the signed area\n\n        sArea += a; // sx and sy are the sums used to compute the final coordinates\n\n        sx += (xi + xj) * a;\n        sy += (yi + yj) * a;\n      } // Shape has no area: fallback on turf.centroid\n\n\n      if (sArea === 0) {\n        return centre;\n      } else {\n        // Compute the signed area, and factorize 1/6A\n        var area = sArea * 0.5;\n        var areaFactor = 1 / (6 * area); // Compute the final coordinates, adding back the values that have been neutralized\n\n        return point([translation[0] + areaFactor * sx, translation[1] + areaFactor * sy], options.properties);\n      }\n\n    default:\n      // Not a polygon: Compute the convex hull and work with that\n      var hull = convex(geojson);\n      if (hull) return centerOfMass(hull, {\n        properties: options.properties\n      }); // Hull is empty: fallback on the centroid\n      else return centroid(geojson, {\n        properties: options.properties\n      });\n  }\n}\n\nexport default centerOfMass;","map":{"version":3,"names":["convex","centroid","point","getType","getCoord","coordEach","centerOfMass","geojson","options","properties","coords","coord","push","centre","translation","geometry","coordinates","sx","sy","sArea","i","pi","pj","xi","xj","yi","yj","a","neutralizedPoints","map","length","area","areaFactor","hull"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/center-of-mass/dist/es/index.js"],"sourcesContent":["import convex from \"@turf/convex\";\r\nimport centroid from \"@turf/centroid\";\r\nimport { point } from \"@turf/helpers\";\r\nimport { getType, getCoord } from \"@turf/invariant\";\r\nimport { coordEach } from \"@turf/meta\";\r\n/**\r\n * Takes any {@link Feature} or a {@link FeatureCollection} and returns its [center of mass](https://en.wikipedia.org/wiki/Center_of_mass) using this formula: [Centroid of Polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon).\r\n *\r\n * @name centerOfMass\r\n * @param {GeoJSON} geojson GeoJSON to be centered\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Object} [options.properties={}] Translate Properties to Feature\r\n * @returns {Feature<Point>} the center of mass\r\n * @example\r\n * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\r\n *\r\n * var center = turf.centerOfMass(polygon);\r\n *\r\n * //addToMap\r\n * var addToMap = [polygon, center]\r\n */\r\nfunction centerOfMass(geojson, options) {\r\n    if (options === void 0) { options = {}; }\r\n    switch (getType(geojson)) {\r\n        case \"Point\":\r\n            return point(getCoord(geojson), options.properties);\r\n        case \"Polygon\":\r\n            var coords = [];\r\n            coordEach(geojson, function (coord) {\r\n                coords.push(coord);\r\n            });\r\n            // First, we neutralize the feature (set it around coordinates [0,0]) to prevent rounding errors\r\n            // We take any point to translate all the points around 0\r\n            var centre = centroid(geojson, { properties: options.properties });\r\n            var translation = centre.geometry.coordinates;\r\n            var sx = 0;\r\n            var sy = 0;\r\n            var sArea = 0;\r\n            var i, pi, pj, xi, xj, yi, yj, a;\r\n            var neutralizedPoints = coords.map(function (point) {\r\n                return [point[0] - translation[0], point[1] - translation[1]];\r\n            });\r\n            for (i = 0; i < coords.length - 1; i++) {\r\n                // pi is the current point\r\n                pi = neutralizedPoints[i];\r\n                xi = pi[0];\r\n                yi = pi[1];\r\n                // pj is the next point (pi+1)\r\n                pj = neutralizedPoints[i + 1];\r\n                xj = pj[0];\r\n                yj = pj[1];\r\n                // a is the common factor to compute the signed area and the final coordinates\r\n                a = xi * yj - xj * yi;\r\n                // sArea is the sum used to compute the signed area\r\n                sArea += a;\r\n                // sx and sy are the sums used to compute the final coordinates\r\n                sx += (xi + xj) * a;\r\n                sy += (yi + yj) * a;\r\n            }\r\n            // Shape has no area: fallback on turf.centroid\r\n            if (sArea === 0) {\r\n                return centre;\r\n            }\r\n            else {\r\n                // Compute the signed area, and factorize 1/6A\r\n                var area = sArea * 0.5;\r\n                var areaFactor = 1 / (6 * area);\r\n                // Compute the final coordinates, adding back the values that have been neutralized\r\n                return point([translation[0] + areaFactor * sx, translation[1] + areaFactor * sy], options.properties);\r\n            }\r\n        default:\r\n            // Not a polygon: Compute the convex hull and work with that\r\n            var hull = convex(geojson);\r\n            if (hull)\r\n                return centerOfMass(hull, { properties: options.properties });\r\n            // Hull is empty: fallback on the centroid\r\n            else\r\n                return centroid(geojson, { properties: options.properties });\r\n    }\r\n}\r\nexport default centerOfMass;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}