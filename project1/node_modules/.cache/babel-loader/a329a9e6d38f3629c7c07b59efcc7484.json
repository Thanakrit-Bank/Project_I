{"ast":null,"code":"'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n  dim = dim || 2;\n  var hasHoles = holeIndices && holeIndices.length,\n      outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n      outerNode = linkedList(data, 0, outerLen, dim, true),\n      triangles = [];\n  if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n  var minX, minY, maxX, maxY, x, y, invSize;\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n  if (data.length > 80 * dim) {\n    minX = maxX = data[0];\n    minY = maxY = data[1];\n\n    for (var i = dim; i < outerLen; i += dim) {\n      x = data[i];\n      y = data[i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n    } // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n    invSize = Math.max(maxX - minX, maxY - minY);\n    invSize = invSize !== 0 ? 32767 / invSize : 0;\n  }\n\n  earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n  return triangles;\n} // create a circular doubly linked list from polygon points in the specified winding order\n\n\nfunction linkedList(data, start, end, dim, clockwise) {\n  var i, last;\n\n  if (clockwise === signedArea(data, start, end, dim) > 0) {\n    for (i = start; i < end; i += dim) {\n      last = insertNode(i, data[i], data[i + 1], last);\n    }\n  } else {\n    for (i = end - dim; i >= start; i -= dim) {\n      last = insertNode(i, data[i], data[i + 1], last);\n    }\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last);\n    last = last.next;\n  }\n\n  return last;\n} // eliminate colinear or duplicate points\n\n\nfunction filterPoints(start, end) {\n  if (!start) return start;\n  if (!end) end = start;\n  var p = start,\n      again;\n\n  do {\n    again = false;\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p);\n      p = end = p.prev;\n      if (p === p.next) break;\n      again = true;\n    } else {\n      p = p.next;\n    }\n  } while (again || p !== end);\n\n  return end;\n} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n  if (!ear) return; // interlink polygon nodes in z-order\n\n  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n  var stop = ear,\n      prev,\n      next; // iterate through ears, slicing them one by one\n\n  while (ear.prev !== ear.next) {\n    prev = ear.prev;\n    next = ear.next;\n\n    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim | 0);\n      triangles.push(ear.i / dim | 0);\n      triangles.push(next.i / dim | 0);\n      removeNode(ear); // skipping the next vertex leads to less sliver triangles\n\n      ear = next.next;\n      stop = next.next;\n      continue;\n    }\n\n    ear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, invSize);\n      }\n\n      break;\n    }\n  }\n} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\nfunction isEar(ear) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n  // now make sure we don't have other points inside the potential ear\n\n  var ax = a.x,\n      bx = b.x,\n      cx = c.x,\n      ay = a.y,\n      by = b.y,\n      cy = c.y; // triangle bbox; min & max are calculated like this for speed\n\n  var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx,\n      y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,\n      x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,\n      y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;\n  var p = c.next;\n\n  while (p !== a) {\n    if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.next;\n  }\n\n  return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n  var a = ear.prev,\n      b = ear,\n      c = ear.next;\n  if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n  var ax = a.x,\n      bx = b.x,\n      cx = c.x,\n      ay = a.y,\n      by = b.y,\n      cy = c.y; // triangle bbox; min & max are calculated like this for speed\n\n  var x0 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx,\n      y0 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy,\n      x1 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx,\n      y1 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy; // z-order range for the current triangle bbox;\n\n  var minZ = zOrder(x0, y0, minX, minY, invSize),\n      maxZ = zOrder(x1, y1, minX, minY, invSize);\n  var p = ear.prevZ,\n      n = ear.nextZ; // look for points inside the triangle in both directions\n\n  while (p && p.z >= minZ && n && n.z <= maxZ) {\n    if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  } // look for remaining points in decreasing z-order\n\n\n  while (p && p.z >= minZ) {\n    if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c && pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n    p = p.prevZ;\n  } // look for remaining points in increasing z-order\n\n\n  while (n && n.z <= maxZ) {\n    if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c && pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n    n = n.nextZ;\n  }\n\n  return true;\n} // go through all polygon nodes and cure small local self-intersections\n\n\nfunction cureLocalIntersections(start, triangles, dim) {\n  var p = start;\n\n  do {\n    var a = p.prev,\n        b = p.next.next;\n\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i / dim | 0);\n      triangles.push(p.i / dim | 0);\n      triangles.push(b.i / dim | 0); // remove two nodes involved\n\n      removeNode(p);\n      removeNode(p.next);\n      p = start = b;\n    }\n\n    p = p.next;\n  } while (p !== start);\n\n  return filterPoints(p);\n} // try splitting polygon into two and triangulate them independently\n\n\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n  // look for a valid diagonal that divides the polygon into two\n  var a = start;\n\n  do {\n    var b = a.next.next;\n\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        var c = splitPolygon(a, b); // filter colinear points around the cuts\n\n        a = filterPoints(a, a.next);\n        c = filterPoints(c, c.next); // run earcut on each half\n\n        earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n        earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n        return;\n      }\n\n      b = b.next;\n    }\n\n    a = a.next;\n  } while (a !== start);\n} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n  var queue = [],\n      i,\n      len,\n      start,\n      end,\n      list;\n\n  for (i = 0, len = holeIndices.length; i < len; i++) {\n    start = holeIndices[i] * dim;\n    end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n    list = linkedList(data, start, end, dim, false);\n    if (list === list.next) list.steiner = true;\n    queue.push(getLeftmost(list));\n  }\n\n  queue.sort(compareX); // process holes from left to right\n\n  for (i = 0; i < queue.length; i++) {\n    outerNode = eliminateHole(queue[i], outerNode);\n  }\n\n  return outerNode;\n}\n\nfunction compareX(a, b) {\n  return a.x - b.x;\n} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\nfunction eliminateHole(hole, outerNode) {\n  var bridge = findHoleBridge(hole, outerNode);\n\n  if (!bridge) {\n    return outerNode;\n  }\n\n  var bridgeReverse = splitPolygon(bridge, hole); // filter collinear points around the cuts\n\n  filterPoints(bridgeReverse, bridgeReverse.next);\n  return filterPoints(bridge, bridge.next);\n} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\nfunction findHoleBridge(hole, outerNode) {\n  var p = outerNode,\n      hx = hole.x,\n      hy = hole.y,\n      qx = -Infinity,\n      m; // find a segment intersected by a ray from the hole's leftmost point to the left;\n  // segment's endpoint with lesser x will be potential connection point\n\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n      if (x <= hx && x > qx) {\n        qx = x;\n        m = p.x < p.next.x ? p : p.next;\n        if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n      }\n    }\n\n    p = p.next;\n  } while (p !== outerNode);\n\n  if (!m) return null; // look for points inside the triangle of hole point, segment intersection and endpoint;\n  // if there are no points found, we have a valid connection;\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  var stop = m,\n      mx = m.x,\n      my = m.y,\n      tanMin = Infinity,\n      tan;\n  p = m;\n\n  do {\n    if (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n      if (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n        m = p;\n        tanMin = tan;\n      }\n    }\n\n    p = p.next;\n  } while (p !== stop);\n\n  return m;\n} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\nfunction sectorContainsSector(m, p) {\n  return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n} // interlink polygon nodes in z-order\n\n\nfunction indexCurve(start, minX, minY, invSize) {\n  var p = start;\n\n  do {\n    if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n    p.prevZ = p.prev;\n    p.nextZ = p.next;\n    p = p.next;\n  } while (p !== start);\n\n  p.prevZ.nextZ = null;\n  p.prevZ = null;\n  sortLinked(p);\n} // Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\nfunction sortLinked(list) {\n  var i,\n      p,\n      q,\n      e,\n      tail,\n      numMerges,\n      pSize,\n      qSize,\n      inSize = 1;\n\n  do {\n    p = list;\n    list = null;\n    tail = null;\n    numMerges = 0;\n\n    while (p) {\n      numMerges++;\n      q = p;\n      pSize = 0;\n\n      for (i = 0; i < inSize; i++) {\n        pSize++;\n        q = q.nextZ;\n        if (!q) break;\n      }\n\n      qSize = inSize;\n\n      while (pSize > 0 || qSize > 0 && q) {\n        if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n          e = p;\n          p = p.nextZ;\n          pSize--;\n        } else {\n          e = q;\n          q = q.nextZ;\n          qSize--;\n        }\n\n        if (tail) tail.nextZ = e;else list = e;\n        e.prevZ = tail;\n        tail = e;\n      }\n\n      p = q;\n    }\n\n    tail.nextZ = null;\n    inSize *= 2;\n  } while (numMerges > 1);\n\n  return list;\n} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\nfunction zOrder(x, y, minX, minY, invSize) {\n  // coords are transformed into non-negative 15-bit integer range\n  x = (x - minX) * invSize | 0;\n  y = (y - minY) * invSize | 0;\n  x = (x | x << 8) & 0x00FF00FF;\n  x = (x | x << 4) & 0x0F0F0F0F;\n  x = (x | x << 2) & 0x33333333;\n  x = (x | x << 1) & 0x55555555;\n  y = (y | y << 8) & 0x00FF00FF;\n  y = (y | y << 4) & 0x0F0F0F0F;\n  y = (y | y << 2) & 0x33333333;\n  y = (y | y << 1) & 0x55555555;\n  return x | y << 1;\n} // find the leftmost node of a polygon ring\n\n\nfunction getLeftmost(start) {\n  var p = start,\n      leftmost = start;\n\n  do {\n    if (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n    p = p.next;\n  } while (p !== start);\n\n  return leftmost;\n} // check if a point lies within a convex triangle\n\n\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n  return (cx - px) * (ay - py) >= (ax - px) * (cy - py) && (ax - px) * (by - py) >= (bx - px) * (ay - py) && (bx - px) * (cy - py) >= (cx - px) * (by - py);\n} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\nfunction isValidDiagonal(a, b) {\n  return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n  locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n  area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n  equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n} // signed area of a triangle\n\n\nfunction area(p, q, r) {\n  return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n} // check if two points are equal\n\n\nfunction equals(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n} // check if two segments intersect\n\n\nfunction intersects(p1, q1, p2, q2) {\n  var o1 = sign(area(p1, q1, p2));\n  var o2 = sign(area(p1, q1, q2));\n  var o3 = sign(area(p2, q2, p1));\n  var o4 = sign(area(p2, q2, q1));\n  if (o1 !== o2 && o3 !== o4) return true; // general case\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n  if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n  if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n  if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n  return false;\n} // for collinear points p, q, r, check if point q lies on segment pr\n\n\nfunction onSegment(p, q, r) {\n  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n  return num > 0 ? 1 : num < 0 ? -1 : 0;\n} // check if a polygon diagonal intersects any polygon segments\n\n\nfunction intersectsPolygon(a, b) {\n  var p = a;\n\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n    p = p.next;\n  } while (p !== a);\n\n  return false;\n} // check if a polygon diagonal is locally inside the polygon\n\n\nfunction locallyInside(a, b) {\n  return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n} // check if the middle point of a polygon diagonal is inside the polygon\n\n\nfunction middleInside(a, b) {\n  var p = a,\n      inside = false,\n      px = (a.x + b.x) / 2,\n      py = (a.y + b.y) / 2;\n\n  do {\n    if (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n    p = p.next;\n  } while (p !== a);\n\n  return inside;\n} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\nfunction splitPolygon(a, b) {\n  var a2 = new Node(a.i, a.x, a.y),\n      b2 = new Node(b.i, b.x, b.y),\n      an = a.next,\n      bp = b.prev;\n  a.next = b;\n  b.prev = a;\n  a2.next = an;\n  an.prev = a2;\n  b2.next = a2;\n  a2.prev = b2;\n  bp.next = b2;\n  b2.prev = bp;\n  return b2;\n} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\nfunction insertNode(i, x, y, last) {\n  var p = new Node(i, x, y);\n\n  if (!last) {\n    p.prev = p;\n    p.next = p;\n  } else {\n    p.next = last.next;\n    p.prev = last;\n    last.next.prev = p;\n    last.next = p;\n  }\n\n  return p;\n}\n\nfunction removeNode(p) {\n  p.next.prev = p.prev;\n  p.prev.next = p.next;\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n  // vertex index in coordinates array\n  this.i = i; // vertex coordinates\n\n  this.x = x;\n  this.y = y; // previous and next vertex nodes in a polygon ring\n\n  this.prev = null;\n  this.next = null; // z-order curve value\n\n  this.z = 0; // previous and next nodes in z-order\n\n  this.prevZ = null;\n  this.nextZ = null; // indicates whether this is a steiner point\n\n  this.steiner = false;\n} // return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\n\n\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n  var hasHoles = holeIndices && holeIndices.length;\n  var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n  var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n\n  if (hasHoles) {\n    for (var i = 0, len = holeIndices.length; i < len; i++) {\n      var start = holeIndices[i] * dim;\n      var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      polygonArea -= Math.abs(signedArea(data, start, end, dim));\n    }\n  }\n\n  var trianglesArea = 0;\n\n  for (i = 0; i < triangles.length; i += 3) {\n    var a = triangles[i] * dim;\n    var b = triangles[i + 1] * dim;\n    var c = triangles[i + 2] * dim;\n    trianglesArea += Math.abs((data[a] - data[c]) * (data[b + 1] - data[a + 1]) - (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n  }\n\n  return polygonArea === 0 && trianglesArea === 0 ? 0 : Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n  var sum = 0;\n\n  for (var i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n    j = i;\n  }\n\n  return sum;\n} // turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\n\n\nearcut.flatten = function (data) {\n  var dim = data[0][0].length,\n      result = {\n    vertices: [],\n    holes: [],\n    dimensions: dim\n  },\n      holeIndex = 0;\n\n  for (var i = 0; i < data.length; i++) {\n    for (var j = 0; j < data[i].length; j++) {\n      for (var d = 0; d < dim; d++) {\n        result.vertices.push(data[i][j][d]);\n      }\n    }\n\n    if (i > 0) {\n      holeIndex += data[i - 1].length;\n      result.holes.push(holeIndex);\n    }\n  }\n\n  return result;\n};","map":{"version":3,"names":["module","exports","earcut","default","data","holeIndices","dim","hasHoles","length","outerLen","outerNode","linkedList","triangles","next","prev","minX","minY","maxX","maxY","x","y","invSize","eliminateHoles","i","Math","max","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","removeNode","filterPoints","p","again","steiner","area","ear","pass","indexCurve","stop","isEarHashed","isEar","push","cureLocalIntersections","splitEarcut","a","b","c","ax","bx","cx","ay","by","cy","x0","y0","x1","y1","pointInTriangle","minZ","zOrder","maxZ","prevZ","n","nextZ","z","intersects","locallyInside","isValidDiagonal","splitPolygon","queue","len","list","getLeftmost","sort","compareX","eliminateHole","hole","bridge","findHoleBridge","bridgeReverse","hx","hy","qx","Infinity","m","mx","my","tanMin","tan","abs","sectorContainsSector","sortLinked","q","e","tail","numMerges","pSize","qSize","inSize","leftmost","px","py","intersectsPolygon","middleInside","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","min","num","inside","a2","Node","b2","an","bp","deviation","polygonArea","trianglesArea","sum","j","flatten","result","vertices","holes","dimensions","holeIndex","d"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/earcut/src/earcut.js"],"sourcesContent":["'use strict';\r\n\r\nmodule.exports = earcut;\r\nmodule.exports.default = earcut;\r\n\r\nfunction earcut(data, holeIndices, dim) {\r\n\r\n    dim = dim || 2;\r\n\r\n    var hasHoles = holeIndices && holeIndices.length,\r\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\r\n        outerNode = linkedList(data, 0, outerLen, dim, true),\r\n        triangles = [];\r\n\r\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\r\n\r\n    var minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\r\n\r\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n    if (data.length > 80 * dim) {\r\n        minX = maxX = data[0];\r\n        minY = maxY = data[1];\r\n\r\n        for (var i = dim; i < outerLen; i += dim) {\r\n            x = data[i];\r\n            y = data[i + 1];\r\n            if (x < minX) minX = x;\r\n            if (y < minY) minY = y;\r\n            if (x > maxX) maxX = x;\r\n            if (y > maxY) maxY = y;\r\n        }\r\n\r\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n        invSize = Math.max(maxX - minX, maxY - minY);\r\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\r\n    }\r\n\r\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\r\n\r\n    return triangles;\r\n}\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\nfunction linkedList(data, start, end, dim, clockwise) {\r\n    var i, last;\r\n\r\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\r\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    } else {\r\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    }\r\n\r\n    if (last && equals(last, last.next)) {\r\n        removeNode(last);\r\n        last = last.next;\r\n    }\r\n\r\n    return last;\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\nfunction filterPoints(start, end) {\r\n    if (!start) return start;\r\n    if (!end) end = start;\r\n\r\n    var p = start,\r\n        again;\r\n    do {\r\n        again = false;\r\n\r\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\r\n            removeNode(p);\r\n            p = end = p.prev;\r\n            if (p === p.next) break;\r\n            again = true;\r\n\r\n        } else {\r\n            p = p.next;\r\n        }\r\n    } while (again || p !== end);\r\n\r\n    return end;\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\r\n    if (!ear) return;\r\n\r\n    // interlink polygon nodes in z-order\r\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\r\n\r\n    var stop = ear,\r\n        prev, next;\r\n\r\n    // iterate through ears, slicing them one by one\r\n    while (ear.prev !== ear.next) {\r\n        prev = ear.prev;\r\n        next = ear.next;\r\n\r\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\r\n            // cut off the triangle\r\n            triangles.push(prev.i / dim | 0);\r\n            triangles.push(ear.i / dim | 0);\r\n            triangles.push(next.i / dim | 0);\r\n\r\n            removeNode(ear);\r\n\r\n            // skipping the next vertex leads to less sliver triangles\r\n            ear = next.next;\r\n            stop = next.next;\r\n\r\n            continue;\r\n        }\r\n\r\n        ear = next;\r\n\r\n        // if we looped through the whole remaining polygon and can't find any more ears\r\n        if (ear === stop) {\r\n            // try filtering points and slicing again\r\n            if (!pass) {\r\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\r\n\r\n            // if this didn't work, try curing all small self-intersections locally\r\n            } else if (pass === 1) {\r\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\r\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\r\n\r\n            // as a last resort, try splitting the remaining polygon into two\r\n            } else if (pass === 2) {\r\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\r\n            }\r\n\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\nfunction isEar(ear) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    // now make sure we don't have other points inside the potential ear\r\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\r\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\r\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\r\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\r\n\r\n    var p = c.next;\r\n    while (p !== a) {\r\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\r\n            area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.next;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction isEarHashed(ear, minX, minY, invSize) {\r\n    var a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n\r\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\r\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\r\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\r\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\r\n\r\n    // z-order range for the current triangle bbox;\r\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\r\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\r\n\r\n    var p = ear.prevZ,\r\n        n = ear.nextZ;\r\n\r\n    // look for points inside the triangle in both directions\r\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\r\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.prevZ;\r\n\r\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\r\n        n = n.nextZ;\r\n    }\r\n\r\n    // look for remaining points in decreasing z-order\r\n    while (p && p.z >= minZ) {\r\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\r\n        p = p.prevZ;\r\n    }\r\n\r\n    // look for remaining points in increasing z-order\r\n    while (n && n.z <= maxZ) {\r\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\r\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\r\n        n = n.nextZ;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\nfunction cureLocalIntersections(start, triangles, dim) {\r\n    var p = start;\r\n    do {\r\n        var a = p.prev,\r\n            b = p.next.next;\r\n\r\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\r\n\r\n            triangles.push(a.i / dim | 0);\r\n            triangles.push(p.i / dim | 0);\r\n            triangles.push(b.i / dim | 0);\r\n\r\n            // remove two nodes involved\r\n            removeNode(p);\r\n            removeNode(p.next);\r\n\r\n            p = start = b;\r\n        }\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return filterPoints(p);\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\r\n    // look for a valid diagonal that divides the polygon into two\r\n    var a = start;\r\n    do {\r\n        var b = a.next.next;\r\n        while (b !== a.prev) {\r\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\r\n                // split the polygon in two by the diagonal\r\n                var c = splitPolygon(a, b);\r\n\r\n                // filter colinear points around the cuts\r\n                a = filterPoints(a, a.next);\r\n                c = filterPoints(c, c.next);\r\n\r\n                // run earcut on each half\r\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\r\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\r\n                return;\r\n            }\r\n            b = b.next;\r\n        }\r\n        a = a.next;\r\n    } while (a !== start);\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\r\n    var queue = [],\r\n        i, len, start, end, list;\r\n\r\n    for (i = 0, len = holeIndices.length; i < len; i++) {\r\n        start = holeIndices[i] * dim;\r\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n        list = linkedList(data, start, end, dim, false);\r\n        if (list === list.next) list.steiner = true;\r\n        queue.push(getLeftmost(list));\r\n    }\r\n\r\n    queue.sort(compareX);\r\n\r\n    // process holes from left to right\r\n    for (i = 0; i < queue.length; i++) {\r\n        outerNode = eliminateHole(queue[i], outerNode);\r\n    }\r\n\r\n    return outerNode;\r\n}\r\n\r\nfunction compareX(a, b) {\r\n    return a.x - b.x;\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and and link it\r\nfunction eliminateHole(hole, outerNode) {\r\n    var bridge = findHoleBridge(hole, outerNode);\r\n    if (!bridge) {\r\n        return outerNode;\r\n    }\r\n\r\n    var bridgeReverse = splitPolygon(bridge, hole);\r\n\r\n    // filter collinear points around the cuts\r\n    filterPoints(bridgeReverse, bridgeReverse.next);\r\n    return filterPoints(bridge, bridge.next);\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\nfunction findHoleBridge(hole, outerNode) {\r\n    var p = outerNode,\r\n        hx = hole.x,\r\n        hy = hole.y,\r\n        qx = -Infinity,\r\n        m;\r\n\r\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n    // segment's endpoint with lesser x will be potential connection point\r\n    do {\r\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\r\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\r\n            if (x <= hx && x > qx) {\r\n                qx = x;\r\n                m = p.x < p.next.x ? p : p.next;\r\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\r\n            }\r\n        }\r\n        p = p.next;\r\n    } while (p !== outerNode);\r\n\r\n    if (!m) return null;\r\n\r\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n    // if there are no points found, we have a valid connection;\r\n    // otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n    var stop = m,\r\n        mx = m.x,\r\n        my = m.y,\r\n        tanMin = Infinity,\r\n        tan;\r\n\r\n    p = m;\r\n\r\n    do {\r\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\r\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\r\n\r\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\r\n\r\n            if (locallyInside(p, hole) &&\r\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\r\n                m = p;\r\n                tanMin = tan;\r\n            }\r\n        }\r\n\r\n        p = p.next;\r\n    } while (p !== stop);\r\n\r\n    return m;\r\n}\r\n\r\n// whether sector in vertex m contains sector in vertex p in the same coordinates\r\nfunction sectorContainsSector(m, p) {\r\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\nfunction indexCurve(start, minX, minY, invSize) {\r\n    var p = start;\r\n    do {\r\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\r\n        p.prevZ = p.prev;\r\n        p.nextZ = p.next;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    p.prevZ.nextZ = null;\r\n    p.prevZ = null;\r\n\r\n    sortLinked(p);\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\nfunction sortLinked(list) {\r\n    var i, p, q, e, tail, numMerges, pSize, qSize,\r\n        inSize = 1;\r\n\r\n    do {\r\n        p = list;\r\n        list = null;\r\n        tail = null;\r\n        numMerges = 0;\r\n\r\n        while (p) {\r\n            numMerges++;\r\n            q = p;\r\n            pSize = 0;\r\n            for (i = 0; i < inSize; i++) {\r\n                pSize++;\r\n                q = q.nextZ;\r\n                if (!q) break;\r\n            }\r\n            qSize = inSize;\r\n\r\n            while (pSize > 0 || (qSize > 0 && q)) {\r\n\r\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\r\n                    e = p;\r\n                    p = p.nextZ;\r\n                    pSize--;\r\n                } else {\r\n                    e = q;\r\n                    q = q.nextZ;\r\n                    qSize--;\r\n                }\r\n\r\n                if (tail) tail.nextZ = e;\r\n                else list = e;\r\n\r\n                e.prevZ = tail;\r\n                tail = e;\r\n            }\r\n\r\n            p = q;\r\n        }\r\n\r\n        tail.nextZ = null;\r\n        inSize *= 2;\r\n\r\n    } while (numMerges > 1);\r\n\r\n    return list;\r\n}\r\n\r\n// z-order of a point given coords and inverse of the longer side of data bbox\r\nfunction zOrder(x, y, minX, minY, invSize) {\r\n    // coords are transformed into non-negative 15-bit integer range\r\n    x = (x - minX) * invSize | 0;\r\n    y = (y - minY) * invSize | 0;\r\n\r\n    x = (x | (x << 8)) & 0x00FF00FF;\r\n    x = (x | (x << 4)) & 0x0F0F0F0F;\r\n    x = (x | (x << 2)) & 0x33333333;\r\n    x = (x | (x << 1)) & 0x55555555;\r\n\r\n    y = (y | (y << 8)) & 0x00FF00FF;\r\n    y = (y | (y << 4)) & 0x0F0F0F0F;\r\n    y = (y | (y << 2)) & 0x33333333;\r\n    y = (y | (y << 1)) & 0x55555555;\r\n\r\n    return x | (y << 1);\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\nfunction getLeftmost(start) {\r\n    var p = start,\r\n        leftmost = start;\r\n    do {\r\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\r\n        p = p.next;\r\n    } while (p !== start);\r\n\r\n    return leftmost;\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\r\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\r\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\r\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\nfunction isValidDiagonal(a, b) {\r\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\r\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\r\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\r\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\r\n}\r\n\r\n// signed area of a triangle\r\nfunction area(p, q, r) {\r\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n}\r\n\r\n// check if two points are equal\r\nfunction equals(p1, p2) {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n// check if two segments intersect\r\nfunction intersects(p1, q1, p2, q2) {\r\n    var o1 = sign(area(p1, q1, p2));\r\n    var o2 = sign(area(p1, q1, q2));\r\n    var o3 = sign(area(p2, q2, p1));\r\n    var o4 = sign(area(p2, q2, q1));\r\n\r\n    if (o1 !== o2 && o3 !== o4) return true; // general case\r\n\r\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\r\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\r\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\r\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\r\n\r\n    return false;\r\n}\r\n\r\n// for collinear points p, q, r, check if point q lies on segment pr\r\nfunction onSegment(p, q, r) {\r\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\r\n}\r\n\r\nfunction sign(num) {\r\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\nfunction intersectsPolygon(a, b) {\r\n    var p = a;\r\n    do {\r\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n                intersects(p, p.next, a, b)) return true;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return false;\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\nfunction locallyInside(a, b) {\r\n    return area(a.prev, a, a.next) < 0 ?\r\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\r\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\nfunction middleInside(a, b) {\r\n    var p = a,\r\n        inside = false,\r\n        px = (a.x + b.x) / 2,\r\n        py = (a.y + b.y) / 2;\r\n    do {\r\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\r\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\r\n            inside = !inside;\r\n        p = p.next;\r\n    } while (p !== a);\r\n\r\n    return inside;\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\nfunction splitPolygon(a, b) {\r\n    var a2 = new Node(a.i, a.x, a.y),\r\n        b2 = new Node(b.i, b.x, b.y),\r\n        an = a.next,\r\n        bp = b.prev;\r\n\r\n    a.next = b;\r\n    b.prev = a;\r\n\r\n    a2.next = an;\r\n    an.prev = a2;\r\n\r\n    b2.next = a2;\r\n    a2.prev = b2;\r\n\r\n    bp.next = b2;\r\n    b2.prev = bp;\r\n\r\n    return b2;\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\nfunction insertNode(i, x, y, last) {\r\n    var p = new Node(i, x, y);\r\n\r\n    if (!last) {\r\n        p.prev = p;\r\n        p.next = p;\r\n\r\n    } else {\r\n        p.next = last.next;\r\n        p.prev = last;\r\n        last.next.prev = p;\r\n        last.next = p;\r\n    }\r\n    return p;\r\n}\r\n\r\nfunction removeNode(p) {\r\n    p.next.prev = p.prev;\r\n    p.prev.next = p.next;\r\n\r\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\r\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\r\n}\r\n\r\nfunction Node(i, x, y) {\r\n    // vertex index in coordinates array\r\n    this.i = i;\r\n\r\n    // vertex coordinates\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    // previous and next vertex nodes in a polygon ring\r\n    this.prev = null;\r\n    this.next = null;\r\n\r\n    // z-order curve value\r\n    this.z = 0;\r\n\r\n    // previous and next nodes in z-order\r\n    this.prevZ = null;\r\n    this.nextZ = null;\r\n\r\n    // indicates whether this is a steiner point\r\n    this.steiner = false;\r\n}\r\n\r\n// return a percentage difference between the polygon area and its triangulation area;\r\n// used to verify correctness of triangulation\r\nearcut.deviation = function (data, holeIndices, dim, triangles) {\r\n    var hasHoles = holeIndices && holeIndices.length;\r\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\r\n\r\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\r\n    if (hasHoles) {\r\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\r\n            var start = holeIndices[i] * dim;\r\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\r\n        }\r\n    }\r\n\r\n    var trianglesArea = 0;\r\n    for (i = 0; i < triangles.length; i += 3) {\r\n        var a = triangles[i] * dim;\r\n        var b = triangles[i + 1] * dim;\r\n        var c = triangles[i + 2] * dim;\r\n        trianglesArea += Math.abs(\r\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\r\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\r\n    }\r\n\r\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\r\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\r\n};\r\n\r\nfunction signedArea(data, start, end, dim) {\r\n    var sum = 0;\r\n    for (var i = start, j = end - dim; i < end; i += dim) {\r\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\r\n        j = i;\r\n    }\r\n    return sum;\r\n}\r\n\r\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\r\nearcut.flatten = function (data) {\r\n    var dim = data[0][0].length,\r\n        result = {vertices: [], holes: [], dimensions: dim},\r\n        holeIndex = 0;\r\n\r\n    for (var i = 0; i < data.length; i++) {\r\n        for (var j = 0; j < data[i].length; j++) {\r\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\r\n        }\r\n        if (i > 0) {\r\n            holeIndex += data[i - 1].length;\r\n            result.holes.push(holeIndex);\r\n        }\r\n    }\r\n    return result;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}