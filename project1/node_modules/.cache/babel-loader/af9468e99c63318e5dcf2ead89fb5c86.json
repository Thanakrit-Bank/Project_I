{"ast":null,"code":"import booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport lineIntersect from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport polygonToLine from \"@turf/polygon-to-line\";\n/**\n * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.\n *\n * @name booleanDisjoint\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanDisjoint(line, point);\n * //=true\n */\n\nfunction booleanDisjoint(feature1, feature2) {\n  var bool = true;\n  flattenEach(feature1, function (flatten1) {\n    flattenEach(feature2, function (flatten2) {\n      if (bool === false) {\n        return false;\n      }\n\n      bool = disjoint(flatten1.geometry, flatten2.geometry);\n    });\n  });\n  return bool;\n}\n/**\n * Disjoint operation for simple Geometries (Point/LineString/Polygon)\n *\n * @private\n * @param {Geometry<any>} geom1 GeoJSON Geometry\n * @param {Geometry<any>} geom2 GeoJSON Geometry\n * @returns {boolean} true/false\n */\n\n\nfunction disjoint(geom1, geom2) {\n  switch (geom1.type) {\n    case \"Point\":\n      switch (geom2.type) {\n        case \"Point\":\n          return !compareCoords(geom1.coordinates, geom2.coordinates);\n\n        case \"LineString\":\n          return !isPointOnLine(geom2, geom1);\n\n        case \"Polygon\":\n          return !booleanPointInPolygon(geom1, geom2);\n      }\n      /* istanbul ignore next */\n\n\n      break;\n\n    case \"LineString\":\n      switch (geom2.type) {\n        case \"Point\":\n          return !isPointOnLine(geom1, geom2);\n\n        case \"LineString\":\n          return !isLineOnLine(geom1, geom2);\n\n        case \"Polygon\":\n          return !isLineInPoly(geom2, geom1);\n      }\n      /* istanbul ignore next */\n\n\n      break;\n\n    case \"Polygon\":\n      switch (geom2.type) {\n        case \"Point\":\n          return !booleanPointInPolygon(geom2, geom1);\n\n        case \"LineString\":\n          return !isLineInPoly(geom1, geom2);\n\n        case \"Polygon\":\n          return !isPolyInPoly(geom2, geom1);\n      }\n\n  }\n\n  return false;\n} // http://stackoverflow.com/a/11908158/1979085\n\n\nfunction isPointOnLine(lineString, pt) {\n  for (var i = 0; i < lineString.coordinates.length - 1; i++) {\n    if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], pt.coordinates)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isLineOnLine(lineString1, lineString2) {\n  var doLinesIntersect = lineIntersect(lineString1, lineString2);\n\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isLineInPoly(polygon, lineString) {\n  for (var _i = 0, _a = lineString.coordinates; _i < _a.length; _i++) {\n    var coord = _a[_i];\n\n    if (booleanPointInPolygon(coord, polygon)) {\n      return true;\n    }\n  }\n\n  var doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon));\n\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Is Polygon (geom1) in Polygon (geom2)\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\n\n\nfunction isPolyInPoly(feature1, feature2) {\n  for (var _i = 0, _a = feature1.coordinates[0]; _i < _a.length; _i++) {\n    var coord1 = _a[_i];\n\n    if (booleanPointInPolygon(coord1, feature2)) {\n      return true;\n    }\n  }\n\n  for (var _b = 0, _c = feature2.coordinates[0]; _b < _c.length; _b++) {\n    var coord2 = _c[_b];\n\n    if (booleanPointInPolygon(coord2, feature1)) {\n      return true;\n    }\n  }\n\n  var doLinesIntersect = lineIntersect(polygonToLine(feature1), polygonToLine(feature2));\n\n  if (doLinesIntersect.features.length > 0) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt) {\n  var dxc = pt[0] - lineSegmentStart[0];\n  var dyc = pt[1] - lineSegmentStart[1];\n  var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n  var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n  var cross = dxc * dyl - dyc * dxl;\n\n  if (cross !== 0) {\n    return false;\n  }\n\n  if (Math.abs(dxl) >= Math.abs(dyl)) {\n    if (dxl > 0) {\n      return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];\n    } else {\n      return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n    }\n  } else if (dyl > 0) {\n    return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];\n  } else {\n    return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n  }\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\n\n\nfunction compareCoords(pair1, pair2) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n\nexport default booleanDisjoint;","map":{"version":3,"names":["booleanPointInPolygon","lineIntersect","flattenEach","polygonToLine","booleanDisjoint","feature1","feature2","bool","flatten1","flatten2","disjoint","geometry","geom1","geom2","type","compareCoords","coordinates","isPointOnLine","isLineOnLine","isLineInPoly","isPolyInPoly","lineString","pt","i","length","isPointOnLineSegment","lineString1","lineString2","doLinesIntersect","features","polygon","_i","_a","coord","coord1","_b","_c","coord2","lineSegmentStart","lineSegmentEnd","dxc","dyc","dxl","dyl","cross","Math","abs","pair1","pair2"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/boolean-disjoint/dist/es/index.js"],"sourcesContent":["import booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport lineIntersect from \"@turf/line-intersect\";\nimport { flattenEach } from \"@turf/meta\";\nimport polygonToLine from \"@turf/polygon-to-line\";\n/**\n * Boolean-disjoint returns (TRUE) if the intersection of the two geometries is an empty set.\n *\n * @name booleanDisjoint\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var point = turf.point([2, 2]);\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanDisjoint(line, point);\n * //=true\n */\nfunction booleanDisjoint(feature1, feature2) {\n    var bool = true;\n    flattenEach(feature1, function (flatten1) {\n        flattenEach(feature2, function (flatten2) {\n            if (bool === false) {\n                return false;\n            }\n            bool = disjoint(flatten1.geometry, flatten2.geometry);\n        });\n    });\n    return bool;\n}\n/**\n * Disjoint operation for simple Geometries (Point/LineString/Polygon)\n *\n * @private\n * @param {Geometry<any>} geom1 GeoJSON Geometry\n * @param {Geometry<any>} geom2 GeoJSON Geometry\n * @returns {boolean} true/false\n */\nfunction disjoint(geom1, geom2) {\n    switch (geom1.type) {\n        case \"Point\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !compareCoords(geom1.coordinates, geom2.coordinates);\n                case \"LineString\":\n                    return !isPointOnLine(geom2, geom1);\n                case \"Polygon\":\n                    return !booleanPointInPolygon(geom1, geom2);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"LineString\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !isPointOnLine(geom1, geom2);\n                case \"LineString\":\n                    return !isLineOnLine(geom1, geom2);\n                case \"Polygon\":\n                    return !isLineInPoly(geom2, geom1);\n            }\n            /* istanbul ignore next */\n            break;\n        case \"Polygon\":\n            switch (geom2.type) {\n                case \"Point\":\n                    return !booleanPointInPolygon(geom2, geom1);\n                case \"LineString\":\n                    return !isLineInPoly(geom1, geom2);\n                case \"Polygon\":\n                    return !isPolyInPoly(geom2, geom1);\n            }\n    }\n    return false;\n}\n// http://stackoverflow.com/a/11908158/1979085\nfunction isPointOnLine(lineString, pt) {\n    for (var i = 0; i < lineString.coordinates.length - 1; i++) {\n        if (isPointOnLineSegment(lineString.coordinates[i], lineString.coordinates[i + 1], pt.coordinates)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isLineOnLine(lineString1, lineString2) {\n    var doLinesIntersect = lineIntersect(lineString1, lineString2);\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isLineInPoly(polygon, lineString) {\n    for (var _i = 0, _a = lineString.coordinates; _i < _a.length; _i++) {\n        var coord = _a[_i];\n        if (booleanPointInPolygon(coord, polygon)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(lineString, polygonToLine(polygon));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\n/**\n * Is Polygon (geom1) in Polygon (geom2)\n * Only takes into account outer rings\n * See http://stackoverflow.com/a/4833823/1979085\n *\n * @private\n * @param {Geometry|Feature<Polygon>} feature1 Polygon1\n * @param {Geometry|Feature<Polygon>} feature2 Polygon2\n * @returns {boolean} true/false\n */\nfunction isPolyInPoly(feature1, feature2) {\n    for (var _i = 0, _a = feature1.coordinates[0]; _i < _a.length; _i++) {\n        var coord1 = _a[_i];\n        if (booleanPointInPolygon(coord1, feature2)) {\n            return true;\n        }\n    }\n    for (var _b = 0, _c = feature2.coordinates[0]; _b < _c.length; _b++) {\n        var coord2 = _c[_b];\n        if (booleanPointInPolygon(coord2, feature1)) {\n            return true;\n        }\n    }\n    var doLinesIntersect = lineIntersect(polygonToLine(feature1), polygonToLine(feature2));\n    if (doLinesIntersect.features.length > 0) {\n        return true;\n    }\n    return false;\n}\nfunction isPointOnLineSegment(lineSegmentStart, lineSegmentEnd, pt) {\n    var dxc = pt[0] - lineSegmentStart[0];\n    var dyc = pt[1] - lineSegmentStart[1];\n    var dxl = lineSegmentEnd[0] - lineSegmentStart[0];\n    var dyl = lineSegmentEnd[1] - lineSegmentStart[1];\n    var cross = dxc * dyl - dyc * dxl;\n    if (cross !== 0) {\n        return false;\n    }\n    if (Math.abs(dxl) >= Math.abs(dyl)) {\n        if (dxl > 0) {\n            return lineSegmentStart[0] <= pt[0] && pt[0] <= lineSegmentEnd[0];\n        }\n        else {\n            return lineSegmentEnd[0] <= pt[0] && pt[0] <= lineSegmentStart[0];\n        }\n    }\n    else if (dyl > 0) {\n        return lineSegmentStart[1] <= pt[1] && pt[1] <= lineSegmentEnd[1];\n    }\n    else {\n        return lineSegmentEnd[1] <= pt[1] && pt[1] <= lineSegmentStart[1];\n    }\n}\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1, pair2) {\n    return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\nexport default booleanDisjoint;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}