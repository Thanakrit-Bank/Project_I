{"ast":null,"code":"import calcBbox from \"@turf/bbox\";\nimport booleanPointOnLine from \"@turf/boolean-point-on-line\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { getGeom } from \"@turf/invariant\";\n/**\r\n * Boolean-within returns true if the first geometry is completely within the second geometry.\r\n * The interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)\r\n * must not intersect the exterior of the secondary (geometry b).\r\n * Boolean-within returns the exact opposite result of the `@turf/boolean-contains`.\r\n *\r\n * @name booleanWithin\r\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\r\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\r\n * @returns {boolean} true/false\r\n * @example\r\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\r\n * var point = turf.point([1, 2]);\r\n *\r\n * turf.booleanWithin(point, line);\r\n * //=true\r\n */\n\nfunction booleanWithin(feature1, feature2) {\n  var geom1 = getGeom(feature1);\n  var geom2 = getGeom(feature2);\n  var type1 = geom1.type;\n  var type2 = geom2.type;\n\n  switch (type1) {\n    case \"Point\":\n      switch (type2) {\n        case \"MultiPoint\":\n          return isPointInMultiPoint(geom1, geom2);\n\n        case \"LineString\":\n          return booleanPointOnLine(geom1, geom2, {\n            ignoreEndVertices: true\n          });\n\n        case \"Polygon\":\n        case \"MultiPolygon\":\n          return booleanPointInPolygon(geom1, geom2, {\n            ignoreBoundary: true\n          });\n\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n\n    case \"MultiPoint\":\n      switch (type2) {\n        case \"MultiPoint\":\n          return isMultiPointInMultiPoint(geom1, geom2);\n\n        case \"LineString\":\n          return isMultiPointOnLine(geom1, geom2);\n\n        case \"Polygon\":\n        case \"MultiPolygon\":\n          return isMultiPointInPoly(geom1, geom2);\n\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n\n    case \"LineString\":\n      switch (type2) {\n        case \"LineString\":\n          return isLineOnLine(geom1, geom2);\n\n        case \"Polygon\":\n        case \"MultiPolygon\":\n          return isLineInPoly(geom1, geom2);\n\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n\n    case \"Polygon\":\n      switch (type2) {\n        case \"Polygon\":\n        case \"MultiPolygon\":\n          return isPolyInPoly(geom1, geom2);\n\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n\n    default:\n      throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\n  }\n}\n\nfunction isPointInMultiPoint(point, multiPoint) {\n  var i;\n  var output = false;\n\n  for (i = 0; i < multiPoint.coordinates.length; i++) {\n    if (compareCoords(multiPoint.coordinates[i], point.coordinates)) {\n      output = true;\n      break;\n    }\n  }\n\n  return output;\n}\n\nfunction isMultiPointInMultiPoint(multiPoint1, multiPoint2) {\n  for (var i = 0; i < multiPoint1.coordinates.length; i++) {\n    var anyMatch = false;\n\n    for (var i2 = 0; i2 < multiPoint2.coordinates.length; i2++) {\n      if (compareCoords(multiPoint1.coordinates[i], multiPoint2.coordinates[i2])) {\n        anyMatch = true;\n      }\n    }\n\n    if (!anyMatch) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isMultiPointOnLine(multiPoint, lineString) {\n  var foundInsidePoint = false;\n\n  for (var i = 0; i < multiPoint.coordinates.length; i++) {\n    if (!booleanPointOnLine(multiPoint.coordinates[i], lineString)) {\n      return false;\n    }\n\n    if (!foundInsidePoint) {\n      foundInsidePoint = booleanPointOnLine(multiPoint.coordinates[i], lineString, {\n        ignoreEndVertices: true\n      });\n    }\n  }\n\n  return foundInsidePoint;\n}\n\nfunction isMultiPointInPoly(multiPoint, polygon) {\n  var output = true;\n  var oneInside = false;\n  var isInside = false;\n\n  for (var i = 0; i < multiPoint.coordinates.length; i++) {\n    isInside = booleanPointInPolygon(multiPoint.coordinates[1], polygon);\n\n    if (!isInside) {\n      output = false;\n      break;\n    }\n\n    if (!oneInside) {\n      isInside = booleanPointInPolygon(multiPoint.coordinates[1], polygon, {\n        ignoreBoundary: true\n      });\n    }\n  }\n\n  return output && isInside;\n}\n\nfunction isLineOnLine(lineString1, lineString2) {\n  for (var i = 0; i < lineString1.coordinates.length; i++) {\n    if (!booleanPointOnLine(lineString1.coordinates[i], lineString2)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isLineInPoly(linestring, polygon) {\n  var polyBbox = calcBbox(polygon);\n  var lineBbox = calcBbox(linestring);\n\n  if (!doBBoxOverlap(polyBbox, lineBbox)) {\n    return false;\n  }\n\n  var foundInsidePoint = false;\n\n  for (var i = 0; i < linestring.coordinates.length - 1; i++) {\n    if (!booleanPointInPolygon(linestring.coordinates[i], polygon)) {\n      return false;\n    }\n\n    if (!foundInsidePoint) {\n      foundInsidePoint = booleanPointInPolygon(linestring.coordinates[i], polygon, {\n        ignoreBoundary: true\n      });\n    }\n\n    if (!foundInsidePoint) {\n      var midpoint = getMidpoint(linestring.coordinates[i], linestring.coordinates[i + 1]);\n      foundInsidePoint = booleanPointInPolygon(midpoint, polygon, {\n        ignoreBoundary: true\n      });\n    }\n  }\n\n  return foundInsidePoint;\n}\n/**\r\n * Is Polygon2 in Polygon1\r\n * Only takes into account outer rings\r\n *\r\n * @private\r\n * @param {Polygon} geometry1\r\n * @param {Polygon|MultiPolygon} geometry2\r\n * @returns {boolean} true/false\r\n */\n\n\nfunction isPolyInPoly(geometry1, geometry2) {\n  var poly1Bbox = calcBbox(geometry1);\n  var poly2Bbox = calcBbox(geometry2);\n\n  if (!doBBoxOverlap(poly2Bbox, poly1Bbox)) {\n    return false;\n  }\n\n  for (var i = 0; i < geometry1.coordinates[0].length; i++) {\n    if (!booleanPointInPolygon(geometry1.coordinates[0][i], geometry2)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction doBBoxOverlap(bbox1, bbox2) {\n  if (bbox1[0] > bbox2[0]) return false;\n  if (bbox1[2] < bbox2[2]) return false;\n  if (bbox1[1] > bbox2[1]) return false;\n  if (bbox1[3] < bbox2[3]) return false;\n  return true;\n}\n/**\r\n * compareCoords\r\n *\r\n * @private\r\n * @param {Position} pair1 point [x,y]\r\n * @param {Position} pair2 point [x,y]\r\n * @returns {boolean} true/false if coord pairs match\r\n */\n\n\nfunction compareCoords(pair1, pair2) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n/**\r\n * getMidpoint\r\n *\r\n * @private\r\n * @param {Position} pair1 point [x,y]\r\n * @param {Position} pair2 point [x,y]\r\n * @returns {Position} midpoint of pair1 and pair2\r\n */\n\n\nfunction getMidpoint(pair1, pair2) {\n  return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];\n}\n\nexport default booleanWithin;","map":{"version":3,"names":["calcBbox","booleanPointOnLine","booleanPointInPolygon","getGeom","booleanWithin","feature1","feature2","geom1","geom2","type1","type","type2","isPointInMultiPoint","ignoreEndVertices","ignoreBoundary","Error","isMultiPointInMultiPoint","isMultiPointOnLine","isMultiPointInPoly","isLineOnLine","isLineInPoly","isPolyInPoly","point","multiPoint","i","output","coordinates","length","compareCoords","multiPoint1","multiPoint2","anyMatch","i2","lineString","foundInsidePoint","polygon","oneInside","isInside","lineString1","lineString2","linestring","polyBbox","lineBbox","doBBoxOverlap","midpoint","getMidpoint","geometry1","geometry2","poly1Bbox","poly2Bbox","bbox1","bbox2","pair1","pair2"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/boolean-within/dist/es/index.js"],"sourcesContent":["import calcBbox from \"@turf/bbox\";\r\nimport booleanPointOnLine from \"@turf/boolean-point-on-line\";\r\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\r\nimport { getGeom } from \"@turf/invariant\";\r\n/**\r\n * Boolean-within returns true if the first geometry is completely within the second geometry.\r\n * The interiors of both geometries must intersect and, the interior and boundary of the primary (geometry a)\r\n * must not intersect the exterior of the secondary (geometry b).\r\n * Boolean-within returns the exact opposite result of the `@turf/boolean-contains`.\r\n *\r\n * @name booleanWithin\r\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\r\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\r\n * @returns {boolean} true/false\r\n * @example\r\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\r\n * var point = turf.point([1, 2]);\r\n *\r\n * turf.booleanWithin(point, line);\r\n * //=true\r\n */\r\nfunction booleanWithin(feature1, feature2) {\r\n    var geom1 = getGeom(feature1);\r\n    var geom2 = getGeom(feature2);\r\n    var type1 = geom1.type;\r\n    var type2 = geom2.type;\r\n    switch (type1) {\r\n        case \"Point\":\r\n            switch (type2) {\r\n                case \"MultiPoint\":\r\n                    return isPointInMultiPoint(geom1, geom2);\r\n                case \"LineString\":\r\n                    return booleanPointOnLine(geom1, geom2, { ignoreEndVertices: true });\r\n                case \"Polygon\":\r\n                case \"MultiPolygon\":\r\n                    return booleanPointInPolygon(geom1, geom2, { ignoreBoundary: true });\r\n                default:\r\n                    throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\r\n            }\r\n        case \"MultiPoint\":\r\n            switch (type2) {\r\n                case \"MultiPoint\":\r\n                    return isMultiPointInMultiPoint(geom1, geom2);\r\n                case \"LineString\":\r\n                    return isMultiPointOnLine(geom1, geom2);\r\n                case \"Polygon\":\r\n                case \"MultiPolygon\":\r\n                    return isMultiPointInPoly(geom1, geom2);\r\n                default:\r\n                    throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\r\n            }\r\n        case \"LineString\":\r\n            switch (type2) {\r\n                case \"LineString\":\r\n                    return isLineOnLine(geom1, geom2);\r\n                case \"Polygon\":\r\n                case \"MultiPolygon\":\r\n                    return isLineInPoly(geom1, geom2);\r\n                default:\r\n                    throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\r\n            }\r\n        case \"Polygon\":\r\n            switch (type2) {\r\n                case \"Polygon\":\r\n                case \"MultiPolygon\":\r\n                    return isPolyInPoly(geom1, geom2);\r\n                default:\r\n                    throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\r\n            }\r\n        default:\r\n            throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\r\n    }\r\n}\r\nfunction isPointInMultiPoint(point, multiPoint) {\r\n    var i;\r\n    var output = false;\r\n    for (i = 0; i < multiPoint.coordinates.length; i++) {\r\n        if (compareCoords(multiPoint.coordinates[i], point.coordinates)) {\r\n            output = true;\r\n            break;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction isMultiPointInMultiPoint(multiPoint1, multiPoint2) {\r\n    for (var i = 0; i < multiPoint1.coordinates.length; i++) {\r\n        var anyMatch = false;\r\n        for (var i2 = 0; i2 < multiPoint2.coordinates.length; i2++) {\r\n            if (compareCoords(multiPoint1.coordinates[i], multiPoint2.coordinates[i2])) {\r\n                anyMatch = true;\r\n            }\r\n        }\r\n        if (!anyMatch) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isMultiPointOnLine(multiPoint, lineString) {\r\n    var foundInsidePoint = false;\r\n    for (var i = 0; i < multiPoint.coordinates.length; i++) {\r\n        if (!booleanPointOnLine(multiPoint.coordinates[i], lineString)) {\r\n            return false;\r\n        }\r\n        if (!foundInsidePoint) {\r\n            foundInsidePoint = booleanPointOnLine(multiPoint.coordinates[i], lineString, { ignoreEndVertices: true });\r\n        }\r\n    }\r\n    return foundInsidePoint;\r\n}\r\nfunction isMultiPointInPoly(multiPoint, polygon) {\r\n    var output = true;\r\n    var oneInside = false;\r\n    var isInside = false;\r\n    for (var i = 0; i < multiPoint.coordinates.length; i++) {\r\n        isInside = booleanPointInPolygon(multiPoint.coordinates[1], polygon);\r\n        if (!isInside) {\r\n            output = false;\r\n            break;\r\n        }\r\n        if (!oneInside) {\r\n            isInside = booleanPointInPolygon(multiPoint.coordinates[1], polygon, {\r\n                ignoreBoundary: true,\r\n            });\r\n        }\r\n    }\r\n    return output && isInside;\r\n}\r\nfunction isLineOnLine(lineString1, lineString2) {\r\n    for (var i = 0; i < lineString1.coordinates.length; i++) {\r\n        if (!booleanPointOnLine(lineString1.coordinates[i], lineString2)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction isLineInPoly(linestring, polygon) {\r\n    var polyBbox = calcBbox(polygon);\r\n    var lineBbox = calcBbox(linestring);\r\n    if (!doBBoxOverlap(polyBbox, lineBbox)) {\r\n        return false;\r\n    }\r\n    var foundInsidePoint = false;\r\n    for (var i = 0; i < linestring.coordinates.length - 1; i++) {\r\n        if (!booleanPointInPolygon(linestring.coordinates[i], polygon)) {\r\n            return false;\r\n        }\r\n        if (!foundInsidePoint) {\r\n            foundInsidePoint = booleanPointInPolygon(linestring.coordinates[i], polygon, { ignoreBoundary: true });\r\n        }\r\n        if (!foundInsidePoint) {\r\n            var midpoint = getMidpoint(linestring.coordinates[i], linestring.coordinates[i + 1]);\r\n            foundInsidePoint = booleanPointInPolygon(midpoint, polygon, {\r\n                ignoreBoundary: true,\r\n            });\r\n        }\r\n    }\r\n    return foundInsidePoint;\r\n}\r\n/**\r\n * Is Polygon2 in Polygon1\r\n * Only takes into account outer rings\r\n *\r\n * @private\r\n * @param {Polygon} geometry1\r\n * @param {Polygon|MultiPolygon} geometry2\r\n * @returns {boolean} true/false\r\n */\r\nfunction isPolyInPoly(geometry1, geometry2) {\r\n    var poly1Bbox = calcBbox(geometry1);\r\n    var poly2Bbox = calcBbox(geometry2);\r\n    if (!doBBoxOverlap(poly2Bbox, poly1Bbox)) {\r\n        return false;\r\n    }\r\n    for (var i = 0; i < geometry1.coordinates[0].length; i++) {\r\n        if (!booleanPointInPolygon(geometry1.coordinates[0][i], geometry2)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction doBBoxOverlap(bbox1, bbox2) {\r\n    if (bbox1[0] > bbox2[0])\r\n        return false;\r\n    if (bbox1[2] < bbox2[2])\r\n        return false;\r\n    if (bbox1[1] > bbox2[1])\r\n        return false;\r\n    if (bbox1[3] < bbox2[3])\r\n        return false;\r\n    return true;\r\n}\r\n/**\r\n * compareCoords\r\n *\r\n * @private\r\n * @param {Position} pair1 point [x,y]\r\n * @param {Position} pair2 point [x,y]\r\n * @returns {boolean} true/false if coord pairs match\r\n */\r\nfunction compareCoords(pair1, pair2) {\r\n    return pair1[0] === pair2[0] && pair1[1] === pair2[1];\r\n}\r\n/**\r\n * getMidpoint\r\n *\r\n * @private\r\n * @param {Position} pair1 point [x,y]\r\n * @param {Position} pair2 point [x,y]\r\n * @returns {Position} midpoint of pair1 and pair2\r\n */\r\nfunction getMidpoint(pair1, pair2) {\r\n    return [(pair1[0] + pair2[0]) / 2, (pair1[1] + pair2[1]) / 2];\r\n}\r\nexport default booleanWithin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}