{"ast":null,"code":"import centerMean from \"@turf/center-mean\";\nimport distance from \"@turf/distance\";\nimport centroid from \"@turf/centroid\";\nimport { isNumber, point, isObject, featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\n/**\n * Takes a {@link FeatureCollection} of points and calculates the median center,\n * algorithimically. The median center is understood as the point that is\n * requires the least total travel from all other points.\n *\n * Turfjs has four different functions for calculating the center of a set of\n * data. Each is useful depending on circumstance.\n *\n * `@turf/center` finds the simple center of a dataset, by finding the\n * midpoint between the extents of the data. That is, it divides in half the\n * farthest east and farthest west point as well as the farthest north and\n * farthest south.\n *\n * `@turf/center-of-mass` imagines that the dataset is a sheet of paper.\n * The center of mass is where the sheet would balance on a fingertip.\n *\n * `@turf/center-mean` takes the averages of all the coordinates and\n * produces a value that respects that. Unlike `@turf/center`, it is\n * sensitive to clusters and outliers. It lands in the statistical middle of a\n * dataset, not the geographical. It can also be weighted, meaning certain\n * points are more important than others.\n *\n * `@turf/center-median` takes the mean center and tries to find, iteratively,\n * a new point that requires the least amount of travel from all the points in\n * the dataset. It is not as sensitive to outliers as `@turf/center-mean`, but it is\n * attracted to clustered data. It, too, can be weighted.\n *\n * **Bibliography**\n *\n * Harold W. Kuhn and Robert E. Kuenne, “An Efficient Algorithm for the\n * Numerical Solution of the Generalized Weber Problem in Spatial\n * Economics,” _Journal of Regional Science_ 4, no. 2 (1962): 21–33,\n * doi:{@link https://doi.org/10.1111/j.1467-9787.1962.tb00902.x}.\n *\n * James E. Burt, Gerald M. Barber, and David L. Rigby, _Elementary\n * Statistics for Geographers_, 3rd ed., New York: The Guilford\n * Press, 2009, 150–151.\n *\n * @name centerMedian\n * @param {FeatureCollection<any>} features Any GeoJSON Feature Collection\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.weight] the property name used to weight the center\n * @param {number} [options.tolerance=0.001] the difference in distance between candidate medians at which point the algorighim stops iterating.\n * @param {number} [options.counter=10] how many attempts to find the median, should the tolerance be insufficient.\n * @returns {Feature<Point>} The median center of the collection\n * @example\n * var points = turf.points([[0, 0], [1, 0], [0, 1], [5, 8]]);\n * var medianCenter = turf.centerMedian(points);\n *\n * //addToMap\n * var addToMap = [points, medianCenter]\n */\n\nfunction centerMedian(features, options) {\n  if (options === void 0) {\n    options = {};\n  } // Optional params\n\n\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var counter = options.counter || 10;\n  if (!isNumber(counter)) throw new Error(\"counter must be a number\");\n  var weightTerm = options.weight; // Calculate mean center:\n\n  var meanCenter = centerMean(features, {\n    weight: options.weight\n  }); // Calculate center of every feature:\n\n  var centroids = featureCollection([]);\n  featureEach(features, function (feature) {\n    var _a;\n\n    centroids.features.push(centroid(feature, {\n      properties: {\n        weight: (_a = feature.properties) === null || _a === void 0 ? void 0 : _a[weightTerm]\n      }\n    }));\n  });\n  var properties = {\n    tolerance: options.tolerance,\n    medianCandidates: []\n  };\n  return findMedian(meanCenter.geometry.coordinates, [0, 0], centroids, properties, counter);\n}\n/**\n * Recursive function to find new candidate medians.\n *\n * @private\n * @param {Position} candidateMedian current candidate median\n * @param {Position} previousCandidate the previous candidate median\n * @param {FeatureCollection<Point>} centroids the collection of centroids whose median we are determining\n * @param {number} counter how many attempts to try before quitting.\n * @returns {Feature<Point>} the median center of the dataset.\n */\n\n\nfunction findMedian(candidateMedian, previousCandidate, centroids, properties, counter) {\n  var tolerance = properties.tolerance || 0.001;\n  var candidateXsum = 0;\n  var candidateYsum = 0;\n  var kSum = 0;\n  var centroidCount = 0;\n  featureEach(centroids, function (theCentroid) {\n    var _a;\n\n    var weightValue = (_a = theCentroid.properties) === null || _a === void 0 ? void 0 : _a.weight;\n    var weight = weightValue === undefined || weightValue === null ? 1 : weightValue;\n    weight = Number(weight);\n    if (!isNumber(weight)) throw new Error(\"weight value must be a number\");\n\n    if (weight > 0) {\n      centroidCount += 1;\n      var distanceFromCandidate = weight * distance(theCentroid, candidateMedian);\n      if (distanceFromCandidate === 0) distanceFromCandidate = 1;\n      var k = weight / distanceFromCandidate;\n      candidateXsum += theCentroid.geometry.coordinates[0] * k;\n      candidateYsum += theCentroid.geometry.coordinates[1] * k;\n      kSum += k;\n    }\n  });\n  if (centroidCount < 1) throw new Error(\"no features to measure\");\n  var candidateX = candidateXsum / kSum;\n  var candidateY = candidateYsum / kSum;\n\n  if (centroidCount === 1 || counter === 0 || Math.abs(candidateX - previousCandidate[0]) < tolerance && Math.abs(candidateY - previousCandidate[1]) < tolerance) {\n    return point([candidateX, candidateY], {\n      medianCandidates: properties.medianCandidates\n    });\n  } else {\n    properties.medianCandidates.push([candidateX, candidateY]);\n    return findMedian([candidateX, candidateY], candidateMedian, centroids, properties, counter - 1);\n  }\n}\n\nexport default centerMedian;","map":{"version":3,"names":["centerMean","distance","centroid","isNumber","point","isObject","featureCollection","featureEach","centerMedian","features","options","Error","counter","weightTerm","weight","meanCenter","centroids","feature","_a","push","properties","tolerance","medianCandidates","findMedian","geometry","coordinates","candidateMedian","previousCandidate","candidateXsum","candidateYsum","kSum","centroidCount","theCentroid","weightValue","undefined","Number","distanceFromCandidate","k","candidateX","candidateY","Math","abs"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/center-median/dist/es/index.js"],"sourcesContent":["import centerMean from \"@turf/center-mean\";\nimport distance from \"@turf/distance\";\nimport centroid from \"@turf/centroid\";\nimport { isNumber, point, isObject, featureCollection, } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\n/**\n * Takes a {@link FeatureCollection} of points and calculates the median center,\n * algorithimically. The median center is understood as the point that is\n * requires the least total travel from all other points.\n *\n * Turfjs has four different functions for calculating the center of a set of\n * data. Each is useful depending on circumstance.\n *\n * `@turf/center` finds the simple center of a dataset, by finding the\n * midpoint between the extents of the data. That is, it divides in half the\n * farthest east and farthest west point as well as the farthest north and\n * farthest south.\n *\n * `@turf/center-of-mass` imagines that the dataset is a sheet of paper.\n * The center of mass is where the sheet would balance on a fingertip.\n *\n * `@turf/center-mean` takes the averages of all the coordinates and\n * produces a value that respects that. Unlike `@turf/center`, it is\n * sensitive to clusters and outliers. It lands in the statistical middle of a\n * dataset, not the geographical. It can also be weighted, meaning certain\n * points are more important than others.\n *\n * `@turf/center-median` takes the mean center and tries to find, iteratively,\n * a new point that requires the least amount of travel from all the points in\n * the dataset. It is not as sensitive to outliers as `@turf/center-mean`, but it is\n * attracted to clustered data. It, too, can be weighted.\n *\n * **Bibliography**\n *\n * Harold W. Kuhn and Robert E. Kuenne, “An Efficient Algorithm for the\n * Numerical Solution of the Generalized Weber Problem in Spatial\n * Economics,” _Journal of Regional Science_ 4, no. 2 (1962): 21–33,\n * doi:{@link https://doi.org/10.1111/j.1467-9787.1962.tb00902.x}.\n *\n * James E. Burt, Gerald M. Barber, and David L. Rigby, _Elementary\n * Statistics for Geographers_, 3rd ed., New York: The Guilford\n * Press, 2009, 150–151.\n *\n * @name centerMedian\n * @param {FeatureCollection<any>} features Any GeoJSON Feature Collection\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.weight] the property name used to weight the center\n * @param {number} [options.tolerance=0.001] the difference in distance between candidate medians at which point the algorighim stops iterating.\n * @param {number} [options.counter=10] how many attempts to find the median, should the tolerance be insufficient.\n * @returns {Feature<Point>} The median center of the collection\n * @example\n * var points = turf.points([[0, 0], [1, 0], [0, 1], [5, 8]]);\n * var medianCenter = turf.centerMedian(points);\n *\n * //addToMap\n * var addToMap = [points, medianCenter]\n */\nfunction centerMedian(features, options) {\n    if (options === void 0) { options = {}; }\n    // Optional params\n    options = options || {};\n    if (!isObject(options))\n        throw new Error(\"options is invalid\");\n    var counter = options.counter || 10;\n    if (!isNumber(counter))\n        throw new Error(\"counter must be a number\");\n    var weightTerm = options.weight;\n    // Calculate mean center:\n    var meanCenter = centerMean(features, { weight: options.weight });\n    // Calculate center of every feature:\n    var centroids = featureCollection([]);\n    featureEach(features, function (feature) {\n        var _a;\n        centroids.features.push(centroid(feature, {\n            properties: { weight: (_a = feature.properties) === null || _a === void 0 ? void 0 : _a[weightTerm] },\n        }));\n    });\n    var properties = {\n        tolerance: options.tolerance,\n        medianCandidates: [],\n    };\n    return findMedian(meanCenter.geometry.coordinates, [0, 0], centroids, properties, counter);\n}\n/**\n * Recursive function to find new candidate medians.\n *\n * @private\n * @param {Position} candidateMedian current candidate median\n * @param {Position} previousCandidate the previous candidate median\n * @param {FeatureCollection<Point>} centroids the collection of centroids whose median we are determining\n * @param {number} counter how many attempts to try before quitting.\n * @returns {Feature<Point>} the median center of the dataset.\n */\nfunction findMedian(candidateMedian, previousCandidate, centroids, properties, counter) {\n    var tolerance = properties.tolerance || 0.001;\n    var candidateXsum = 0;\n    var candidateYsum = 0;\n    var kSum = 0;\n    var centroidCount = 0;\n    featureEach(centroids, function (theCentroid) {\n        var _a;\n        var weightValue = (_a = theCentroid.properties) === null || _a === void 0 ? void 0 : _a.weight;\n        var weight = weightValue === undefined || weightValue === null ? 1 : weightValue;\n        weight = Number(weight);\n        if (!isNumber(weight))\n            throw new Error(\"weight value must be a number\");\n        if (weight > 0) {\n            centroidCount += 1;\n            var distanceFromCandidate = weight * distance(theCentroid, candidateMedian);\n            if (distanceFromCandidate === 0)\n                distanceFromCandidate = 1;\n            var k = weight / distanceFromCandidate;\n            candidateXsum += theCentroid.geometry.coordinates[0] * k;\n            candidateYsum += theCentroid.geometry.coordinates[1] * k;\n            kSum += k;\n        }\n    });\n    if (centroidCount < 1)\n        throw new Error(\"no features to measure\");\n    var candidateX = candidateXsum / kSum;\n    var candidateY = candidateYsum / kSum;\n    if (centroidCount === 1 ||\n        counter === 0 ||\n        (Math.abs(candidateX - previousCandidate[0]) < tolerance &&\n            Math.abs(candidateY - previousCandidate[1]) < tolerance)) {\n        return point([candidateX, candidateY], {\n            medianCandidates: properties.medianCandidates,\n        });\n    }\n    else {\n        properties.medianCandidates.push([candidateX, candidateY]);\n        return findMedian([candidateX, candidateY], candidateMedian, centroids, properties, counter - 1);\n    }\n}\nexport default centerMedian;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}