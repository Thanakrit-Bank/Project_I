{"ast":null,"code":"import distance from \"@turf/distance\";\nimport intersect from \"@turf/intersect\";\nimport { polygon, featureCollection } from \"@turf/helpers\";\n/**\r\n * Takes a bounding box and the diameter of the cell and returns a {@link FeatureCollection} of flat-topped\r\n * hexagons or triangles ({@link Polygon} features) aligned in an \"odd-q\" vertical grid as\r\n * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).\r\n *\r\n * @name hexGrid\r\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\r\n * @param {number} cellSide length of the side of the the hexagons or triangles, in units. It will also coincide with the\r\n * radius of the circumcircle of the hexagons.\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {string} [options.units='kilometers'] used in calculating cell size, can be degrees, radians, miles, or kilometers\r\n * @param {Object} [options.properties={}] passed to each hexagon or triangle of the grid\r\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\r\n * @param {boolean} [options.triangles=false] whether to return as triangles instead of hexagons\r\n * @returns {FeatureCollection<Polygon>} a hexagonal grid\r\n * @example\r\n * var bbox = [-96,31,-84,40];\r\n * var cellSide = 50;\r\n * var options = {units: 'miles'};\r\n *\r\n * var hexgrid = turf.hexGrid(bbox, cellSide, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [hexgrid];\r\n */\n\nfunction hexGrid(bbox, cellSide, options) {\n  if (options === void 0) {\n    options = {};\n  } // Issue => https://github.com/Turfjs/turf/issues/1284\n\n\n  var clonedProperties = JSON.stringify(options.properties || {});\n  var west = bbox[0],\n      south = bbox[1],\n      east = bbox[2],\n      north = bbox[3];\n  var centerY = (south + north) / 2;\n  var centerX = (west + east) / 2; // https://github.com/Turfjs/turf/issues/758\n\n  var xFraction = cellSide * 2 / distance([west, centerY], [east, centerY], options);\n  var cellWidth = xFraction * (east - west);\n  var yFraction = cellSide * 2 / distance([centerX, south], [centerX, north], options);\n  var cellHeight = yFraction * (north - south);\n  var radius = cellWidth / 2;\n  var hex_width = radius * 2;\n  var hex_height = Math.sqrt(3) / 2 * cellHeight;\n  var box_width = east - west;\n  var box_height = north - south;\n  var x_interval = 3 / 4 * hex_width;\n  var y_interval = hex_height; // adjust box_width so all hexagons will be inside the bbox\n\n  var x_span = (box_width - hex_width) / (hex_width - radius / 2);\n  var x_count = Math.floor(x_span);\n  var x_adjust = (x_count * x_interval - radius / 2 - box_width) / 2 - radius / 2 + x_interval / 2; // adjust box_height so all hexagons will be inside the bbox\n\n  var y_count = Math.floor((box_height - hex_height) / hex_height);\n  var y_adjust = (box_height - y_count * hex_height) / 2;\n  var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;\n\n  if (hasOffsetY) {\n    y_adjust -= hex_height / 4;\n  } // Precompute cosines and sines of angles used in hexagon creation for performance gain\n\n\n  var cosines = [];\n  var sines = [];\n\n  for (var i = 0; i < 6; i++) {\n    var angle = 2 * Math.PI / 6 * i;\n    cosines.push(Math.cos(angle));\n    sines.push(Math.sin(angle));\n  }\n\n  var results = [];\n\n  for (var x = 0; x <= x_count; x++) {\n    for (var y = 0; y <= y_count; y++) {\n      var isOdd = x % 2 === 1;\n      if (y === 0 && isOdd) continue;\n      if (y === 0 && hasOffsetY) continue;\n      var center_x = x * x_interval + west - x_adjust;\n      var center_y = y * y_interval + south + y_adjust;\n\n      if (isOdd) {\n        center_y -= hex_height / 2;\n      }\n\n      if (options.triangles === true) {\n        hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines).forEach(function (triangle) {\n          if (options.mask) {\n            if (intersect(options.mask, triangle)) results.push(triangle);\n          } else {\n            results.push(triangle);\n          }\n        });\n      } else {\n        var hex = hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines);\n\n        if (options.mask) {\n          if (intersect(options.mask, hex)) results.push(hex);\n        } else {\n          results.push(hex);\n        }\n      }\n    }\n  }\n\n  return featureCollection(results);\n}\n/**\r\n * Creates hexagon\r\n *\r\n * @private\r\n * @param {Array<number>} center of the hexagon\r\n * @param {number} rx half hexagon width\r\n * @param {number} ry half hexagon height\r\n * @param {Object} properties passed to each hexagon\r\n * @param {Array<number>} cosines precomputed\r\n * @param {Array<number>} sines precomputed\r\n * @returns {Feature<Polygon>} hexagon\r\n */\n\n\nfunction hexagon(center, rx, ry, properties, cosines, sines) {\n  var vertices = [];\n\n  for (var i = 0; i < 6; i++) {\n    var x = center[0] + rx * cosines[i];\n    var y = center[1] + ry * sines[i];\n    vertices.push([x, y]);\n  } //first and last vertex must be the same\n\n\n  vertices.push(vertices[0].slice());\n  return polygon([vertices], properties);\n}\n/**\r\n * Creates triangles composing an hexagon\r\n *\r\n * @private\r\n * @param {Array<number>} center of the hexagon\r\n * @param {number} rx half triangle width\r\n * @param {number} ry half triangle height\r\n * @param {Object} properties passed to each triangle\r\n * @param {Array<number>} cosines precomputed\r\n * @param {Array<number>} sines precomputed\r\n * @returns {Array<Feature<Polygon>>} triangles\r\n */\n\n\nfunction hexTriangles(center, rx, ry, properties, cosines, sines) {\n  var triangles = [];\n\n  for (var i = 0; i < 6; i++) {\n    var vertices = [];\n    vertices.push(center);\n    vertices.push([center[0] + rx * cosines[i], center[1] + ry * sines[i]]);\n    vertices.push([center[0] + rx * cosines[(i + 1) % 6], center[1] + ry * sines[(i + 1) % 6]]);\n    vertices.push(center);\n    triangles.push(polygon([vertices], properties));\n  }\n\n  return triangles;\n}\n\nexport default hexGrid;","map":{"version":3,"names":["distance","intersect","polygon","featureCollection","hexGrid","bbox","cellSide","options","clonedProperties","JSON","stringify","properties","west","south","east","north","centerY","centerX","xFraction","cellWidth","yFraction","cellHeight","radius","hex_width","hex_height","Math","sqrt","box_width","box_height","x_interval","y_interval","x_span","x_count","floor","x_adjust","y_count","y_adjust","hasOffsetY","cosines","sines","i","angle","PI","push","cos","sin","results","x","y","isOdd","center_x","center_y","triangles","hexTriangles","parse","forEach","triangle","mask","hex","hexagon","center","rx","ry","vertices","slice"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/hex-grid/dist/es/index.js"],"sourcesContent":["import distance from \"@turf/distance\";\r\nimport intersect from \"@turf/intersect\";\r\nimport { polygon, featureCollection, } from \"@turf/helpers\";\r\n/**\r\n * Takes a bounding box and the diameter of the cell and returns a {@link FeatureCollection} of flat-topped\r\n * hexagons or triangles ({@link Polygon} features) aligned in an \"odd-q\" vertical grid as\r\n * described in [Hexagonal Grids](http://www.redblobgames.com/grids/hexagons/).\r\n *\r\n * @name hexGrid\r\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\r\n * @param {number} cellSide length of the side of the the hexagons or triangles, in units. It will also coincide with the\r\n * radius of the circumcircle of the hexagons.\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {string} [options.units='kilometers'] used in calculating cell size, can be degrees, radians, miles, or kilometers\r\n * @param {Object} [options.properties={}] passed to each hexagon or triangle of the grid\r\n * @param {Feature<Polygon>} [options.mask] if passed a Polygon or MultiPolygon, the grid Points will be created only inside it\r\n * @param {boolean} [options.triangles=false] whether to return as triangles instead of hexagons\r\n * @returns {FeatureCollection<Polygon>} a hexagonal grid\r\n * @example\r\n * var bbox = [-96,31,-84,40];\r\n * var cellSide = 50;\r\n * var options = {units: 'miles'};\r\n *\r\n * var hexgrid = turf.hexGrid(bbox, cellSide, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [hexgrid];\r\n */\r\nfunction hexGrid(bbox, cellSide, options) {\r\n    if (options === void 0) { options = {}; }\r\n    // Issue => https://github.com/Turfjs/turf/issues/1284\r\n    var clonedProperties = JSON.stringify(options.properties || {});\r\n    var west = bbox[0], south = bbox[1], east = bbox[2], north = bbox[3];\r\n    var centerY = (south + north) / 2;\r\n    var centerX = (west + east) / 2;\r\n    // https://github.com/Turfjs/turf/issues/758\r\n    var xFraction = (cellSide * 2) / distance([west, centerY], [east, centerY], options);\r\n    var cellWidth = xFraction * (east - west);\r\n    var yFraction = (cellSide * 2) / distance([centerX, south], [centerX, north], options);\r\n    var cellHeight = yFraction * (north - south);\r\n    var radius = cellWidth / 2;\r\n    var hex_width = radius * 2;\r\n    var hex_height = (Math.sqrt(3) / 2) * cellHeight;\r\n    var box_width = east - west;\r\n    var box_height = north - south;\r\n    var x_interval = (3 / 4) * hex_width;\r\n    var y_interval = hex_height;\r\n    // adjust box_width so all hexagons will be inside the bbox\r\n    var x_span = (box_width - hex_width) / (hex_width - radius / 2);\r\n    var x_count = Math.floor(x_span);\r\n    var x_adjust = (x_count * x_interval - radius / 2 - box_width) / 2 -\r\n        radius / 2 +\r\n        x_interval / 2;\r\n    // adjust box_height so all hexagons will be inside the bbox\r\n    var y_count = Math.floor((box_height - hex_height) / hex_height);\r\n    var y_adjust = (box_height - y_count * hex_height) / 2;\r\n    var hasOffsetY = y_count * hex_height - box_height > hex_height / 2;\r\n    if (hasOffsetY) {\r\n        y_adjust -= hex_height / 4;\r\n    }\r\n    // Precompute cosines and sines of angles used in hexagon creation for performance gain\r\n    var cosines = [];\r\n    var sines = [];\r\n    for (var i = 0; i < 6; i++) {\r\n        var angle = ((2 * Math.PI) / 6) * i;\r\n        cosines.push(Math.cos(angle));\r\n        sines.push(Math.sin(angle));\r\n    }\r\n    var results = [];\r\n    for (var x = 0; x <= x_count; x++) {\r\n        for (var y = 0; y <= y_count; y++) {\r\n            var isOdd = x % 2 === 1;\r\n            if (y === 0 && isOdd)\r\n                continue;\r\n            if (y === 0 && hasOffsetY)\r\n                continue;\r\n            var center_x = x * x_interval + west - x_adjust;\r\n            var center_y = y * y_interval + south + y_adjust;\r\n            if (isOdd) {\r\n                center_y -= hex_height / 2;\r\n            }\r\n            if (options.triangles === true) {\r\n                hexTriangles([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines).forEach(function (triangle) {\r\n                    if (options.mask) {\r\n                        if (intersect(options.mask, triangle))\r\n                            results.push(triangle);\r\n                    }\r\n                    else {\r\n                        results.push(triangle);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                var hex = hexagon([center_x, center_y], cellWidth / 2, cellHeight / 2, JSON.parse(clonedProperties), cosines, sines);\r\n                if (options.mask) {\r\n                    if (intersect(options.mask, hex))\r\n                        results.push(hex);\r\n                }\r\n                else {\r\n                    results.push(hex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return featureCollection(results);\r\n}\r\n/**\r\n * Creates hexagon\r\n *\r\n * @private\r\n * @param {Array<number>} center of the hexagon\r\n * @param {number} rx half hexagon width\r\n * @param {number} ry half hexagon height\r\n * @param {Object} properties passed to each hexagon\r\n * @param {Array<number>} cosines precomputed\r\n * @param {Array<number>} sines precomputed\r\n * @returns {Feature<Polygon>} hexagon\r\n */\r\nfunction hexagon(center, rx, ry, properties, cosines, sines) {\r\n    var vertices = [];\r\n    for (var i = 0; i < 6; i++) {\r\n        var x = center[0] + rx * cosines[i];\r\n        var y = center[1] + ry * sines[i];\r\n        vertices.push([x, y]);\r\n    }\r\n    //first and last vertex must be the same\r\n    vertices.push(vertices[0].slice());\r\n    return polygon([vertices], properties);\r\n}\r\n/**\r\n * Creates triangles composing an hexagon\r\n *\r\n * @private\r\n * @param {Array<number>} center of the hexagon\r\n * @param {number} rx half triangle width\r\n * @param {number} ry half triangle height\r\n * @param {Object} properties passed to each triangle\r\n * @param {Array<number>} cosines precomputed\r\n * @param {Array<number>} sines precomputed\r\n * @returns {Array<Feature<Polygon>>} triangles\r\n */\r\nfunction hexTriangles(center, rx, ry, properties, cosines, sines) {\r\n    var triangles = [];\r\n    for (var i = 0; i < 6; i++) {\r\n        var vertices = [];\r\n        vertices.push(center);\r\n        vertices.push([center[0] + rx * cosines[i], center[1] + ry * sines[i]]);\r\n        vertices.push([\r\n            center[0] + rx * cosines[(i + 1) % 6],\r\n            center[1] + ry * sines[(i + 1) % 6],\r\n        ]);\r\n        vertices.push(center);\r\n        triangles.push(polygon([vertices], properties));\r\n    }\r\n    return triangles;\r\n}\r\nexport default hexGrid;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}