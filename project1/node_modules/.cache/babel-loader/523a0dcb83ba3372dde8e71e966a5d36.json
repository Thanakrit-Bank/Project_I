{"ast":null,"code":"import cleanCoords from '@turf/clean-coords';\nimport clone from '@turf/clone';\nimport { geomEach } from '@turf/meta';\nimport { isObject } from '@turf/helpers';\n/*\r\n (c) 2013, Vladimir Agafonkin\r\n Simplify.js, a high-performance JS polyline simplification library\r\n mourner.github.io/simplify-js\r\n*/\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n// square distance between 2 points\n\nfunction getSqDist(p1, p2) {\n  var dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n  return dx * dx + dy * dy;\n} // square distance from a point to a segment\n\n\nfunction getSqSegDist(p, p1, p2) {\n  var x = p1.x,\n      y = p1.y,\n      dx = p2.x - x,\n      dy = p2.y - y;\n\n  if (dx !== 0 || dy !== 0) {\n    var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2.x;\n      y = p2.y;\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p.x - x;\n  dy = p.y - y;\n  return dx * dx + dy * dy;\n} // rest of the code doesn't care about point format\n// basic distance-based simplification\n\n\nfunction simplifyRadialDist(points, sqTolerance) {\n  var prevPoint = points[0],\n      newPoints = [prevPoint],\n      point;\n\n  for (var i = 1, len = points.length; i < len; i++) {\n    point = points[i];\n\n    if (getSqDist(point, prevPoint) > sqTolerance) {\n      newPoints.push(point);\n      prevPoint = point;\n    }\n  }\n\n  if (prevPoint !== point) newPoints.push(point);\n  return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n  var maxSqDist = sqTolerance,\n      index;\n\n  for (var i = first + 1; i < last; i++) {\n    var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n    simplified.push(points[index]);\n    if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n  }\n} // simplification using Ramer-Douglas-Peucker algorithm\n\n\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n  var last = points.length - 1;\n  var simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n  return simplified;\n} // both algorithms combined for awesome performance\n\n\nfunction simplify(points, tolerance, highestQuality) {\n  if (points.length <= 2) return points;\n  var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n  points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n  points = simplifyDouglasPeucker(points, sqTolerance);\n  return points;\n}\n/**\r\n * Takes a {@link GeoJSON} object and returns a simplified version. Internally uses\r\n * [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification using the Ramer-Douglas-Peucker algorithm.\r\n *\r\n * @name simplify\r\n * @param {GeoJSON} geojson object to be simplified\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {number} [options.tolerance=1] simplification tolerance\r\n * @param {boolean} [options.highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\r\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\r\n * @returns {GeoJSON} a simplified GeoJSON\r\n * @example\r\n * var geojson = turf.polygon([[\r\n *   [-70.603637, -33.399918],\r\n *   [-70.614624, -33.395332],\r\n *   [-70.639343, -33.392466],\r\n *   [-70.659942, -33.394759],\r\n *   [-70.683975, -33.404504],\r\n *   [-70.697021, -33.419406],\r\n *   [-70.701141, -33.434306],\r\n *   [-70.700454, -33.446339],\r\n *   [-70.694274, -33.458369],\r\n *   [-70.682601, -33.465816],\r\n *   [-70.668869, -33.472117],\r\n *   [-70.646209, -33.473835],\r\n *   [-70.624923, -33.472117],\r\n *   [-70.609817, -33.468107],\r\n *   [-70.595397, -33.458369],\r\n *   [-70.587158, -33.442901],\r\n *   [-70.587158, -33.426283],\r\n *   [-70.590591, -33.414248],\r\n *   [-70.594711, -33.406224],\r\n *   [-70.603637, -33.399918]\r\n * ]]);\r\n * var options = {tolerance: 0.01, highQuality: false};\r\n * var simplified = turf.simplify(geojson, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [geojson, simplified]\r\n */\n\n\nfunction simplify$1(geojson, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var tolerance = options.tolerance !== undefined ? options.tolerance : 1;\n  var highQuality = options.highQuality || false;\n  var mutate = options.mutate || false;\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (tolerance && tolerance < 0) throw new Error(\"invalid tolerance\"); // Clone geojson to avoid side effects\n\n  if (mutate !== true) geojson = clone(geojson);\n  geomEach(geojson, function (geom) {\n    simplifyGeom(geom, tolerance, highQuality);\n  });\n  return geojson;\n}\n/**\r\n * Simplifies a feature's coordinates\r\n *\r\n * @private\r\n * @param {Geometry} geometry to be simplified\r\n * @param {number} [tolerance=1] simplification tolerance\r\n * @param {boolean} [highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\r\n * @returns {Geometry} output\r\n */\n\n\nfunction simplifyGeom(geometry, tolerance, highQuality) {\n  var type = geometry.type; // \"unsimplyfiable\" geometry types\n\n  if (type === \"Point\" || type === \"MultiPoint\") return geometry; // Remove any extra coordinates\n\n  cleanCoords(geometry, true);\n  var coordinates = geometry.coordinates;\n\n  switch (type) {\n    case \"LineString\":\n      geometry[\"coordinates\"] = simplifyLine(coordinates, tolerance, highQuality);\n      break;\n\n    case \"MultiLineString\":\n      geometry[\"coordinates\"] = coordinates.map(function (lines) {\n        return simplifyLine(lines, tolerance, highQuality);\n      });\n      break;\n\n    case \"Polygon\":\n      geometry[\"coordinates\"] = simplifyPolygon(coordinates, tolerance, highQuality);\n      break;\n\n    case \"MultiPolygon\":\n      geometry[\"coordinates\"] = coordinates.map(function (rings) {\n        return simplifyPolygon(rings, tolerance, highQuality);\n      });\n  }\n\n  return geometry;\n}\n/**\r\n * Simplifies the coordinates of a LineString with simplify-js\r\n *\r\n * @private\r\n * @param {Array<number>} coordinates to be processed\r\n * @param {number} tolerance simplification tolerance\r\n * @param {boolean} highQuality whether or not to spend more time to create a higher-quality\r\n * @returns {Array<Array<number>>} simplified coords\r\n */\n\n\nfunction simplifyLine(coordinates, tolerance, highQuality) {\n  return simplify(coordinates.map(function (coord) {\n    return {\n      x: coord[0],\n      y: coord[1],\n      z: coord[2]\n    };\n  }), tolerance, highQuality).map(function (coords) {\n    return coords.z ? [coords.x, coords.y, coords.z] : [coords.x, coords.y];\n  });\n}\n/**\r\n * Simplifies the coordinates of a Polygon with simplify-js\r\n *\r\n * @private\r\n * @param {Array<number>} coordinates to be processed\r\n * @param {number} tolerance simplification tolerance\r\n * @param {boolean} highQuality whether or not to spend more time to create a higher-quality\r\n * @returns {Array<Array<Array<number>>>} simplified coords\r\n */\n\n\nfunction simplifyPolygon(coordinates, tolerance, highQuality) {\n  return coordinates.map(function (ring) {\n    var pts = ring.map(function (coord) {\n      return {\n        x: coord[0],\n        y: coord[1]\n      };\n    });\n\n    if (pts.length < 4) {\n      throw new Error(\"invalid polygon\");\n    }\n\n    var simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {\n      return [coords.x, coords.y];\n    }); //remove 1 percent of tolerance until enough points to make a triangle\n\n    while (!checkValidity(simpleRing)) {\n      tolerance -= tolerance * 0.01;\n      simpleRing = simplify(pts, tolerance, highQuality).map(function (coords) {\n        return [coords.x, coords.y];\n      });\n    }\n\n    if (simpleRing[simpleRing.length - 1][0] !== simpleRing[0][0] || simpleRing[simpleRing.length - 1][1] !== simpleRing[0][1]) {\n      simpleRing.push(simpleRing[0]);\n    }\n\n    return simpleRing;\n  });\n}\n/**\r\n * Returns true if ring has at least 3 coordinates and its first coordinate is the same as its last\r\n *\r\n * @private\r\n * @param {Array<number>} ring coordinates to be checked\r\n * @returns {boolean} true if valid\r\n */\n\n\nfunction checkValidity(ring) {\n  if (ring.length < 3) return false; //if the last point is the same as the first, it's not a triangle\n\n  return !(ring.length === 3 && ring[2][0] === ring[0][0] && ring[2][1] === ring[0][1]);\n}\n\nexport default simplify$1;","map":{"version":3,"names":["cleanCoords","clone","geomEach","isObject","getSqDist","p1","p2","dx","x","dy","y","getSqSegDist","p","t","simplifyRadialDist","points","sqTolerance","prevPoint","newPoints","point","i","len","length","push","simplifyDPStep","first","last","simplified","maxSqDist","index","sqDist","simplifyDouglasPeucker","simplify","tolerance","highestQuality","undefined","simplify$1","geojson","options","Error","highQuality","mutate","geom","simplifyGeom","geometry","type","coordinates","simplifyLine","map","lines","simplifyPolygon","rings","coord","z","coords","ring","pts","simpleRing","checkValidity"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/simplify/dist/es/index.js"],"sourcesContent":["import cleanCoords from '@turf/clean-coords';\r\nimport clone from '@turf/clone';\r\nimport { geomEach } from '@turf/meta';\r\nimport { isObject } from '@turf/helpers';\r\n\r\n/*\r\n (c) 2013, Vladimir Agafonkin\r\n Simplify.js, a high-performance JS polyline simplification library\r\n mourner.github.io/simplify-js\r\n*/\r\n\r\n// to suit your point format, run search/replace for '.x' and '.y';\r\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\r\n\r\n// square distance between 2 points\r\nfunction getSqDist(p1, p2) {\r\n  var dx = p1.x - p2.x,\r\n    dy = p1.y - p2.y;\r\n\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n// square distance from a point to a segment\r\nfunction getSqSegDist(p, p1, p2) {\r\n  var x = p1.x,\r\n    y = p1.y,\r\n    dx = p2.x - x,\r\n    dy = p2.y - y;\r\n\r\n  if (dx !== 0 || dy !== 0) {\r\n    var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\r\n\r\n    if (t > 1) {\r\n      x = p2.x;\r\n      y = p2.y;\r\n    } else if (t > 0) {\r\n      x += dx * t;\r\n      y += dy * t;\r\n    }\r\n  }\r\n\r\n  dx = p.x - x;\r\n  dy = p.y - y;\r\n\r\n  return dx * dx + dy * dy;\r\n}\r\n// rest of the code doesn't care about point format\r\n\r\n// basic distance-based simplification\r\nfunction simplifyRadialDist(points, sqTolerance) {\r\n  var prevPoint = points[0],\r\n    newPoints = [prevPoint],\r\n    point;\r\n\r\n  for (var i = 1, len = points.length; i < len; i++) {\r\n    point = points[i];\r\n\r\n    if (getSqDist(point, prevPoint) > sqTolerance) {\r\n      newPoints.push(point);\r\n      prevPoint = point;\r\n    }\r\n  }\r\n\r\n  if (prevPoint !== point) newPoints.push(point);\r\n\r\n  return newPoints;\r\n}\r\n\r\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\r\n  var maxSqDist = sqTolerance,\r\n    index;\r\n\r\n  for (var i = first + 1; i < last; i++) {\r\n    var sqDist = getSqSegDist(points[i], points[first], points[last]);\r\n\r\n    if (sqDist > maxSqDist) {\r\n      index = i;\r\n      maxSqDist = sqDist;\r\n    }\r\n  }\r\n\r\n  if (maxSqDist > sqTolerance) {\r\n    if (index - first > 1)\r\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\r\n    simplified.push(points[index]);\r\n    if (last - index > 1)\r\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\r\n  }\r\n}\r\n\r\n// simplification using Ramer-Douglas-Peucker algorithm\r\nfunction simplifyDouglasPeucker(points, sqTolerance) {\r\n  var last = points.length - 1;\r\n\r\n  var simplified = [points[0]];\r\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\r\n  simplified.push(points[last]);\r\n\r\n  return simplified;\r\n}\r\n\r\n// both algorithms combined for awesome performance\r\nfunction simplify(points, tolerance, highestQuality) {\r\n  if (points.length <= 2) return points;\r\n\r\n  var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\r\n\r\n  points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\r\n  points = simplifyDouglasPeucker(points, sqTolerance);\r\n\r\n  return points;\r\n}\r\n\r\n/**\r\n * Takes a {@link GeoJSON} object and returns a simplified version. Internally uses\r\n * [simplify-js](http://mourner.github.io/simplify-js/) to perform simplification using the Ramer-Douglas-Peucker algorithm.\r\n *\r\n * @name simplify\r\n * @param {GeoJSON} geojson object to be simplified\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {number} [options.tolerance=1] simplification tolerance\r\n * @param {boolean} [options.highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\r\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\r\n * @returns {GeoJSON} a simplified GeoJSON\r\n * @example\r\n * var geojson = turf.polygon([[\r\n *   [-70.603637, -33.399918],\r\n *   [-70.614624, -33.395332],\r\n *   [-70.639343, -33.392466],\r\n *   [-70.659942, -33.394759],\r\n *   [-70.683975, -33.404504],\r\n *   [-70.697021, -33.419406],\r\n *   [-70.701141, -33.434306],\r\n *   [-70.700454, -33.446339],\r\n *   [-70.694274, -33.458369],\r\n *   [-70.682601, -33.465816],\r\n *   [-70.668869, -33.472117],\r\n *   [-70.646209, -33.473835],\r\n *   [-70.624923, -33.472117],\r\n *   [-70.609817, -33.468107],\r\n *   [-70.595397, -33.458369],\r\n *   [-70.587158, -33.442901],\r\n *   [-70.587158, -33.426283],\r\n *   [-70.590591, -33.414248],\r\n *   [-70.594711, -33.406224],\r\n *   [-70.603637, -33.399918]\r\n * ]]);\r\n * var options = {tolerance: 0.01, highQuality: false};\r\n * var simplified = turf.simplify(geojson, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [geojson, simplified]\r\n */\r\nfunction simplify$1(geojson, options) {\r\n  // Optional parameters\r\n  options = options || {};\r\n  if (!isObject(options)) throw new Error(\"options is invalid\");\r\n  var tolerance = options.tolerance !== undefined ? options.tolerance : 1;\r\n  var highQuality = options.highQuality || false;\r\n  var mutate = options.mutate || false;\r\n\r\n  if (!geojson) throw new Error(\"geojson is required\");\r\n  if (tolerance && tolerance < 0) throw new Error(\"invalid tolerance\");\r\n\r\n  // Clone geojson to avoid side effects\r\n  if (mutate !== true) geojson = clone(geojson);\r\n\r\n  geomEach(geojson, function (geom) {\r\n    simplifyGeom(geom, tolerance, highQuality);\r\n  });\r\n  return geojson;\r\n}\r\n\r\n/**\r\n * Simplifies a feature's coordinates\r\n *\r\n * @private\r\n * @param {Geometry} geometry to be simplified\r\n * @param {number} [tolerance=1] simplification tolerance\r\n * @param {boolean} [highQuality=false] whether or not to spend more time to create a higher-quality simplification with a different algorithm\r\n * @returns {Geometry} output\r\n */\r\nfunction simplifyGeom(geometry, tolerance, highQuality) {\r\n  var type = geometry.type;\r\n\r\n  // \"unsimplyfiable\" geometry types\r\n  if (type === \"Point\" || type === \"MultiPoint\") return geometry;\r\n\r\n  // Remove any extra coordinates\r\n  cleanCoords(geometry, true);\r\n\r\n  var coordinates = geometry.coordinates;\r\n  switch (type) {\r\n    case \"LineString\":\r\n      geometry[\"coordinates\"] = simplifyLine(\r\n        coordinates,\r\n        tolerance,\r\n        highQuality\r\n      );\r\n      break;\r\n    case \"MultiLineString\":\r\n      geometry[\"coordinates\"] = coordinates.map(function (lines) {\r\n        return simplifyLine(lines, tolerance, highQuality);\r\n      });\r\n      break;\r\n    case \"Polygon\":\r\n      geometry[\"coordinates\"] = simplifyPolygon(\r\n        coordinates,\r\n        tolerance,\r\n        highQuality\r\n      );\r\n      break;\r\n    case \"MultiPolygon\":\r\n      geometry[\"coordinates\"] = coordinates.map(function (rings) {\r\n        return simplifyPolygon(rings, tolerance, highQuality);\r\n      });\r\n  }\r\n  return geometry;\r\n}\r\n\r\n/**\r\n * Simplifies the coordinates of a LineString with simplify-js\r\n *\r\n * @private\r\n * @param {Array<number>} coordinates to be processed\r\n * @param {number} tolerance simplification tolerance\r\n * @param {boolean} highQuality whether or not to spend more time to create a higher-quality\r\n * @returns {Array<Array<number>>} simplified coords\r\n */\r\nfunction simplifyLine(coordinates, tolerance, highQuality) {\r\n  return simplify(\r\n    coordinates.map(function (coord) {\r\n      return { x: coord[0], y: coord[1], z: coord[2] };\r\n    }),\r\n    tolerance,\r\n    highQuality\r\n  ).map(function (coords) {\r\n    return coords.z ? [coords.x, coords.y, coords.z] : [coords.x, coords.y];\r\n  });\r\n}\r\n\r\n/**\r\n * Simplifies the coordinates of a Polygon with simplify-js\r\n *\r\n * @private\r\n * @param {Array<number>} coordinates to be processed\r\n * @param {number} tolerance simplification tolerance\r\n * @param {boolean} highQuality whether or not to spend more time to create a higher-quality\r\n * @returns {Array<Array<Array<number>>>} simplified coords\r\n */\r\nfunction simplifyPolygon(coordinates, tolerance, highQuality) {\r\n  return coordinates.map(function (ring) {\r\n    var pts = ring.map(function (coord) {\r\n      return { x: coord[0], y: coord[1] };\r\n    });\r\n    if (pts.length < 4) {\r\n      throw new Error(\"invalid polygon\");\r\n    }\r\n    var simpleRing = simplify(pts, tolerance, highQuality).map(function (\r\n      coords\r\n    ) {\r\n      return [coords.x, coords.y];\r\n    });\r\n    //remove 1 percent of tolerance until enough points to make a triangle\r\n    while (!checkValidity(simpleRing)) {\r\n      tolerance -= tolerance * 0.01;\r\n      simpleRing = simplify(pts, tolerance, highQuality).map(function (\r\n        coords\r\n      ) {\r\n        return [coords.x, coords.y];\r\n      });\r\n    }\r\n    if (\r\n      simpleRing[simpleRing.length - 1][0] !== simpleRing[0][0] ||\r\n      simpleRing[simpleRing.length - 1][1] !== simpleRing[0][1]\r\n    ) {\r\n      simpleRing.push(simpleRing[0]);\r\n    }\r\n    return simpleRing;\r\n  });\r\n}\r\n\r\n/**\r\n * Returns true if ring has at least 3 coordinates and its first coordinate is the same as its last\r\n *\r\n * @private\r\n * @param {Array<number>} ring coordinates to be checked\r\n * @returns {boolean} true if valid\r\n */\r\nfunction checkValidity(ring) {\r\n  if (ring.length < 3) return false;\r\n  //if the last point is the same as the first, it's not a triangle\r\n  return !(\r\n    ring.length === 3 &&\r\n    ring[2][0] === ring[0][0] &&\r\n    ring[2][1] === ring[0][1]\r\n  );\r\n}\r\n\r\nexport default simplify$1;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}