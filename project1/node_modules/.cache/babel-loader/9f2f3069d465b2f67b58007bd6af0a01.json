{"ast":null,"code":"import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport { clipExtent } from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport { degrees, radians, sqrt } from \"../math\";\nimport { rotateRadians } from \"../rotation\";\nimport { transformer } from \"../transform\";\nimport { fitExtent, fitSize } from \"./fit\";\nimport resample from \"./resample\";\nvar transformRadians = transformer({\n  point: function point(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\nexport default function projection(project) {\n  return projectionMutator(function () {\n    return project;\n  })();\n}\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150,\n      // scale\n  x = 480,\n      y = 250,\n      // translate\n  dx,\n      dy,\n      lambda = 0,\n      phi = 0,\n      // center\n  deltaLambda = 0,\n      deltaPhi = 0,\n      deltaGamma = 0,\n      rotate,\n      projectRotate,\n      // rotate\n  theta = null,\n      preclip = clipAntimeridian,\n      // clip angle\n  x0 = null,\n      y0,\n      x1,\n      y1,\n      postclip = identity,\n      // clip extent\n  delta2 = 0.5,\n      projectResample = resample(projectTransform, delta2),\n      // precision\n  cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n\n  projection.clipAngle = function (_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function (_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function (_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function (_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function (_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function (extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function (size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function () {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}","map":{"version":3,"names":["clipAntimeridian","clipCircle","clipExtent","compose","identity","degrees","radians","sqrt","rotateRadians","transformer","fitExtent","fitSize","resample","transformRadians","point","x","y","stream","projection","project","projectionMutator","projectAt","k","dx","dy","lambda","phi","deltaLambda","deltaPhi","deltaGamma","rotate","projectRotate","theta","preclip","x0","y0","x1","y1","postclip","delta2","projectResample","projectTransform","cache","cacheStream","invert","clipAngle","_","arguments","length","reset","scale","recenter","translate","center","precision","extent","object","size","apply"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/d3-geo/src/projection/index.js"],"sourcesContent":["import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport {clipExtent} from \"../clip/extent\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {degrees, radians, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}