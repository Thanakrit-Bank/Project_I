{"ast":null,"code":"import { hasOwnProperty } from \"./object.js\"; // Extracts the lines and rings from the specified hash of geometry objects.\n//\n// Returns an object with three properties:\n//\n// * coordinates - shared buffer of [x, y] coordinates\n// * lines - lines extracted from the hash, of the form [start, end]\n// * rings - rings extracted from the hash, of the form [start, end]\n//\n// For each ring or line, start and end represent inclusive indexes into the\n// coordinates buffer. For rings (and closed lines), coordinates[start] equals\n// coordinates[end].\n//\n// For each line or polygon geometry in the input hash, including nested\n// geometries as in geometry collections, the `coordinates` array is replaced\n// with an equivalent `arcs` array that, for each line (for line string\n// geometries) or ring (for polygon geometries), points to one of the above\n// lines or rings.\n\nexport default function (objects) {\n  var index = -1,\n      lines = [],\n      rings = [],\n      coordinates = [];\n\n  function extractGeometry(geometry) {\n    if (geometry && hasOwnProperty.call(extractGeometryType, geometry.type)) extractGeometryType[geometry.type](geometry);\n  }\n\n  var extractGeometryType = {\n    GeometryCollection: function GeometryCollection(o) {\n      o.geometries.forEach(extractGeometry);\n    },\n    LineString: function LineString(o) {\n      o.arcs = extractLine(o.arcs);\n    },\n    MultiLineString: function MultiLineString(o) {\n      o.arcs = o.arcs.map(extractLine);\n    },\n    Polygon: function Polygon(o) {\n      o.arcs = o.arcs.map(extractRing);\n    },\n    MultiPolygon: function MultiPolygon(o) {\n      o.arcs = o.arcs.map(extractMultiRing);\n    }\n  };\n\n  function extractLine(line) {\n    for (var i = 0, n = line.length; i < n; ++i) {\n      coordinates[++index] = line[i];\n    }\n\n    var arc = {\n      0: index - n + 1,\n      1: index\n    };\n    lines.push(arc);\n    return arc;\n  }\n\n  function extractRing(ring) {\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      coordinates[++index] = ring[i];\n    }\n\n    var arc = {\n      0: index - n + 1,\n      1: index\n    };\n    rings.push(arc);\n    return arc;\n  }\n\n  function extractMultiRing(rings) {\n    return rings.map(extractRing);\n  }\n\n  for (var key in objects) {\n    extractGeometry(objects[key]);\n  }\n\n  return {\n    type: \"Topology\",\n    coordinates: coordinates,\n    lines: lines,\n    rings: rings,\n    objects: objects\n  };\n}","map":{"version":3,"names":["hasOwnProperty","objects","index","lines","rings","coordinates","extractGeometry","geometry","call","extractGeometryType","type","GeometryCollection","o","geometries","forEach","LineString","arcs","extractLine","MultiLineString","map","Polygon","extractRing","MultiPolygon","extractMultiRing","line","i","n","length","arc","push","ring","key"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/topojson-server/src/extract.js"],"sourcesContent":["import {hasOwnProperty} from \"./object.js\";\n\n// Extracts the lines and rings from the specified hash of geometry objects.\n//\n// Returns an object with three properties:\n//\n// * coordinates - shared buffer of [x, y] coordinates\n// * lines - lines extracted from the hash, of the form [start, end]\n// * rings - rings extracted from the hash, of the form [start, end]\n//\n// For each ring or line, start and end represent inclusive indexes into the\n// coordinates buffer. For rings (and closed lines), coordinates[start] equals\n// coordinates[end].\n//\n// For each line or polygon geometry in the input hash, including nested\n// geometries as in geometry collections, the `coordinates` array is replaced\n// with an equivalent `arcs` array that, for each line (for line string\n// geometries) or ring (for polygon geometries), points to one of the above\n// lines or rings.\nexport default function(objects) {\n  var index = -1,\n      lines = [],\n      rings = [],\n      coordinates = [];\n\n  function extractGeometry(geometry) {\n    if (geometry && hasOwnProperty.call(extractGeometryType, geometry.type)) extractGeometryType[geometry.type](geometry);\n  }\n\n  var extractGeometryType = {\n    GeometryCollection: function(o) { o.geometries.forEach(extractGeometry); },\n    LineString: function(o) { o.arcs = extractLine(o.arcs); },\n    MultiLineString: function(o) { o.arcs = o.arcs.map(extractLine); },\n    Polygon: function(o) { o.arcs = o.arcs.map(extractRing); },\n    MultiPolygon: function(o) { o.arcs = o.arcs.map(extractMultiRing); }\n  };\n\n  function extractLine(line) {\n    for (var i = 0, n = line.length; i < n; ++i) coordinates[++index] = line[i];\n    var arc = {0: index - n + 1, 1: index};\n    lines.push(arc);\n    return arc;\n  }\n\n  function extractRing(ring) {\n    for (var i = 0, n = ring.length; i < n; ++i) coordinates[++index] = ring[i];\n    var arc = {0: index - n + 1, 1: index};\n    rings.push(arc);\n    return arc;\n  }\n\n  function extractMultiRing(rings) {\n    return rings.map(extractRing);\n  }\n\n  for (var key in objects) {\n    extractGeometry(objects[key]);\n  }\n\n  return {\n    type: \"Topology\",\n    coordinates: coordinates,\n    lines: lines,\n    rings: rings,\n    objects: objects\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}