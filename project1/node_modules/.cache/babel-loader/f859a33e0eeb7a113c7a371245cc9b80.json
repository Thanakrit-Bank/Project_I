{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport { featureCollection, isNumber, isObject, lineString, point, polygon } from \"@turf/helpers\";\n/**\n * Returns a random position within a {@link bounding box}.\n *\n * @name randomPosition\n * @param {Array<number>} [bbox=[-180, -90, 180, 90]] a bounding box inside of which positions are placed.\n * @returns {Array<number>} Position [longitude, latitude]\n * @example\n * var position = turf.randomPosition([-180, -90, 180, 90])\n * // => position\n */\n\nexport function randomPosition(bbox) {\n  if (Array.isArray(bbox)) {\n    return coordInBBox(bbox);\n  }\n\n  if (bbox && bbox.bbox) {\n    return coordInBBox(bbox.bbox);\n  }\n\n  return [lon(), lat()];\n}\n/**\n * Returns a random {@link point}.\n *\n * @name randomPoint\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points\n * @example\n * var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n * // => points\n */\n\nexport function randomPoint(count, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (count === undefined || count === null) {\n    count = 1;\n  }\n\n  var features = [];\n\n  for (var i = 0; i < count; i++) {\n    features.push(point(randomPosition(options.bbox)));\n  }\n\n  return featureCollection(features);\n}\n/**\n * Returns a random {@link polygon}.\n *\n * @name randomPolygon\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_radial_length=10] is the maximum number of decimal degrees latitude or longitude that a\n * vertex can reach out of the center of the Polygon.\n * @returns {FeatureCollection<Polygon>} GeoJSON FeatureCollection of polygons\n * @example\n * var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n * // => polygons\n */\n\nexport function randomPolygon(count, options) {\n  if (options === void 0) {\n    options = {};\n  } // Default param\n\n\n  if (count === undefined || count === null) {\n    count = 1;\n  }\n\n  if (!isNumber(options.num_vertices) || options.num_vertices === undefined) {\n    options.num_vertices = 10;\n  }\n\n  if (!isNumber(options.max_radial_length) || options.max_radial_length === undefined) {\n    options.max_radial_length = 10;\n  }\n\n  var features = [];\n\n  var _loop_1 = function _loop_1(i) {\n    var vertices = [];\n\n    var circleOffsets = __spreadArrays(Array(options.num_vertices + 1)).map(Math.random); // Sum Offsets\n\n\n    circleOffsets.forEach(function (cur, index, arr) {\n      arr[index] = index > 0 ? cur + arr[index - 1] : cur;\n    }); // scaleOffsets\n\n    circleOffsets.forEach(function (cur) {\n      cur = cur * 2 * Math.PI / circleOffsets[circleOffsets.length - 1];\n      var radialScaler = Math.random();\n      vertices.push([radialScaler * (options.max_radial_length || 10) * Math.sin(cur), radialScaler * (options.max_radial_length || 10) * Math.cos(cur)]);\n    });\n    vertices[vertices.length - 1] = vertices[0]; // close the ring\n    // center the polygon around something\n\n    vertices = vertices.map(vertexToCoordinate(randomPosition(options.bbox)));\n    features.push(polygon([vertices]));\n  };\n\n  for (var i = 0; i < count; i++) {\n    _loop_1(i);\n  }\n\n  return featureCollection(features);\n}\n/**\n * Returns a random {@link linestring}.\n *\n * @name randomLineString\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_length=0.0001] is the maximum number of decimal degrees that a\n * vertex can be from its predecessor\n * @param {number} [options.max_rotation=Math.PI / 8] is the maximum number of radians that a\n * line segment can turn from the previous segment.\n * @returns {FeatureCollection<LineString>} GeoJSON FeatureCollection of linestrings\n * @example\n * var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n * // => lineStrings\n */\n\nexport function randomLineString(count, options) {\n  if (options === void 0) {\n    options = {};\n  } // Optional parameters\n\n\n  options = options || {};\n\n  if (!isObject(options)) {\n    throw new Error(\"options is invalid\");\n  }\n\n  var bbox = options.bbox;\n  var num_vertices = options.num_vertices;\n  var max_length = options.max_length;\n  var max_rotation = options.max_rotation;\n\n  if (count === undefined || count === null) {\n    count = 1;\n  } // Default parameters\n\n\n  if (!isNumber(num_vertices) || num_vertices === undefined || num_vertices < 2) {\n    num_vertices = 10;\n  }\n\n  if (!isNumber(max_length) || max_length === undefined) {\n    max_length = 0.0001;\n  }\n\n  if (!isNumber(max_rotation) || max_rotation === undefined) {\n    max_rotation = Math.PI / 8;\n  }\n\n  var features = [];\n\n  for (var i = 0; i < count; i++) {\n    var startingPoint = randomPosition(bbox);\n    var vertices = [startingPoint];\n\n    for (var j = 0; j < num_vertices - 1; j++) {\n      var priorAngle = j === 0 ? Math.random() * 2 * Math.PI : Math.tan((vertices[j][1] - vertices[j - 1][1]) / (vertices[j][0] - vertices[j - 1][0]));\n      var angle = priorAngle + (Math.random() - 0.5) * max_rotation * 2;\n      var distance = Math.random() * max_length;\n      vertices.push([vertices[j][0] + distance * Math.cos(angle), vertices[j][1] + distance * Math.sin(angle)]);\n    }\n\n    features.push(lineString(vertices));\n  }\n\n  return featureCollection(features);\n}\n\nfunction vertexToCoordinate(hub) {\n  return function (cur) {\n    return [cur[0] + hub[0], cur[1] + hub[1]];\n  };\n}\n\nfunction rnd() {\n  return Math.random() - 0.5;\n}\n\nfunction lon() {\n  return rnd() * 360;\n}\n\nfunction lat() {\n  return rnd() * 180;\n}\n\nfunction coordInBBox(bbox) {\n  return [Math.random() * (bbox[2] - bbox[0]) + bbox[0], Math.random() * (bbox[3] - bbox[1]) + bbox[1]];\n}","map":{"version":3,"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","featureCollection","isNumber","isObject","lineString","point","polygon","randomPosition","bbox","isArray","coordInBBox","lon","lat","randomPoint","count","options","undefined","features","push","randomPolygon","num_vertices","max_radial_length","_loop_1","vertices","circleOffsets","map","Math","random","forEach","cur","index","arr","PI","radialScaler","sin","cos","vertexToCoordinate","randomLineString","Error","max_length","max_rotation","startingPoint","priorAngle","tan","angle","distance","hub","rnd"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/random/dist/es/index.js"],"sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { featureCollection, isNumber, isObject, lineString, point, polygon, } from \"@turf/helpers\";\n/**\n * Returns a random position within a {@link bounding box}.\n *\n * @name randomPosition\n * @param {Array<number>} [bbox=[-180, -90, 180, 90]] a bounding box inside of which positions are placed.\n * @returns {Array<number>} Position [longitude, latitude]\n * @example\n * var position = turf.randomPosition([-180, -90, 180, 90])\n * // => position\n */\nexport function randomPosition(bbox) {\n    if (Array.isArray(bbox)) {\n        return coordInBBox(bbox);\n    }\n    if (bbox && bbox.bbox) {\n        return coordInBBox(bbox.bbox);\n    }\n    return [lon(), lat()];\n}\n/**\n * Returns a random {@link point}.\n *\n * @name randomPoint\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @returns {FeatureCollection<Point>} GeoJSON FeatureCollection of points\n * @example\n * var points = turf.randomPoint(25, {bbox: [-180, -90, 180, 90]})\n * // => points\n */\nexport function randomPoint(count, options) {\n    if (options === void 0) { options = {}; }\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        features.push(point(randomPosition(options.bbox)));\n    }\n    return featureCollection(features);\n}\n/**\n * Returns a random {@link polygon}.\n *\n * @name randomPolygon\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_radial_length=10] is the maximum number of decimal degrees latitude or longitude that a\n * vertex can reach out of the center of the Polygon.\n * @returns {FeatureCollection<Polygon>} GeoJSON FeatureCollection of polygons\n * @example\n * var polygons = turf.randomPolygon(25, {bbox: [-180, -90, 180, 90]})\n * // => polygons\n */\nexport function randomPolygon(count, options) {\n    if (options === void 0) { options = {}; }\n    // Default param\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    if (!isNumber(options.num_vertices) || options.num_vertices === undefined) {\n        options.num_vertices = 10;\n    }\n    if (!isNumber(options.max_radial_length) ||\n        options.max_radial_length === undefined) {\n        options.max_radial_length = 10;\n    }\n    var features = [];\n    var _loop_1 = function (i) {\n        var vertices = [];\n        var circleOffsets = __spreadArrays(Array(options.num_vertices + 1)).map(Math.random);\n        // Sum Offsets\n        circleOffsets.forEach(function (cur, index, arr) {\n            arr[index] = index > 0 ? cur + arr[index - 1] : cur;\n        });\n        // scaleOffsets\n        circleOffsets.forEach(function (cur) {\n            cur = (cur * 2 * Math.PI) / circleOffsets[circleOffsets.length - 1];\n            var radialScaler = Math.random();\n            vertices.push([\n                radialScaler * (options.max_radial_length || 10) * Math.sin(cur),\n                radialScaler * (options.max_radial_length || 10) * Math.cos(cur),\n            ]);\n        });\n        vertices[vertices.length - 1] = vertices[0]; // close the ring\n        // center the polygon around something\n        vertices = vertices.map(vertexToCoordinate(randomPosition(options.bbox)));\n        features.push(polygon([vertices]));\n    };\n    for (var i = 0; i < count; i++) {\n        _loop_1(i);\n    }\n    return featureCollection(features);\n}\n/**\n * Returns a random {@link linestring}.\n *\n * @name randomLineString\n * @param {number} [count=1] how many geometries will be generated\n * @param {Object} [options={}] Optional parameters\n * @param {Array<number>} [options.bbox=[-180, -90, 180, 90]] a bounding box inside of which geometries are placed.\n * @param {number} [options.num_vertices=10] is how many coordinates each LineString will contain.\n * @param {number} [options.max_length=0.0001] is the maximum number of decimal degrees that a\n * vertex can be from its predecessor\n * @param {number} [options.max_rotation=Math.PI / 8] is the maximum number of radians that a\n * line segment can turn from the previous segment.\n * @returns {FeatureCollection<LineString>} GeoJSON FeatureCollection of linestrings\n * @example\n * var lineStrings = turf.randomLineString(25, {bbox: [-180, -90, 180, 90]})\n * // => lineStrings\n */\nexport function randomLineString(count, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    options = options || {};\n    if (!isObject(options)) {\n        throw new Error(\"options is invalid\");\n    }\n    var bbox = options.bbox;\n    var num_vertices = options.num_vertices;\n    var max_length = options.max_length;\n    var max_rotation = options.max_rotation;\n    if (count === undefined || count === null) {\n        count = 1;\n    }\n    // Default parameters\n    if (!isNumber(num_vertices) ||\n        num_vertices === undefined ||\n        num_vertices < 2) {\n        num_vertices = 10;\n    }\n    if (!isNumber(max_length) || max_length === undefined) {\n        max_length = 0.0001;\n    }\n    if (!isNumber(max_rotation) || max_rotation === undefined) {\n        max_rotation = Math.PI / 8;\n    }\n    var features = [];\n    for (var i = 0; i < count; i++) {\n        var startingPoint = randomPosition(bbox);\n        var vertices = [startingPoint];\n        for (var j = 0; j < num_vertices - 1; j++) {\n            var priorAngle = j === 0\n                ? Math.random() * 2 * Math.PI\n                : Math.tan((vertices[j][1] - vertices[j - 1][1]) /\n                    (vertices[j][0] - vertices[j - 1][0]));\n            var angle = priorAngle + (Math.random() - 0.5) * max_rotation * 2;\n            var distance = Math.random() * max_length;\n            vertices.push([\n                vertices[j][0] + distance * Math.cos(angle),\n                vertices[j][1] + distance * Math.sin(angle),\n            ]);\n        }\n        features.push(lineString(vertices));\n    }\n    return featureCollection(features);\n}\nfunction vertexToCoordinate(hub) {\n    return function (cur) {\n        return [cur[0] + hub[0], cur[1] + hub[1]];\n    };\n}\nfunction rnd() {\n    return Math.random() - 0.5;\n}\nfunction lon() {\n    return rnd() * 360;\n}\nfunction lat() {\n    return rnd() * 180;\n}\nfunction coordInBBox(bbox) {\n    return [\n        Math.random() * (bbox[2] - bbox[0]) + bbox[0],\n        Math.random() * (bbox[3] - bbox[1]) + bbox[1],\n    ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}