{"ast":null,"code":"import _slicedToArray from \"D:/Project/Mix_Project/Project_I/project1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\Project\\\\Mix_Project\\\\Project_I\\\\project1\\\\src\\\\components\\\\GridData.jsx\",\n    _s = $RefreshSig$();\n\nimport { GeoJSON, Popup, FeatureGroup } from 'react-leaflet';\nimport React, { useState, useEffect } from 'react';\nimport legendData from './../data/dataLegend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GridData(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var url_grid = 'http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02');\n  var interval = (legendData.spei.max - legendData.spei.min) / 8;\n  var twoDegit = parseFloat(interval).toFixed(2);\n  useEffect(function () {\n    setData([]);\n    fetchData(url_grid);\n    console.log(url_grid);\n  }, [props.pName]);\n\n  function fetchData(url_grid) {\n    var reqOptions = {\n      method: \"get\",\n      headers: {\n        \"x-access-token\": \"test\"\n      }\n    };\n    var request = fetch(url_grid, reqOptions);\n    console.log('feching');\n    request.then(function (r) {\n      return r.json();\n    }).then(function (data) {\n      setData(data);\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n    children: [data.map(function (data) {\n      var myStyleGrid = {\n        color: \"white\",\n        weight: 0,\n        fillOpacity: 0.75,\n        fillColor: 'white'\n      };\n\n      if (data.properties.index < legendData.spei.min + twoDegit) {\n        myStyleGrid.fillColor = '#FFEDA0';\n      } else if (data.properties.index < legendData.spei.min + 2 * twoDegit) {\n        myStyleGrid.fillColor = '#FED976';\n      } else if (data.properties.index < legendData.spei.min + 3 * twoDegit) {\n        myStyleGrid.fillColor = '#FEB24C';\n      } else if (data.properties.index < legendData.spei.min + 4 * twoDegit) {\n        myStyleGrid.fillColor = '#FD8D3C';\n      } else if (data.properties.index < legendData.spei.min + 5 * twoDegit) {\n        myStyleGrid.fillColor = '#FC4E2A';\n      } else if (data.properties.index < legendData.spei.min + 6 * twoDegit) {\n        myStyleGrid.fillColor = '#E31A1C';\n      } else if (data.properties.index < legendData.spei.min + 7 * twoDegit) {\n        myStyleGrid.fillColor = '#BD0026';\n      } else {\n        myStyleGrid.fillColor = '#800026';\n      }\n\n      return /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: data,\n        style: myStyleGrid,\n        children: [console.log(data), /*#__PURE__*/_jsxDEV(Popup, {\n          children: [\" \", Math.round(data.properties.index * 1000) / 1000, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, _this)]\n      }, data.properties.grid_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, _this);\n    }), console.log(props.pName), console.log(url_grid), console.log('return')]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GridData, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = GridData;\nexport default GridData;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridData\");","map":{"version":3,"names":["GeoJSON","Popup","FeatureGroup","React","useState","useEffect","legendData","GridData","props","data","setData","url_grid","concat","pName","interval","spei","max","min","twoDegit","parseFloat","toFixed","fetchData","console","log","reqOptions","method","headers","request","fetch","then","r","json","error","map","myStyleGrid","color","weight","fillOpacity","fillColor","properties","index","Math","round","grid_id"],"sources":["D:/Project/Mix_Project/Project_I/project1/src/components/GridData.jsx"],"sourcesContent":["import {GeoJSON, Popup, FeatureGroup} from 'react-leaflet' \r\nimport React, { useState,useEffect } from 'react'\r\nimport legendData from  './../data/dataLegend'  \r\n\r\nfunction GridData(props) {\r\n    const [data, setData] = useState([])\r\n    const url_grid = 'http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02')\r\n    const interval = (legendData.spei.max - legendData.spei.min)/8\r\n    const twoDegit = parseFloat(interval).toFixed(2)\r\n\r\n    useEffect(()=>{\r\n        setData([])\r\n        fetchData(url_grid)\r\n        console.log(url_grid);\r\n    },[props.pName])\r\n\r\n    function fetchData(url_grid) {\r\n        const reqOptions ={\r\n          method:\"get\", \r\n          headers:{\"x-access-token\": \"test\"},\r\n        }\r\n        \r\n        let request = fetch(url_grid, reqOptions);\r\n        console.log('feching');\r\n        request\r\n        .then(r => r.json())\r\n        .then(data => {\r\n            setData(data)\r\n        }, (error) => {\r\n            console.error(error);\r\n        });\r\n      }\r\n\r\n    return (\r\n    <FeatureGroup>\r\n    \r\n        {data.map(data => {\r\n        var myStyleGrid = {\r\n            color: \"white\",\r\n            weight: 0,\r\n            fillOpacity: 0.75,\r\n            fillColor: 'white',\r\n        }\r\n        if(data.properties.index < legendData.spei.min + twoDegit){\r\n            myStyleGrid.fillColor = '#FFEDA0'\r\n        }else if(data.properties.index < legendData.spei.min + 2*twoDegit){\r\n            myStyleGrid.fillColor = '#FED976'\r\n        }else if(data.properties.index < legendData.spei.min + 3*twoDegit){\r\n            myStyleGrid.fillColor = '#FEB24C'\r\n        }else if(data.properties.index < legendData.spei.min + 4*twoDegit){\r\n            myStyleGrid.fillColor = '#FD8D3C'\r\n        }else if(data.properties.index < legendData.spei.min + 5*twoDegit){\r\n            myStyleGrid.fillColor = '#FC4E2A'\r\n        }else if(data.properties.index < legendData.spei.min + 6*twoDegit){\r\n            myStyleGrid.fillColor = '#E31A1C'\r\n        }else if(data.properties.index < legendData.spei.min + 7*twoDegit){\r\n            myStyleGrid.fillColor = '#BD0026'\r\n        }else {\r\n            myStyleGrid.fillColor = '#800026'\r\n        }\r\n        \r\n        return (\r\n        <GeoJSON key={data.properties.grid_id}  data={data} style={myStyleGrid}>\r\n            {console.log(data)}\r\n            <Popup> {Math.round(data.properties.index*1000)/1000} </Popup>\r\n        </GeoJSON>)\r\n        })}\r\n\r\n        {console.log(props.pName)}\r\n        {console.log(url_grid)}\r\n        {console.log('return')}\r\n\r\n    </FeatureGroup> \r\n  )\r\n}\r\n\r\nexport default GridData"],"mappings":"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"},"metadata":{},"sourceType":"module"}