{"ast":null,"code":"import { lineString } from \"@turf/helpers\";\nimport { orientationIndex } from \"./util.js\";\n/**\n * This class is inspired by GEOS's geos::operation::polygonize::PolygonizeDirectedEdge\n */\n\nvar Edge =\n/** @class */\nfunction () {\n  /**\n   * @param {Node} from - start node of the Edge\n   * @param {Node} to - end node of the edge\n   */\n  function Edge(from, to) {\n    this.from = from; //< start\n\n    this.to = to; //< End\n\n    this.next = undefined; //< The edge to be computed after\n\n    this.label = undefined; //< Used in order to detect Cut Edges (Bridges)\n\n    this.symetric = undefined; //< The symetric edge of this\n\n    this.ring = undefined; //< EdgeRing in which the Edge is\n\n    this.from.addOuterEdge(this);\n    this.to.addInnerEdge(this);\n  }\n  /**\n   * Creates or get the symetric Edge.\n   *\n   * @returns {Edge} - Symetric Edge.\n   */\n\n\n  Edge.prototype.getSymetric = function () {\n    if (!this.symetric) {\n      this.symetric = new Edge(this.to, this.from);\n      this.symetric.symetric = this;\n    }\n\n    return this.symetric;\n  };\n  /**\n   * Removes edge from from and to nodes.\n   */\n\n\n  Edge.prototype.deleteEdge = function () {\n    this.from.removeOuterEdge(this);\n    this.to.removeInnerEdge(this);\n  };\n  /**\n   * Compares Edge equallity.\n   *\n   * An edge is equal to another, if the from and to nodes are the same.\n   *\n   * @param {Edge} edge - Another Edge\n   * @returns {boolean} - True if Edges are equal, False otherwise\n   */\n\n\n  Edge.prototype.isEqual = function (edge) {\n    return this.from.id === edge.from.id && this.to.id === edge.to.id;\n  };\n\n  Edge.prototype.toString = function () {\n    return \"Edge { \" + this.from.id + \" -> \" + this.to.id + \" }\";\n  };\n  /**\n   * Returns a LineString representation of the Edge\n   *\n   * @returns {Feature<LineString>} - LineString representation of the Edge\n   */\n\n\n  Edge.prototype.toLineString = function () {\n    return lineString([this.from.coordinates, this.to.coordinates]);\n  };\n  /**\n   * Comparator of two edges.\n   *\n   * Implementation of geos::planargraph::DirectedEdge::compareTo.\n   *\n   * @param {Edge} edge - Another edge to compare with this one\n   * @returns {number} -1 if this Edge has a greater angle with the positive x-axis than b,\n   *          0 if the Edges are colinear,\n   *          1 otherwise\n   */\n\n\n  Edge.prototype.compareTo = function (edge) {\n    return orientationIndex(edge.from.coordinates, edge.to.coordinates, this.to.coordinates);\n  };\n\n  return Edge;\n}();\n\nexport default Edge;","map":{"version":3,"names":["lineString","orientationIndex","Edge","from","to","next","undefined","label","symetric","ring","addOuterEdge","addInnerEdge","prototype","getSymetric","deleteEdge","removeOuterEdge","removeInnerEdge","isEqual","edge","id","toString","toLineString","coordinates","compareTo"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/polygonize/dist/es/lib/Edge.js"],"sourcesContent":["import { lineString } from \"@turf/helpers\";\nimport { orientationIndex } from \"./util.js\";\n/**\n * This class is inspired by GEOS's geos::operation::polygonize::PolygonizeDirectedEdge\n */\nvar Edge = /** @class */ (function () {\n    /**\n     * @param {Node} from - start node of the Edge\n     * @param {Node} to - end node of the edge\n     */\n    function Edge(from, to) {\n        this.from = from; //< start\n        this.to = to; //< End\n        this.next = undefined; //< The edge to be computed after\n        this.label = undefined; //< Used in order to detect Cut Edges (Bridges)\n        this.symetric = undefined; //< The symetric edge of this\n        this.ring = undefined; //< EdgeRing in which the Edge is\n        this.from.addOuterEdge(this);\n        this.to.addInnerEdge(this);\n    }\n    /**\n     * Creates or get the symetric Edge.\n     *\n     * @returns {Edge} - Symetric Edge.\n     */\n    Edge.prototype.getSymetric = function () {\n        if (!this.symetric) {\n            this.symetric = new Edge(this.to, this.from);\n            this.symetric.symetric = this;\n        }\n        return this.symetric;\n    };\n    /**\n     * Removes edge from from and to nodes.\n     */\n    Edge.prototype.deleteEdge = function () {\n        this.from.removeOuterEdge(this);\n        this.to.removeInnerEdge(this);\n    };\n    /**\n     * Compares Edge equallity.\n     *\n     * An edge is equal to another, if the from and to nodes are the same.\n     *\n     * @param {Edge} edge - Another Edge\n     * @returns {boolean} - True if Edges are equal, False otherwise\n     */\n    Edge.prototype.isEqual = function (edge) {\n        return this.from.id === edge.from.id && this.to.id === edge.to.id;\n    };\n    Edge.prototype.toString = function () {\n        return \"Edge { \" + this.from.id + \" -> \" + this.to.id + \" }\";\n    };\n    /**\n     * Returns a LineString representation of the Edge\n     *\n     * @returns {Feature<LineString>} - LineString representation of the Edge\n     */\n    Edge.prototype.toLineString = function () {\n        return lineString([this.from.coordinates, this.to.coordinates]);\n    };\n    /**\n     * Comparator of two edges.\n     *\n     * Implementation of geos::planargraph::DirectedEdge::compareTo.\n     *\n     * @param {Edge} edge - Another edge to compare with this one\n     * @returns {number} -1 if this Edge has a greater angle with the positive x-axis than b,\n     *          0 if the Edges are colinear,\n     *          1 otherwise\n     */\n    Edge.prototype.compareTo = function (edge) {\n        return orientationIndex(edge.from.coordinates, edge.to.coordinates, this.to.coordinates);\n    };\n    return Edge;\n}());\nexport default Edge;\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA;AACA;AACA;;AACA,IAAIC,IAAI;AAAG;AAAe,YAAY;EAClC;AACJ;AACA;AACA;EACI,SAASA,IAAT,CAAcC,IAAd,EAAoBC,EAApB,EAAwB;IACpB,KAAKD,IAAL,GAAYA,IAAZ,CADoB,CACF;;IAClB,KAAKC,EAAL,GAAUA,EAAV,CAFoB,CAEN;;IACd,KAAKC,IAAL,GAAYC,SAAZ,CAHoB,CAGG;;IACvB,KAAKC,KAAL,GAAaD,SAAb,CAJoB,CAII;;IACxB,KAAKE,QAAL,GAAgBF,SAAhB,CALoB,CAKO;;IAC3B,KAAKG,IAAL,GAAYH,SAAZ,CANoB,CAMG;;IACvB,KAAKH,IAAL,CAAUO,YAAV,CAAuB,IAAvB;IACA,KAAKN,EAAL,CAAQO,YAAR,CAAqB,IAArB;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIT,IAAI,CAACU,SAAL,CAAeC,WAAf,GAA6B,YAAY;IACrC,IAAI,CAAC,KAAKL,QAAV,EAAoB;MAChB,KAAKA,QAAL,GAAgB,IAAIN,IAAJ,CAAS,KAAKE,EAAd,EAAkB,KAAKD,IAAvB,CAAhB;MACA,KAAKK,QAAL,CAAcA,QAAd,GAAyB,IAAzB;IACH;;IACD,OAAO,KAAKA,QAAZ;EACH,CAND;EAOA;AACJ;AACA;;;EACIN,IAAI,CAACU,SAAL,CAAeE,UAAf,GAA4B,YAAY;IACpC,KAAKX,IAAL,CAAUY,eAAV,CAA0B,IAA1B;IACA,KAAKX,EAAL,CAAQY,eAAR,CAAwB,IAAxB;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACId,IAAI,CAACU,SAAL,CAAeK,OAAf,GAAyB,UAAUC,IAAV,EAAgB;IACrC,OAAO,KAAKf,IAAL,CAAUgB,EAAV,KAAiBD,IAAI,CAACf,IAAL,CAAUgB,EAA3B,IAAiC,KAAKf,EAAL,CAAQe,EAAR,KAAeD,IAAI,CAACd,EAAL,CAAQe,EAA/D;EACH,CAFD;;EAGAjB,IAAI,CAACU,SAAL,CAAeQ,QAAf,GAA0B,YAAY;IAClC,OAAO,YAAY,KAAKjB,IAAL,CAAUgB,EAAtB,GAA2B,MAA3B,GAAoC,KAAKf,EAAL,CAAQe,EAA5C,GAAiD,IAAxD;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;;;EACIjB,IAAI,CAACU,SAAL,CAAeS,YAAf,GAA8B,YAAY;IACtC,OAAOrB,UAAU,CAAC,CAAC,KAAKG,IAAL,CAAUmB,WAAX,EAAwB,KAAKlB,EAAL,CAAQkB,WAAhC,CAAD,CAAjB;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIpB,IAAI,CAACU,SAAL,CAAeW,SAAf,GAA2B,UAAUL,IAAV,EAAgB;IACvC,OAAOjB,gBAAgB,CAACiB,IAAI,CAACf,IAAL,CAAUmB,WAAX,EAAwBJ,IAAI,CAACd,EAAL,CAAQkB,WAAhC,EAA6C,KAAKlB,EAAL,CAAQkB,WAArD,CAAvB;EACH,CAFD;;EAGA,OAAOpB,IAAP;AACH,CAtEyB,EAA1B;;AAuEA,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}