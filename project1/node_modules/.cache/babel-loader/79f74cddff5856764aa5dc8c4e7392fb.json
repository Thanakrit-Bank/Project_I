{"ast":null,"code":"import distance from \"@turf/distance\";\nimport { segmentReduce } from \"@turf/meta\";\n/**\r\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\r\n *\r\n * @name length\r\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\r\n * @returns {number} length of GeoJSON\r\n * @example\r\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\r\n * var length = turf.length(line, {units: 'miles'});\r\n *\r\n * //addToMap\r\n * var addToMap = [line];\r\n * line.properties.distance = length;\r\n */\n\nexport default function length(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  } // Calculate distance from 2-vertex line segments\n\n\n  return segmentReduce(geojson, function (previousValue, segment) {\n    var coords = segment.geometry.coordinates;\n    return previousValue + distance(coords[0], coords[1], options);\n  }, 0);\n}","map":{"version":3,"names":["distance","segmentReduce","length","geojson","options","previousValue","segment","coords","geometry","coordinates"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/length/dist/es/index.js"],"sourcesContent":["import distance from \"@turf/distance\";\r\nimport { segmentReduce } from \"@turf/meta\";\r\n/**\r\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\r\n *\r\n * @name length\r\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\r\n * @returns {number} length of GeoJSON\r\n * @example\r\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\r\n * var length = turf.length(line, {units: 'miles'});\r\n *\r\n * //addToMap\r\n * var addToMap = [line];\r\n * line.properties.distance = length;\r\n */\r\nexport default function length(geojson, options) {\r\n    if (options === void 0) { options = {}; }\r\n    // Calculate distance from 2-vertex line segments\r\n    return segmentReduce(geojson, function (previousValue, segment) {\r\n        var coords = segment.geometry.coordinates;\r\n        return previousValue + distance(coords[0], coords[1], options);\r\n    }, 0);\r\n}\r\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,aAAT,QAA8B,YAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,OAAzB,EAAkC;EAC7C,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe,CADI,CAE7C;;;EACA,OAAOH,aAAa,CAACE,OAAD,EAAU,UAAUE,aAAV,EAAyBC,OAAzB,EAAkC;IAC5D,IAAIC,MAAM,GAAGD,OAAO,CAACE,QAAR,CAAiBC,WAA9B;IACA,OAAOJ,aAAa,GAAGL,QAAQ,CAACO,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuBH,OAAvB,CAA/B;EACH,CAHmB,EAGjB,CAHiB,CAApB;AAIH"},"metadata":{},"sourceType":"module"}