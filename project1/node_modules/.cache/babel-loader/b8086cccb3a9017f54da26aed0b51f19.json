{"ast":null,"code":"import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\n/**\r\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\r\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\r\n *\r\n * @name polygonToLine\r\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\r\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\r\n * @example\r\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\r\n *\r\n * var line = turf.polygonToLine(poly);\r\n *\r\n * //addToMap\r\n * var addToMap = [line];\r\n */\n\nexport default function (poly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = getGeom(poly);\n\n  if (!options.properties && poly.type === \"Feature\") {\n    options.properties = poly.properties;\n  }\n\n  switch (geom.type) {\n    case \"Polygon\":\n      return polygonToLine(geom, options);\n\n    case \"MultiPolygon\":\n      return multiPolygonToLine(geom, options);\n\n    default:\n      throw new Error(\"invalid poly\");\n  }\n}\n/**\r\n * @private\r\n */\n\nexport function polygonToLine(poly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = getGeom(poly);\n  var coords = geom.coordinates;\n  var properties = options.properties ? options.properties : poly.type === \"Feature\" ? poly.properties : {};\n  return coordsToLine(coords, properties);\n}\n/**\r\n * @private\r\n */\n\nexport function multiPolygonToLine(multiPoly, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom = getGeom(multiPoly);\n  var coords = geom.coordinates;\n  var properties = options.properties ? options.properties : multiPoly.type === \"Feature\" ? multiPoly.properties : {};\n  var lines = [];\n  coords.forEach(function (coord) {\n    lines.push(coordsToLine(coord, properties));\n  });\n  return featureCollection(lines);\n}\n/**\r\n * @private\r\n */\n\nexport function coordsToLine(coords, properties) {\n  if (coords.length > 1) {\n    return multiLineString(coords, properties);\n  }\n\n  return lineString(coords[0], properties);\n}","map":{"version":3,"names":["featureCollection","lineString","multiLineString","getGeom","poly","options","geom","properties","type","polygonToLine","multiPolygonToLine","Error","coords","coordinates","coordsToLine","multiPoly","lines","forEach","coord","push","length"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/polygon-to-line/dist/es/index.js"],"sourcesContent":["import { featureCollection, lineString, multiLineString } from \"@turf/helpers\";\r\nimport { getGeom } from \"@turf/invariant\";\r\n/**\r\n * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a\r\n * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.\r\n *\r\n * @name polygonToLine\r\n * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {Object} [options.properties={}] translates GeoJSON properties to Feature\r\n * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString\r\n * @example\r\n * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);\r\n *\r\n * var line = turf.polygonToLine(poly);\r\n *\r\n * //addToMap\r\n * var addToMap = [line];\r\n */\r\nexport default function (poly, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var geom = getGeom(poly);\r\n    if (!options.properties && poly.type === \"Feature\") {\r\n        options.properties = poly.properties;\r\n    }\r\n    switch (geom.type) {\r\n        case \"Polygon\":\r\n            return polygonToLine(geom, options);\r\n        case \"MultiPolygon\":\r\n            return multiPolygonToLine(geom, options);\r\n        default:\r\n            throw new Error(\"invalid poly\");\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nexport function polygonToLine(poly, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var geom = getGeom(poly);\r\n    var coords = geom.coordinates;\r\n    var properties = options.properties\r\n        ? options.properties\r\n        : poly.type === \"Feature\"\r\n            ? poly.properties\r\n            : {};\r\n    return coordsToLine(coords, properties);\r\n}\r\n/**\r\n * @private\r\n */\r\nexport function multiPolygonToLine(multiPoly, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var geom = getGeom(multiPoly);\r\n    var coords = geom.coordinates;\r\n    var properties = options.properties\r\n        ? options.properties\r\n        : multiPoly.type === \"Feature\"\r\n            ? multiPoly.properties\r\n            : {};\r\n    var lines = [];\r\n    coords.forEach(function (coord) {\r\n        lines.push(coordsToLine(coord, properties));\r\n    });\r\n    return featureCollection(lines);\r\n}\r\n/**\r\n * @private\r\n */\r\nexport function coordsToLine(coords, properties) {\r\n    if (coords.length > 1) {\r\n        return multiLineString(coords, properties);\r\n    }\r\n    return lineString(coords[0], properties);\r\n}\r\n"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,UAA5B,EAAwCC,eAAxC,QAA+D,eAA/D;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;EACpC,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe;;EACzC,IAAIC,IAAI,GAAGH,OAAO,CAACC,IAAD,CAAlB;;EACA,IAAI,CAACC,OAAO,CAACE,UAAT,IAAuBH,IAAI,CAACI,IAAL,KAAc,SAAzC,EAAoD;IAChDH,OAAO,CAACE,UAAR,GAAqBH,IAAI,CAACG,UAA1B;EACH;;EACD,QAAQD,IAAI,CAACE,IAAb;IACI,KAAK,SAAL;MACI,OAAOC,aAAa,CAACH,IAAD,EAAOD,OAAP,CAApB;;IACJ,KAAK,cAAL;MACI,OAAOK,kBAAkB,CAACJ,IAAD,EAAOD,OAAP,CAAzB;;IACJ;MACI,MAAM,IAAIM,KAAJ,CAAU,cAAV,CAAN;EANR;AAQH;AACD;AACA;AACA;;AACA,OAAO,SAASF,aAAT,CAAuBL,IAAvB,EAA6BC,OAA7B,EAAsC;EACzC,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe;;EACzC,IAAIC,IAAI,GAAGH,OAAO,CAACC,IAAD,CAAlB;EACA,IAAIQ,MAAM,GAAGN,IAAI,CAACO,WAAlB;EACA,IAAIN,UAAU,GAAGF,OAAO,CAACE,UAAR,GACXF,OAAO,CAACE,UADG,GAEXH,IAAI,CAACI,IAAL,KAAc,SAAd,GACIJ,IAAI,CAACG,UADT,GAEI,EAJV;EAKA,OAAOO,YAAY,CAACF,MAAD,EAASL,UAAT,CAAnB;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASG,kBAAT,CAA4BK,SAA5B,EAAuCV,OAAvC,EAAgD;EACnD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe;;EACzC,IAAIC,IAAI,GAAGH,OAAO,CAACY,SAAD,CAAlB;EACA,IAAIH,MAAM,GAAGN,IAAI,CAACO,WAAlB;EACA,IAAIN,UAAU,GAAGF,OAAO,CAACE,UAAR,GACXF,OAAO,CAACE,UADG,GAEXQ,SAAS,CAACP,IAAV,KAAmB,SAAnB,GACIO,SAAS,CAACR,UADd,GAEI,EAJV;EAKA,IAAIS,KAAK,GAAG,EAAZ;EACAJ,MAAM,CAACK,OAAP,CAAe,UAAUC,KAAV,EAAiB;IAC5BF,KAAK,CAACG,IAAN,CAAWL,YAAY,CAACI,KAAD,EAAQX,UAAR,CAAvB;EACH,CAFD;EAGA,OAAOP,iBAAiB,CAACgB,KAAD,CAAxB;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASF,YAAT,CAAsBF,MAAtB,EAA8BL,UAA9B,EAA0C;EAC7C,IAAIK,MAAM,CAACQ,MAAP,GAAgB,CAApB,EAAuB;IACnB,OAAOlB,eAAe,CAACU,MAAD,EAASL,UAAT,CAAtB;EACH;;EACD,OAAON,UAAU,CAACW,MAAM,CAAC,CAAD,CAAP,EAAYL,UAAZ,CAAjB;AACH"},"metadata":{},"sourceType":"module"}