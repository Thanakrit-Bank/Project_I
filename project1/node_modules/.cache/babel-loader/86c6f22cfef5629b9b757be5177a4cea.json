{"ast":null,"code":"import { multiPolygon, polygon } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\nimport polygonClipping from \"polygon-clipping\";\n/**\r\n * Takes two {@link Polygon|polygon} or {@link MultiPolygon|multi-polygon} geometries and\r\n * finds their polygonal intersection. If they don't intersect, returns null.\r\n *\r\n * @name intersect\r\n * @param {Feature<Polygon | MultiPolygon>} poly1 the first polygon or multipolygon\r\n * @param {Feature<Polygon | MultiPolygon>} poly2 the second polygon or multipolygon\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Feature\r\n * @returns {Feature|null} returns a feature representing the area they share (either a {@link Polygon} or\r\n * {@link MultiPolygon}). If they do not share any area, returns `null`.\r\n * @example\r\n * var poly1 = turf.polygon([[\r\n *   [-122.801742, 45.48565],\r\n *   [-122.801742, 45.60491],\r\n *   [-122.584762, 45.60491],\r\n *   [-122.584762, 45.48565],\r\n *   [-122.801742, 45.48565]\r\n * ]]);\r\n *\r\n * var poly2 = turf.polygon([[\r\n *   [-122.520217, 45.535693],\r\n *   [-122.64038, 45.553967],\r\n *   [-122.720031, 45.526554],\r\n *   [-122.669906, 45.507309],\r\n *   [-122.723464, 45.446643],\r\n *   [-122.532577, 45.408574],\r\n *   [-122.487258, 45.477466],\r\n *   [-122.520217, 45.535693]\r\n * ]]);\r\n *\r\n * var intersection = turf.intersect(poly1, poly2);\r\n *\r\n * //addToMap\r\n * var addToMap = [poly1, poly2, intersection];\r\n */\n\nexport default function intersect(poly1, poly2, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var geom1 = getGeom(poly1);\n  var geom2 = getGeom(poly2);\n  var intersection = polygonClipping.intersection(geom1.coordinates, geom2.coordinates);\n  if (intersection.length === 0) return null;\n  if (intersection.length === 1) return polygon(intersection[0], options.properties);\n  return multiPolygon(intersection, options.properties);\n}","map":{"version":3,"names":["multiPolygon","polygon","getGeom","polygonClipping","intersect","poly1","poly2","options","geom1","geom2","intersection","coordinates","length","properties"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/intersect/dist/es/index.js"],"sourcesContent":["import { multiPolygon, polygon, } from \"@turf/helpers\";\r\nimport { getGeom } from \"@turf/invariant\";\r\nimport polygonClipping from \"polygon-clipping\";\r\n/**\r\n * Takes two {@link Polygon|polygon} or {@link MultiPolygon|multi-polygon} geometries and\r\n * finds their polygonal intersection. If they don't intersect, returns null.\r\n *\r\n * @name intersect\r\n * @param {Feature<Polygon | MultiPolygon>} poly1 the first polygon or multipolygon\r\n * @param {Feature<Polygon | MultiPolygon>} poly2 the second polygon or multipolygon\r\n * @param {Object} [options={}] Optional Parameters\r\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Feature\r\n * @returns {Feature|null} returns a feature representing the area they share (either a {@link Polygon} or\r\n * {@link MultiPolygon}). If they do not share any area, returns `null`.\r\n * @example\r\n * var poly1 = turf.polygon([[\r\n *   [-122.801742, 45.48565],\r\n *   [-122.801742, 45.60491],\r\n *   [-122.584762, 45.60491],\r\n *   [-122.584762, 45.48565],\r\n *   [-122.801742, 45.48565]\r\n * ]]);\r\n *\r\n * var poly2 = turf.polygon([[\r\n *   [-122.520217, 45.535693],\r\n *   [-122.64038, 45.553967],\r\n *   [-122.720031, 45.526554],\r\n *   [-122.669906, 45.507309],\r\n *   [-122.723464, 45.446643],\r\n *   [-122.532577, 45.408574],\r\n *   [-122.487258, 45.477466],\r\n *   [-122.520217, 45.535693]\r\n * ]]);\r\n *\r\n * var intersection = turf.intersect(poly1, poly2);\r\n *\r\n * //addToMap\r\n * var addToMap = [poly1, poly2, intersection];\r\n */\r\nexport default function intersect(poly1, poly2, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var geom1 = getGeom(poly1);\r\n    var geom2 = getGeom(poly2);\r\n    var intersection = polygonClipping.intersection(geom1.coordinates, geom2.coordinates);\r\n    if (intersection.length === 0)\r\n        return null;\r\n    if (intersection.length === 1)\r\n        return polygon(intersection[0], options.properties);\r\n    return multiPolygon(intersection, options.properties);\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,OAAvB,QAAuC,eAAvC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCC,OAAjC,EAA0C;EACrD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe;;EACzC,IAAIC,KAAK,GAAGN,OAAO,CAACG,KAAD,CAAnB;EACA,IAAII,KAAK,GAAGP,OAAO,CAACI,KAAD,CAAnB;EACA,IAAII,YAAY,GAAGP,eAAe,CAACO,YAAhB,CAA6BF,KAAK,CAACG,WAAnC,EAAgDF,KAAK,CAACE,WAAtD,CAAnB;EACA,IAAID,YAAY,CAACE,MAAb,KAAwB,CAA5B,EACI,OAAO,IAAP;EACJ,IAAIF,YAAY,CAACE,MAAb,KAAwB,CAA5B,EACI,OAAOX,OAAO,CAACS,YAAY,CAAC,CAAD,CAAb,EAAkBH,OAAO,CAACM,UAA1B,CAAd;EACJ,OAAOb,YAAY,CAACU,YAAD,EAAeH,OAAO,CAACM,UAAvB,CAAnB;AACH"},"metadata":{},"sourceType":"module"}