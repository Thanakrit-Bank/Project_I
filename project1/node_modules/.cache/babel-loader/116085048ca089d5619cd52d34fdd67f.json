{"ast":null,"code":"import { coordEach } from '@turf/meta';\nimport { isObject } from '@turf/helpers';\nimport { getCoords } from '@turf/invariant';\nimport clone from '@turf/clone';\nimport rhumbDestination from '@turf/rhumb-destination';\n/**\n * Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line\n * on the provided direction angle.\n *\n * @name transformTranslate\n * @param {GeoJSON} geojson object to be translated\n * @param {number} distance length of the motion; negative values determine motion in opposite direction\n * @param {number} direction of the motion; angle from North in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] in which `distance` will be express; miles, kilometers, degrees, or radians\n * @param {number} [options.zTranslation=0] length of the vertical motion, same unit of distance\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the translated GeoJSON object\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var translatedPoly = turf.transformTranslate(poly, 100, 35);\n *\n * //addToMap\n * var addToMap = [poly, translatedPoly];\n * translatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\n\nfunction transformTranslate(geojson, distance, direction, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var units = options.units;\n  var zTranslation = options.zTranslation;\n  var mutate = options.mutate; // Input validation\n\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (distance === undefined || distance === null || isNaN(distance)) throw new Error(\"distance is required\");\n  if (zTranslation && typeof zTranslation !== \"number\" && isNaN(zTranslation)) throw new Error(\"zTranslation is not a number\"); // Shortcut no-motion\n\n  zTranslation = zTranslation !== undefined ? zTranslation : 0;\n  if (distance === 0 && zTranslation === 0) return geojson;\n  if (direction === undefined || direction === null || isNaN(direction)) throw new Error(\"direction is required\"); // Invert with negative distances\n\n  if (distance < 0) {\n    distance = -distance;\n    direction = direction + 180;\n  } // Clone geojson to avoid side effects\n\n\n  if (mutate === false || mutate === undefined) geojson = clone(geojson); // Translate each coordinate\n\n  coordEach(geojson, function (pointCoords) {\n    var newCoords = getCoords(rhumbDestination(pointCoords, distance, direction, {\n      units: units\n    }));\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n    if (zTranslation && pointCoords.length === 3) pointCoords[2] += zTranslation;\n  });\n  return geojson;\n}\n\nexport default transformTranslate;","map":{"version":3,"names":["coordEach","isObject","getCoords","clone","rhumbDestination","transformTranslate","geojson","distance","direction","options","Error","units","zTranslation","mutate","undefined","isNaN","pointCoords","newCoords","length"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/transform-translate/dist/es/index.js"],"sourcesContent":["import { coordEach } from '@turf/meta';\nimport { isObject } from '@turf/helpers';\nimport { getCoords } from '@turf/invariant';\nimport clone from '@turf/clone';\nimport rhumbDestination from '@turf/rhumb-destination';\n\n/**\n * Moves any geojson Feature or Geometry of a specified distance along a Rhumb Line\n * on the provided direction angle.\n *\n * @name transformTranslate\n * @param {GeoJSON} geojson object to be translated\n * @param {number} distance length of the motion; negative values determine motion in opposite direction\n * @param {number} direction of the motion; angle from North in decimal degrees, positive clockwise\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] in which `distance` will be express; miles, kilometers, degrees, or radians\n * @param {number} [options.zTranslation=0] length of the vertical motion, same unit of distance\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} the translated GeoJSON object\n * @example\n * var poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * var translatedPoly = turf.transformTranslate(poly, 100, 35);\n *\n * //addToMap\n * var addToMap = [poly, translatedPoly];\n * translatedPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\nfunction transformTranslate(geojson, distance, direction, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var units = options.units;\n  var zTranslation = options.zTranslation;\n  var mutate = options.mutate;\n\n  // Input validation\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (distance === undefined || distance === null || isNaN(distance))\n    throw new Error(\"distance is required\");\n  if (zTranslation && typeof zTranslation !== \"number\" && isNaN(zTranslation))\n    throw new Error(\"zTranslation is not a number\");\n\n  // Shortcut no-motion\n  zTranslation = zTranslation !== undefined ? zTranslation : 0;\n  if (distance === 0 && zTranslation === 0) return geojson;\n\n  if (direction === undefined || direction === null || isNaN(direction))\n    throw new Error(\"direction is required\");\n\n  // Invert with negative distances\n  if (distance < 0) {\n    distance = -distance;\n    direction = direction + 180;\n  }\n\n  // Clone geojson to avoid side effects\n  if (mutate === false || mutate === undefined) geojson = clone(geojson);\n\n  // Translate each coordinate\n  coordEach(geojson, function (pointCoords) {\n    var newCoords = getCoords(\n      rhumbDestination(pointCoords, distance, direction, { units: units })\n    );\n    pointCoords[0] = newCoords[0];\n    pointCoords[1] = newCoords[1];\n    if (zTranslation && pointCoords.length === 3)\n      pointCoords[2] += zTranslation;\n  });\n  return geojson;\n}\n\nexport default transformTranslate;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,QAArC,EAA+CC,SAA/C,EAA0DC,OAA1D,EAAmE;EACjE;EACAA,OAAO,GAAGA,OAAO,IAAI,EAArB;EACA,IAAI,CAACR,QAAQ,CAACQ,OAAD,CAAb,EAAwB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;EACxB,IAAIC,KAAK,GAAGF,OAAO,CAACE,KAApB;EACA,IAAIC,YAAY,GAAGH,OAAO,CAACG,YAA3B;EACA,IAAIC,MAAM,GAAGJ,OAAO,CAACI,MAArB,CANiE,CAQjE;;EACA,IAAI,CAACP,OAAL,EAAc,MAAM,IAAII,KAAJ,CAAU,qBAAV,CAAN;EACd,IAAIH,QAAQ,KAAKO,SAAb,IAA0BP,QAAQ,KAAK,IAAvC,IAA+CQ,KAAK,CAACR,QAAD,CAAxD,EACE,MAAM,IAAIG,KAAJ,CAAU,sBAAV,CAAN;EACF,IAAIE,YAAY,IAAI,OAAOA,YAAP,KAAwB,QAAxC,IAAoDG,KAAK,CAACH,YAAD,CAA7D,EACE,MAAM,IAAIF,KAAJ,CAAU,8BAAV,CAAN,CAb+D,CAejE;;EACAE,YAAY,GAAGA,YAAY,KAAKE,SAAjB,GAA6BF,YAA7B,GAA4C,CAA3D;EACA,IAAIL,QAAQ,KAAK,CAAb,IAAkBK,YAAY,KAAK,CAAvC,EAA0C,OAAON,OAAP;EAE1C,IAAIE,SAAS,KAAKM,SAAd,IAA2BN,SAAS,KAAK,IAAzC,IAAiDO,KAAK,CAACP,SAAD,CAA1D,EACE,MAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN,CApB+D,CAsBjE;;EACA,IAAIH,QAAQ,GAAG,CAAf,EAAkB;IAChBA,QAAQ,GAAG,CAACA,QAAZ;IACAC,SAAS,GAAGA,SAAS,GAAG,GAAxB;EACD,CA1BgE,CA4BjE;;;EACA,IAAIK,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAKC,SAAnC,EAA8CR,OAAO,GAAGH,KAAK,CAACG,OAAD,CAAf,CA7BmB,CA+BjE;;EACAN,SAAS,CAACM,OAAD,EAAU,UAAUU,WAAV,EAAuB;IACxC,IAAIC,SAAS,GAAGf,SAAS,CACvBE,gBAAgB,CAACY,WAAD,EAAcT,QAAd,EAAwBC,SAAxB,EAAmC;MAAEG,KAAK,EAAEA;IAAT,CAAnC,CADO,CAAzB;IAGAK,WAAW,CAAC,CAAD,CAAX,GAAiBC,SAAS,CAAC,CAAD,CAA1B;IACAD,WAAW,CAAC,CAAD,CAAX,GAAiBC,SAAS,CAAC,CAAD,CAA1B;IACA,IAAIL,YAAY,IAAII,WAAW,CAACE,MAAZ,KAAuB,CAA3C,EACEF,WAAW,CAAC,CAAD,CAAX,IAAkBJ,YAAlB;EACH,CARQ,CAAT;EASA,OAAON,OAAP;AACD;;AAED,eAAeD,kBAAf"},"metadata":{},"sourceType":"module"}