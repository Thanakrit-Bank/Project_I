{"ast":null,"code":"import circle from '@turf/circle';\nimport lineArc from '@turf/line-arc';\nimport { coordEach } from '@turf/meta';\nimport { isObject, polygon } from '@turf/helpers';\nimport { getCoords } from '@turf/invariant';\n/**\n * Creates a circular sector of a circle of given radius and center {@link Point},\n * between (clockwise) bearing1 and bearing2; 0 bearing is North of center point, positive clockwise.\n *\n * @name sector\n * @param {Coord} center center point\n * @param {number} radius radius of the circle\n * @param {number} bearing1 angle, in decimal degrees, of the first radius of the sector\n * @param {number} bearing2 angle, in decimal degrees, of the second radius of the sector\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {number} [options.steps=64] number of steps\n * @param {Properties} [options.properties={}] Translate properties to Feature Polygon\n * @returns {Feature<Polygon>} sector polygon\n * @example\n * var center = turf.point([-75, 40]);\n * var radius = 5;\n * var bearing1 = 25;\n * var bearing2 = 45;\n *\n * var sector = turf.sector(center, radius, bearing1, bearing2);\n *\n * //addToMap\n * var addToMap = [center, sector];\n */\n\nfunction sector(center, radius, bearing1, bearing2, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var properties = options.properties; // validation\n\n  if (!center) throw new Error(\"center is required\");\n  if (bearing1 === undefined || bearing1 === null) throw new Error(\"bearing1 is required\");\n  if (bearing2 === undefined || bearing2 === null) throw new Error(\"bearing2 is required\");\n  if (!radius) throw new Error(\"radius is required\");\n  if (typeof options !== \"object\") throw new Error(\"options must be an object\");\n\n  if (convertAngleTo360(bearing1) === convertAngleTo360(bearing2)) {\n    return circle(center, radius, options);\n  }\n\n  var coords = getCoords(center);\n  var arc = lineArc(center, radius, bearing1, bearing2, options);\n  var sliceCoords = [[coords]];\n  coordEach(arc, function (currentCoords) {\n    sliceCoords[0].push(currentCoords);\n  });\n  sliceCoords[0].push(coords);\n  return polygon(sliceCoords, properties);\n}\n/**\n * Takes any angle in degrees\n * and returns a valid angle between 0-360 degrees\n *\n * @private\n * @param {number} alfa angle between -180-180 degrees\n * @returns {number} angle between 0-360 degrees\n */\n\n\nfunction convertAngleTo360(alfa) {\n  var beta = alfa % 360;\n  if (beta < 0) beta += 360;\n  return beta;\n}\n\nexport default sector;","map":{"version":3,"names":["circle","lineArc","coordEach","isObject","polygon","getCoords","sector","center","radius","bearing1","bearing2","options","Error","properties","undefined","convertAngleTo360","coords","arc","sliceCoords","currentCoords","push","alfa","beta"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/sector/dist/es/index.js"],"sourcesContent":["import circle from '@turf/circle';\nimport lineArc from '@turf/line-arc';\nimport { coordEach } from '@turf/meta';\nimport { isObject, polygon } from '@turf/helpers';\nimport { getCoords } from '@turf/invariant';\n\n/**\n * Creates a circular sector of a circle of given radius and center {@link Point},\n * between (clockwise) bearing1 and bearing2; 0 bearing is North of center point, positive clockwise.\n *\n * @name sector\n * @param {Coord} center center point\n * @param {number} radius radius of the circle\n * @param {number} bearing1 angle, in decimal degrees, of the first radius of the sector\n * @param {number} bearing2 angle, in decimal degrees, of the second radius of the sector\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {number} [options.steps=64] number of steps\n * @param {Properties} [options.properties={}] Translate properties to Feature Polygon\n * @returns {Feature<Polygon>} sector polygon\n * @example\n * var center = turf.point([-75, 40]);\n * var radius = 5;\n * var bearing1 = 25;\n * var bearing2 = 45;\n *\n * var sector = turf.sector(center, radius, bearing1, bearing2);\n *\n * //addToMap\n * var addToMap = [center, sector];\n */\nfunction sector(center, radius, bearing1, bearing2, options) {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  var properties = options.properties;\n\n  // validation\n  if (!center) throw new Error(\"center is required\");\n  if (bearing1 === undefined || bearing1 === null)\n    throw new Error(\"bearing1 is required\");\n  if (bearing2 === undefined || bearing2 === null)\n    throw new Error(\"bearing2 is required\");\n  if (!radius) throw new Error(\"radius is required\");\n  if (typeof options !== \"object\") throw new Error(\"options must be an object\");\n\n  if (convertAngleTo360(bearing1) === convertAngleTo360(bearing2)) {\n    return circle(center, radius, options);\n  }\n  var coords = getCoords(center);\n  var arc = lineArc(center, radius, bearing1, bearing2, options);\n  var sliceCoords = [[coords]];\n  coordEach(arc, function (currentCoords) {\n    sliceCoords[0].push(currentCoords);\n  });\n  sliceCoords[0].push(coords);\n\n  return polygon(sliceCoords, properties);\n}\n\n/**\n * Takes any angle in degrees\n * and returns a valid angle between 0-360 degrees\n *\n * @private\n * @param {number} alfa angle between -180-180 degrees\n * @returns {number} angle between 0-360 degrees\n */\nfunction convertAngleTo360(alfa) {\n  var beta = alfa % 360;\n  if (beta < 0) beta += 360;\n  return beta;\n}\n\nexport default sector;\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,eAAlC;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,MAAxB,EAAgCC,QAAhC,EAA0CC,QAA1C,EAAoDC,OAApD,EAA6D;EAC3D;EACAA,OAAO,GAAGA,OAAO,IAAI,EAArB;EACA,IAAI,CAACR,QAAQ,CAACQ,OAAD,CAAb,EAAwB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;EACxB,IAAIC,UAAU,GAAGF,OAAO,CAACE,UAAzB,CAJ2D,CAM3D;;EACA,IAAI,CAACN,MAAL,EAAa,MAAM,IAAIK,KAAJ,CAAU,oBAAV,CAAN;EACb,IAAIH,QAAQ,KAAKK,SAAb,IAA0BL,QAAQ,KAAK,IAA3C,EACE,MAAM,IAAIG,KAAJ,CAAU,sBAAV,CAAN;EACF,IAAIF,QAAQ,KAAKI,SAAb,IAA0BJ,QAAQ,KAAK,IAA3C,EACE,MAAM,IAAIE,KAAJ,CAAU,sBAAV,CAAN;EACF,IAAI,CAACJ,MAAL,EAAa,MAAM,IAAII,KAAJ,CAAU,oBAAV,CAAN;EACb,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC,MAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;;EAEjC,IAAIG,iBAAiB,CAACN,QAAD,CAAjB,KAAgCM,iBAAiB,CAACL,QAAD,CAArD,EAAiE;IAC/D,OAAOV,MAAM,CAACO,MAAD,EAASC,MAAT,EAAiBG,OAAjB,CAAb;EACD;;EACD,IAAIK,MAAM,GAAGX,SAAS,CAACE,MAAD,CAAtB;EACA,IAAIU,GAAG,GAAGhB,OAAO,CAACM,MAAD,EAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,EAAqCC,OAArC,CAAjB;EACA,IAAIO,WAAW,GAAG,CAAC,CAACF,MAAD,CAAD,CAAlB;EACAd,SAAS,CAACe,GAAD,EAAM,UAAUE,aAAV,EAAyB;IACtCD,WAAW,CAAC,CAAD,CAAX,CAAeE,IAAf,CAAoBD,aAApB;EACD,CAFQ,CAAT;EAGAD,WAAW,CAAC,CAAD,CAAX,CAAeE,IAAf,CAAoBJ,MAApB;EAEA,OAAOZ,OAAO,CAACc,WAAD,EAAcL,UAAd,CAAd;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,iBAAT,CAA2BM,IAA3B,EAAiC;EAC/B,IAAIC,IAAI,GAAGD,IAAI,GAAG,GAAlB;EACA,IAAIC,IAAI,GAAG,CAAX,EAAcA,IAAI,IAAI,GAAR;EACd,OAAOA,IAAP;AACD;;AAED,eAAehB,MAAf"},"metadata":{},"sourceType":"module"}