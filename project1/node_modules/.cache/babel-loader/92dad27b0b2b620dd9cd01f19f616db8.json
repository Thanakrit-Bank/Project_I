{"ast":null,"code":"/**\n * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.\n *\n * @name clone\n * @param {GeoJSON} geojson GeoJSON Object\n * @returns {GeoJSON} cloned GeoJSON Object\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n *\n * var lineCloned = turf.clone(line);\n */\nfunction clone(geojson) {\n  if (!geojson) {\n    throw new Error(\"geojson is required\");\n  }\n\n  switch (geojson.type) {\n    case \"Feature\":\n      return cloneFeature(geojson);\n\n    case \"FeatureCollection\":\n      return cloneFeatureCollection(geojson);\n\n    case \"Point\":\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiPoint\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n    case \"GeometryCollection\":\n      return cloneGeometry(geojson);\n\n    default:\n      throw new Error(\"unknown GeoJSON type\");\n  }\n}\n/**\n * Clone Feature\n *\n * @private\n * @param {Feature<any>} geojson GeoJSON Feature\n * @returns {Feature<any>} cloned Feature\n */\n\n\nfunction cloneFeature(geojson) {\n  var cloned = {\n    type: \"Feature\"\n  }; // Preserve Foreign Members\n\n  Object.keys(geojson).forEach(function (key) {\n    switch (key) {\n      case \"type\":\n      case \"properties\":\n      case \"geometry\":\n        return;\n\n      default:\n        cloned[key] = geojson[key];\n    }\n  }); // Add properties & geometry last\n\n  cloned.properties = cloneProperties(geojson.properties);\n  cloned.geometry = cloneGeometry(geojson.geometry);\n  return cloned;\n}\n/**\n * Clone Properties\n *\n * @private\n * @param {Object} properties GeoJSON Properties\n * @returns {Object} cloned Properties\n */\n\n\nfunction cloneProperties(properties) {\n  var cloned = {};\n\n  if (!properties) {\n    return cloned;\n  }\n\n  Object.keys(properties).forEach(function (key) {\n    var value = properties[key];\n\n    if (typeof value === \"object\") {\n      if (value === null) {\n        // handle null\n        cloned[key] = null;\n      } else if (Array.isArray(value)) {\n        // handle Array\n        cloned[key] = value.map(function (item) {\n          return item;\n        });\n      } else {\n        // handle generic Object\n        cloned[key] = cloneProperties(value);\n      }\n    } else {\n      cloned[key] = value;\n    }\n  });\n  return cloned;\n}\n/**\n * Clone Feature Collection\n *\n * @private\n * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection\n * @returns {FeatureCollection<any>} cloned Feature Collection\n */\n\n\nfunction cloneFeatureCollection(geojson) {\n  var cloned = {\n    type: \"FeatureCollection\"\n  }; // Preserve Foreign Members\n\n  Object.keys(geojson).forEach(function (key) {\n    switch (key) {\n      case \"type\":\n      case \"features\":\n        return;\n\n      default:\n        cloned[key] = geojson[key];\n    }\n  }); // Add features\n\n  cloned.features = geojson.features.map(function (feature) {\n    return cloneFeature(feature);\n  });\n  return cloned;\n}\n/**\n * Clone Geometry\n *\n * @private\n * @param {Geometry<any>} geometry GeoJSON Geometry\n * @returns {Geometry<any>} cloned Geometry\n */\n\n\nfunction cloneGeometry(geometry) {\n  var geom = {\n    type: geometry.type\n  };\n\n  if (geometry.bbox) {\n    geom.bbox = geometry.bbox;\n  }\n\n  if (geometry.type === \"GeometryCollection\") {\n    geom.geometries = geometry.geometries.map(function (g) {\n      return cloneGeometry(g);\n    });\n    return geom;\n  }\n\n  geom.coordinates = deepSlice(geometry.coordinates);\n  return geom;\n}\n/**\n * Deep Slice coordinates\n *\n * @private\n * @param {Coordinates} coords Coordinates\n * @returns {Coordinates} all coordinates sliced\n */\n\n\nfunction deepSlice(coords) {\n  var cloned = coords;\n\n  if (typeof cloned[0] !== \"object\") {\n    return cloned.slice();\n  }\n\n  return cloned.map(function (coord) {\n    return deepSlice(coord);\n  });\n}\n\nexport default clone;","map":{"version":3,"names":["clone","geojson","Error","type","cloneFeature","cloneFeatureCollection","cloneGeometry","cloned","Object","keys","forEach","key","properties","cloneProperties","geometry","value","Array","isArray","map","item","features","feature","geom","bbox","geometries","g","coordinates","deepSlice","coords","slice","coord"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/clone/dist/es/index.js"],"sourcesContent":["/**\n * Returns a cloned copy of the passed GeoJSON Object, including possible 'Foreign Members'.\n * ~3-5x faster than the common JSON.parse + JSON.stringify combo method.\n *\n * @name clone\n * @param {GeoJSON} geojson GeoJSON Object\n * @returns {GeoJSON} cloned GeoJSON Object\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]], {color: 'red'});\n *\n * var lineCloned = turf.clone(line);\n */\nfunction clone(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    switch (geojson.type) {\n        case \"Feature\":\n            return cloneFeature(geojson);\n        case \"FeatureCollection\":\n            return cloneFeatureCollection(geojson);\n        case \"Point\":\n        case \"LineString\":\n        case \"Polygon\":\n        case \"MultiPoint\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\":\n        case \"GeometryCollection\":\n            return cloneGeometry(geojson);\n        default:\n            throw new Error(\"unknown GeoJSON type\");\n    }\n}\n/**\n * Clone Feature\n *\n * @private\n * @param {Feature<any>} geojson GeoJSON Feature\n * @returns {Feature<any>} cloned Feature\n */\nfunction cloneFeature(geojson) {\n    var cloned = { type: \"Feature\" };\n    // Preserve Foreign Members\n    Object.keys(geojson).forEach(function (key) {\n        switch (key) {\n            case \"type\":\n            case \"properties\":\n            case \"geometry\":\n                return;\n            default:\n                cloned[key] = geojson[key];\n        }\n    });\n    // Add properties & geometry last\n    cloned.properties = cloneProperties(geojson.properties);\n    cloned.geometry = cloneGeometry(geojson.geometry);\n    return cloned;\n}\n/**\n * Clone Properties\n *\n * @private\n * @param {Object} properties GeoJSON Properties\n * @returns {Object} cloned Properties\n */\nfunction cloneProperties(properties) {\n    var cloned = {};\n    if (!properties) {\n        return cloned;\n    }\n    Object.keys(properties).forEach(function (key) {\n        var value = properties[key];\n        if (typeof value === \"object\") {\n            if (value === null) {\n                // handle null\n                cloned[key] = null;\n            }\n            else if (Array.isArray(value)) {\n                // handle Array\n                cloned[key] = value.map(function (item) {\n                    return item;\n                });\n            }\n            else {\n                // handle generic Object\n                cloned[key] = cloneProperties(value);\n            }\n        }\n        else {\n            cloned[key] = value;\n        }\n    });\n    return cloned;\n}\n/**\n * Clone Feature Collection\n *\n * @private\n * @param {FeatureCollection<any>} geojson GeoJSON Feature Collection\n * @returns {FeatureCollection<any>} cloned Feature Collection\n */\nfunction cloneFeatureCollection(geojson) {\n    var cloned = { type: \"FeatureCollection\" };\n    // Preserve Foreign Members\n    Object.keys(geojson).forEach(function (key) {\n        switch (key) {\n            case \"type\":\n            case \"features\":\n                return;\n            default:\n                cloned[key] = geojson[key];\n        }\n    });\n    // Add features\n    cloned.features = geojson.features.map(function (feature) {\n        return cloneFeature(feature);\n    });\n    return cloned;\n}\n/**\n * Clone Geometry\n *\n * @private\n * @param {Geometry<any>} geometry GeoJSON Geometry\n * @returns {Geometry<any>} cloned Geometry\n */\nfunction cloneGeometry(geometry) {\n    var geom = { type: geometry.type };\n    if (geometry.bbox) {\n        geom.bbox = geometry.bbox;\n    }\n    if (geometry.type === \"GeometryCollection\") {\n        geom.geometries = geometry.geometries.map(function (g) {\n            return cloneGeometry(g);\n        });\n        return geom;\n    }\n    geom.coordinates = deepSlice(geometry.coordinates);\n    return geom;\n}\n/**\n * Deep Slice coordinates\n *\n * @private\n * @param {Coordinates} coords Coordinates\n * @returns {Coordinates} all coordinates sliced\n */\nfunction deepSlice(coords) {\n    var cloned = coords;\n    if (typeof cloned[0] !== \"object\") {\n        return cloned.slice();\n    }\n    return cloned.map(function (coord) {\n        return deepSlice(coord);\n    });\n}\nexport default clone;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}