{"ast":null,"code":"import { orientationIndex, envelopeIsEqual, envelopeContains, coordinatesEqual } from \"./util.js\";\nimport { multiPoint, polygon, point } from \"@turf/helpers\";\nimport envelope from \"@turf/envelope\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\n/**\r\n * Ring of edges which form a polygon.\r\n *\r\n * The ring may be either an outer shell or a hole.\r\n *\r\n * This class is inspired in GEOS's geos::operation::polygonize::EdgeRing\r\n */\n\nvar EdgeRing =\n/** @class */\nfunction () {\n  function EdgeRing() {\n    this.edges = [];\n    this.polygon = undefined; //< Caches Polygon representation\n\n    this.envelope = undefined; //< Caches Envelope representation\n  }\n  /**\r\n   * Add an edge to the ring, inserting it in the last position.\r\n   *\r\n   * @memberof EdgeRing\r\n   * @param {Edge} edge - Edge to be inserted\r\n   */\n\n\n  EdgeRing.prototype.push = function (edge) {\n    this.edges.push(edge);\n    this.polygon = this.envelope = undefined;\n  };\n  /**\r\n   * Get Edge.\r\n   *\r\n   * @memberof EdgeRing\r\n   * @param {number} i - Index\r\n   * @returns {Edge} - Edge in the i position\r\n   */\n\n\n  EdgeRing.prototype.get = function (i) {\n    return this.edges[i];\n  };\n\n  Object.defineProperty(EdgeRing.prototype, \"length\", {\n    /**\r\n     * Getter of length property.\r\n     *\r\n     * @memberof EdgeRing\r\n     * @returns {number} - Length of the edge ring.\r\n     */\n    get: function get() {\n      return this.edges.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Similar to Array.prototype.forEach for the list of Edges in the EdgeRing.\r\n   *\r\n   * @memberof EdgeRing\r\n   * @param {Function} f - The same function to be passed to Array.prototype.forEach\r\n   */\n\n  EdgeRing.prototype.forEach = function (f) {\n    this.edges.forEach(f);\n  };\n  /**\r\n   * Similar to Array.prototype.map for the list of Edges in the EdgeRing.\r\n   *\r\n   * @memberof EdgeRing\r\n   * @param {Function} f - The same function to be passed to Array.prototype.map\r\n   * @returns {Array} - The mapped values in the function\r\n   */\n\n\n  EdgeRing.prototype.map = function (f) {\n    return this.edges.map(f);\n  };\n  /**\r\n   * Similar to Array.prototype.some for the list of Edges in the EdgeRing.\r\n   *\r\n   * @memberof EdgeRing\r\n   * @param {Function} f - The same function to be passed to Array.prototype.some\r\n   * @returns {boolean} - True if an Edge check the condition\r\n   */\n\n\n  EdgeRing.prototype.some = function (f) {\n    return this.edges.some(f);\n  };\n  /**\r\n   * Check if the ring is valid in geomtry terms.\r\n   *\r\n   * A ring must have either 0 or 4 or more points. The first and the last must be\r\n   * equal (in 2D)\r\n   * geos::geom::LinearRing::validateConstruction\r\n   *\r\n   * @memberof EdgeRing\r\n   * @returns {boolean} - Validity of the EdgeRing\r\n   */\n\n\n  EdgeRing.prototype.isValid = function () {\n    // TODO: stub\n    return true;\n  };\n  /**\r\n   * Tests whether this ring is a hole.\r\n   *\r\n   * A ring is a hole if it is oriented counter-clockwise.\r\n   * Similar implementation of geos::algorithm::CGAlgorithms::isCCW\r\n   *\r\n   * @memberof EdgeRing\r\n   * @returns {boolean} - true: if it is a hole\r\n   */\n\n\n  EdgeRing.prototype.isHole = function () {\n    var _this = this; // XXX: Assuming Ring is valid\n    // Find highest point\n\n\n    var hiIndex = this.edges.reduce(function (high, edge, i) {\n      if (edge.from.coordinates[1] > _this.edges[high].from.coordinates[1]) high = i;\n      return high;\n    }, 0),\n        iPrev = (hiIndex === 0 ? this.length : hiIndex) - 1,\n        iNext = (hiIndex + 1) % this.length,\n        disc = orientationIndex(this.edges[iPrev].from.coordinates, this.edges[hiIndex].from.coordinates, this.edges[iNext].from.coordinates);\n    if (disc === 0) return this.edges[iPrev].from.coordinates[0] > this.edges[iNext].from.coordinates[0];\n    return disc > 0;\n  };\n  /**\r\n   * Creates a MultiPoint representing the EdgeRing (discarts edges directions).\r\n   *\r\n   * @memberof EdgeRing\r\n   * @returns {Feature<MultiPoint>} - Multipoint representation of the EdgeRing\r\n   */\n\n\n  EdgeRing.prototype.toMultiPoint = function () {\n    return multiPoint(this.edges.map(function (edge) {\n      return edge.from.coordinates;\n    }));\n  };\n  /**\r\n   * Creates a Polygon representing the EdgeRing.\r\n   *\r\n   * @memberof EdgeRing\r\n   * @returns {Feature<Polygon>} - Polygon representation of the Edge Ring\r\n   */\n\n\n  EdgeRing.prototype.toPolygon = function () {\n    if (this.polygon) return this.polygon;\n    var coordinates = this.edges.map(function (edge) {\n      return edge.from.coordinates;\n    });\n    coordinates.push(this.edges[0].from.coordinates);\n    return this.polygon = polygon([coordinates]);\n  };\n  /**\r\n   * Calculates the envelope of the EdgeRing.\r\n   *\r\n   * @memberof EdgeRing\r\n   * @returns {Feature<Polygon>} - envelope\r\n   */\n\n\n  EdgeRing.prototype.getEnvelope = function () {\n    if (this.envelope) return this.envelope;\n    return this.envelope = envelope(this.toPolygon());\n  };\n  /**\r\n   * `geos::operation::polygonize::EdgeRing::findEdgeRingContaining`\r\n   *\r\n   * @param {EdgeRing} testEdgeRing - EdgeRing to look in the list\r\n   * @param {EdgeRing[]} shellList - List of EdgeRing in which to search\r\n   *\r\n   * @returns {EdgeRing} - EdgeRing which contains the testEdgeRing\r\n   */\n\n\n  EdgeRing.findEdgeRingContaining = function (testEdgeRing, shellList) {\n    var testEnvelope = testEdgeRing.getEnvelope();\n    var minEnvelope, minShell;\n    shellList.forEach(function (shell) {\n      var tryEnvelope = shell.getEnvelope();\n      if (minShell) minEnvelope = minShell.getEnvelope(); // the hole envelope cannot equal the shell envelope\n\n      if (envelopeIsEqual(tryEnvelope, testEnvelope)) return;\n\n      if (envelopeContains(tryEnvelope, testEnvelope)) {\n        var testEdgeRingCoordinates = testEdgeRing.map(function (edge) {\n          return edge.from.coordinates;\n        });\n        var testPoint = void 0;\n\n        var _loop_1 = function _loop_1(pt) {\n          if (!shell.some(function (edge) {\n            return coordinatesEqual(pt, edge.from.coordinates);\n          })) {\n            testPoint = pt;\n          }\n        };\n\n        for (var _i = 0, testEdgeRingCoordinates_1 = testEdgeRingCoordinates; _i < testEdgeRingCoordinates_1.length; _i++) {\n          var pt = testEdgeRingCoordinates_1[_i];\n\n          _loop_1(pt);\n        }\n\n        if (testPoint && shell.inside(point(testPoint))) {\n          if (!minShell || envelopeContains(minEnvelope, tryEnvelope)) minShell = shell;\n        }\n      }\n    });\n    return minShell;\n  };\n  /**\r\n   * Checks if the point is inside the edgeRing\r\n   *\r\n   * @param {Feature<Point>} pt - Point to check if it is inside the edgeRing\r\n   * @returns {boolean} - True if it is inside, False otherwise\r\n   */\n\n\n  EdgeRing.prototype.inside = function (pt) {\n    return booleanPointInPolygon(pt, this.toPolygon());\n  };\n\n  return EdgeRing;\n}();\n\nexport default EdgeRing;","map":{"version":3,"names":["orientationIndex","envelopeIsEqual","envelopeContains","coordinatesEqual","multiPoint","polygon","point","envelope","booleanPointInPolygon","EdgeRing","edges","undefined","prototype","push","edge","get","i","Object","defineProperty","length","enumerable","configurable","forEach","f","map","some","isValid","isHole","_this","hiIndex","reduce","high","from","coordinates","iPrev","iNext","disc","toMultiPoint","toPolygon","getEnvelope","findEdgeRingContaining","testEdgeRing","shellList","testEnvelope","minEnvelope","minShell","shell","tryEnvelope","testEdgeRingCoordinates","testPoint","_loop_1","pt","_i","testEdgeRingCoordinates_1","inside"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/polygonize/dist/es/lib/EdgeRing.js"],"sourcesContent":["import { orientationIndex, envelopeIsEqual, envelopeContains, coordinatesEqual, } from \"./util.js\";\r\nimport { multiPoint, polygon, point, } from \"@turf/helpers\";\r\nimport envelope from \"@turf/envelope\";\r\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\r\n/**\r\n * Ring of edges which form a polygon.\r\n *\r\n * The ring may be either an outer shell or a hole.\r\n *\r\n * This class is inspired in GEOS's geos::operation::polygonize::EdgeRing\r\n */\r\nvar EdgeRing = /** @class */ (function () {\r\n    function EdgeRing() {\r\n        this.edges = [];\r\n        this.polygon = undefined; //< Caches Polygon representation\r\n        this.envelope = undefined; //< Caches Envelope representation\r\n    }\r\n    /**\r\n     * Add an edge to the ring, inserting it in the last position.\r\n     *\r\n     * @memberof EdgeRing\r\n     * @param {Edge} edge - Edge to be inserted\r\n     */\r\n    EdgeRing.prototype.push = function (edge) {\r\n        this.edges.push(edge);\r\n        this.polygon = this.envelope = undefined;\r\n    };\r\n    /**\r\n     * Get Edge.\r\n     *\r\n     * @memberof EdgeRing\r\n     * @param {number} i - Index\r\n     * @returns {Edge} - Edge in the i position\r\n     */\r\n    EdgeRing.prototype.get = function (i) {\r\n        return this.edges[i];\r\n    };\r\n    Object.defineProperty(EdgeRing.prototype, \"length\", {\r\n        /**\r\n         * Getter of length property.\r\n         *\r\n         * @memberof EdgeRing\r\n         * @returns {number} - Length of the edge ring.\r\n         */\r\n        get: function () {\r\n            return this.edges.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Similar to Array.prototype.forEach for the list of Edges in the EdgeRing.\r\n     *\r\n     * @memberof EdgeRing\r\n     * @param {Function} f - The same function to be passed to Array.prototype.forEach\r\n     */\r\n    EdgeRing.prototype.forEach = function (f) {\r\n        this.edges.forEach(f);\r\n    };\r\n    /**\r\n     * Similar to Array.prototype.map for the list of Edges in the EdgeRing.\r\n     *\r\n     * @memberof EdgeRing\r\n     * @param {Function} f - The same function to be passed to Array.prototype.map\r\n     * @returns {Array} - The mapped values in the function\r\n     */\r\n    EdgeRing.prototype.map = function (f) {\r\n        return this.edges.map(f);\r\n    };\r\n    /**\r\n     * Similar to Array.prototype.some for the list of Edges in the EdgeRing.\r\n     *\r\n     * @memberof EdgeRing\r\n     * @param {Function} f - The same function to be passed to Array.prototype.some\r\n     * @returns {boolean} - True if an Edge check the condition\r\n     */\r\n    EdgeRing.prototype.some = function (f) {\r\n        return this.edges.some(f);\r\n    };\r\n    /**\r\n     * Check if the ring is valid in geomtry terms.\r\n     *\r\n     * A ring must have either 0 or 4 or more points. The first and the last must be\r\n     * equal (in 2D)\r\n     * geos::geom::LinearRing::validateConstruction\r\n     *\r\n     * @memberof EdgeRing\r\n     * @returns {boolean} - Validity of the EdgeRing\r\n     */\r\n    EdgeRing.prototype.isValid = function () {\r\n        // TODO: stub\r\n        return true;\r\n    };\r\n    /**\r\n     * Tests whether this ring is a hole.\r\n     *\r\n     * A ring is a hole if it is oriented counter-clockwise.\r\n     * Similar implementation of geos::algorithm::CGAlgorithms::isCCW\r\n     *\r\n     * @memberof EdgeRing\r\n     * @returns {boolean} - true: if it is a hole\r\n     */\r\n    EdgeRing.prototype.isHole = function () {\r\n        var _this = this;\r\n        // XXX: Assuming Ring is valid\r\n        // Find highest point\r\n        var hiIndex = this.edges.reduce(function (high, edge, i) {\r\n            if (edge.from.coordinates[1] > _this.edges[high].from.coordinates[1])\r\n                high = i;\r\n            return high;\r\n        }, 0), iPrev = (hiIndex === 0 ? this.length : hiIndex) - 1, iNext = (hiIndex + 1) % this.length, disc = orientationIndex(this.edges[iPrev].from.coordinates, this.edges[hiIndex].from.coordinates, this.edges[iNext].from.coordinates);\r\n        if (disc === 0)\r\n            return (this.edges[iPrev].from.coordinates[0] >\r\n                this.edges[iNext].from.coordinates[0]);\r\n        return disc > 0;\r\n    };\r\n    /**\r\n     * Creates a MultiPoint representing the EdgeRing (discarts edges directions).\r\n     *\r\n     * @memberof EdgeRing\r\n     * @returns {Feature<MultiPoint>} - Multipoint representation of the EdgeRing\r\n     */\r\n    EdgeRing.prototype.toMultiPoint = function () {\r\n        return multiPoint(this.edges.map(function (edge) { return edge.from.coordinates; }));\r\n    };\r\n    /**\r\n     * Creates a Polygon representing the EdgeRing.\r\n     *\r\n     * @memberof EdgeRing\r\n     * @returns {Feature<Polygon>} - Polygon representation of the Edge Ring\r\n     */\r\n    EdgeRing.prototype.toPolygon = function () {\r\n        if (this.polygon)\r\n            return this.polygon;\r\n        var coordinates = this.edges.map(function (edge) { return edge.from.coordinates; });\r\n        coordinates.push(this.edges[0].from.coordinates);\r\n        return (this.polygon = polygon([coordinates]));\r\n    };\r\n    /**\r\n     * Calculates the envelope of the EdgeRing.\r\n     *\r\n     * @memberof EdgeRing\r\n     * @returns {Feature<Polygon>} - envelope\r\n     */\r\n    EdgeRing.prototype.getEnvelope = function () {\r\n        if (this.envelope)\r\n            return this.envelope;\r\n        return (this.envelope = envelope(this.toPolygon()));\r\n    };\r\n    /**\r\n     * `geos::operation::polygonize::EdgeRing::findEdgeRingContaining`\r\n     *\r\n     * @param {EdgeRing} testEdgeRing - EdgeRing to look in the list\r\n     * @param {EdgeRing[]} shellList - List of EdgeRing in which to search\r\n     *\r\n     * @returns {EdgeRing} - EdgeRing which contains the testEdgeRing\r\n     */\r\n    EdgeRing.findEdgeRingContaining = function (testEdgeRing, shellList) {\r\n        var testEnvelope = testEdgeRing.getEnvelope();\r\n        var minEnvelope, minShell;\r\n        shellList.forEach(function (shell) {\r\n            var tryEnvelope = shell.getEnvelope();\r\n            if (minShell)\r\n                minEnvelope = minShell.getEnvelope();\r\n            // the hole envelope cannot equal the shell envelope\r\n            if (envelopeIsEqual(tryEnvelope, testEnvelope))\r\n                return;\r\n            if (envelopeContains(tryEnvelope, testEnvelope)) {\r\n                var testEdgeRingCoordinates = testEdgeRing.map(function (edge) { return edge.from.coordinates; });\r\n                var testPoint = void 0;\r\n                var _loop_1 = function (pt) {\r\n                    if (!shell.some(function (edge) { return coordinatesEqual(pt, edge.from.coordinates); })) {\r\n                        testPoint = pt;\r\n                    }\r\n                };\r\n                for (var _i = 0, testEdgeRingCoordinates_1 = testEdgeRingCoordinates; _i < testEdgeRingCoordinates_1.length; _i++) {\r\n                    var pt = testEdgeRingCoordinates_1[_i];\r\n                    _loop_1(pt);\r\n                }\r\n                if (testPoint && shell.inside(point(testPoint))) {\r\n                    if (!minShell || envelopeContains(minEnvelope, tryEnvelope))\r\n                        minShell = shell;\r\n                }\r\n            }\r\n        });\r\n        return minShell;\r\n    };\r\n    /**\r\n     * Checks if the point is inside the edgeRing\r\n     *\r\n     * @param {Feature<Point>} pt - Point to check if it is inside the edgeRing\r\n     * @returns {boolean} - True if it is inside, False otherwise\r\n     */\r\n    EdgeRing.prototype.inside = function (pt) {\r\n        return booleanPointInPolygon(pt, this.toPolygon());\r\n    };\r\n    return EdgeRing;\r\n}());\r\nexport default EdgeRing;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}