{"ast":null,"code":"import distance from \"@turf/distance\";\nimport { feature, featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\nimport tin from \"@turf/tin\";\nimport dissolve from \"./lib/turf-dissolve.js\";\n/**\r\n * Takes a set of {@link Point|points} and returns a concave hull Polygon or MultiPolygon.\r\n * Internally, this uses [turf-tin](https://github.com/Turfjs/turf-tin) to generate geometries.\r\n *\r\n * @name concave\r\n * @param {FeatureCollection<Point>} points input points\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {number} [options.maxEdge=Infinity] the length (in 'units') of an edge necessary for part of the\r\n * hull to become concave.\r\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\r\n * @returns {Feature<(Polygon|MultiPolygon)>|null} a concave hull (null value is returned if unable to compute hull)\r\n * @example\r\n * var points = turf.featureCollection([\r\n *   turf.point([-63.601226, 44.642643]),\r\n *   turf.point([-63.591442, 44.651436]),\r\n *   turf.point([-63.580799, 44.648749]),\r\n *   turf.point([-63.573589, 44.641788]),\r\n *   turf.point([-63.587665, 44.64533]),\r\n *   turf.point([-63.595218, 44.64765])\r\n * ]);\r\n * var options = {units: 'miles', maxEdge: 1};\r\n *\r\n * var hull = turf.concave(points, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [points, hull]\r\n */\n\nfunction concave(points, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var maxEdge = options.maxEdge || Infinity;\n  var cleaned = removeDuplicates(points);\n  var tinPolys = tin(cleaned); // calculate length of all edges and area of all triangles\n  // and remove triangles that fail the max length test\n\n  tinPolys.features = tinPolys.features.filter(function (triangle) {\n    var pt1 = triangle.geometry.coordinates[0][0];\n    var pt2 = triangle.geometry.coordinates[0][1];\n    var pt3 = triangle.geometry.coordinates[0][2];\n    var dist1 = distance(pt1, pt2, options);\n    var dist2 = distance(pt2, pt3, options);\n    var dist3 = distance(pt1, pt3, options);\n    return dist1 <= maxEdge && dist2 <= maxEdge && dist3 <= maxEdge;\n  });\n\n  if (tinPolys.features.length < 1) {\n    return null;\n  } // merge the adjacent triangles\n\n\n  var dissolved = dissolve(tinPolys); // geojson-dissolve always returns a MultiPolygon\n\n  if (dissolved.coordinates.length === 1) {\n    dissolved.coordinates = dissolved.coordinates[0];\n    dissolved.type = \"Polygon\";\n  }\n\n  return feature(dissolved);\n}\n/**\r\n * Removes duplicated points in a collection returning a new collection\r\n *\r\n * @private\r\n * @param {FeatureCollection<Point>} points to be cleaned\r\n * @returns {FeatureCollection<Point>} cleaned set of points\r\n */\n\n\nfunction removeDuplicates(points) {\n  var cleaned = [];\n  var existing = {};\n  featureEach(points, function (pt) {\n    if (!pt.geometry) {\n      return;\n    }\n\n    var key = pt.geometry.coordinates.join(\"-\");\n\n    if (!Object.prototype.hasOwnProperty.call(existing, key)) {\n      cleaned.push(pt);\n      existing[key] = true;\n    }\n  });\n  return featureCollection(cleaned);\n}\n\nexport default concave;","map":{"version":3,"names":["distance","feature","featureCollection","featureEach","tin","dissolve","concave","points","options","maxEdge","Infinity","cleaned","removeDuplicates","tinPolys","features","filter","triangle","pt1","geometry","coordinates","pt2","pt3","dist1","dist2","dist3","length","dissolved","type","existing","pt","key","join","Object","prototype","hasOwnProperty","call","push"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/concave/dist/es/index.js"],"sourcesContent":["import distance from \"@turf/distance\";\r\nimport { feature, featureCollection } from \"@turf/helpers\";\r\nimport { featureEach } from \"@turf/meta\";\r\nimport tin from \"@turf/tin\";\r\nimport dissolve from \"./lib/turf-dissolve.js\";\r\n/**\r\n * Takes a set of {@link Point|points} and returns a concave hull Polygon or MultiPolygon.\r\n * Internally, this uses [turf-tin](https://github.com/Turfjs/turf-tin) to generate geometries.\r\n *\r\n * @name concave\r\n * @param {FeatureCollection<Point>} points input points\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {number} [options.maxEdge=Infinity] the length (in 'units') of an edge necessary for part of the\r\n * hull to become concave.\r\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\r\n * @returns {Feature<(Polygon|MultiPolygon)>|null} a concave hull (null value is returned if unable to compute hull)\r\n * @example\r\n * var points = turf.featureCollection([\r\n *   turf.point([-63.601226, 44.642643]),\r\n *   turf.point([-63.591442, 44.651436]),\r\n *   turf.point([-63.580799, 44.648749]),\r\n *   turf.point([-63.573589, 44.641788]),\r\n *   turf.point([-63.587665, 44.64533]),\r\n *   turf.point([-63.595218, 44.64765])\r\n * ]);\r\n * var options = {units: 'miles', maxEdge: 1};\r\n *\r\n * var hull = turf.concave(points, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [points, hull]\r\n */\r\nfunction concave(points, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var maxEdge = options.maxEdge || Infinity;\r\n    var cleaned = removeDuplicates(points);\r\n    var tinPolys = tin(cleaned);\r\n    // calculate length of all edges and area of all triangles\r\n    // and remove triangles that fail the max length test\r\n    tinPolys.features = tinPolys.features.filter(function (triangle) {\r\n        var pt1 = triangle.geometry.coordinates[0][0];\r\n        var pt2 = triangle.geometry.coordinates[0][1];\r\n        var pt3 = triangle.geometry.coordinates[0][2];\r\n        var dist1 = distance(pt1, pt2, options);\r\n        var dist2 = distance(pt2, pt3, options);\r\n        var dist3 = distance(pt1, pt3, options);\r\n        return dist1 <= maxEdge && dist2 <= maxEdge && dist3 <= maxEdge;\r\n    });\r\n    if (tinPolys.features.length < 1) {\r\n        return null;\r\n    }\r\n    // merge the adjacent triangles\r\n    var dissolved = dissolve(tinPolys);\r\n    // geojson-dissolve always returns a MultiPolygon\r\n    if (dissolved.coordinates.length === 1) {\r\n        dissolved.coordinates = dissolved.coordinates[0];\r\n        dissolved.type = \"Polygon\";\r\n    }\r\n    return feature(dissolved);\r\n}\r\n/**\r\n * Removes duplicated points in a collection returning a new collection\r\n *\r\n * @private\r\n * @param {FeatureCollection<Point>} points to be cleaned\r\n * @returns {FeatureCollection<Point>} cleaned set of points\r\n */\r\nfunction removeDuplicates(points) {\r\n    var cleaned = [];\r\n    var existing = {};\r\n    featureEach(points, function (pt) {\r\n        if (!pt.geometry) {\r\n            return;\r\n        }\r\n        var key = pt.geometry.coordinates.join(\"-\");\r\n        if (!Object.prototype.hasOwnProperty.call(existing, key)) {\r\n            cleaned.push(pt);\r\n            existing[key] = true;\r\n        }\r\n    });\r\n    return featureCollection(cleaned);\r\n}\r\nexport default concave;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}