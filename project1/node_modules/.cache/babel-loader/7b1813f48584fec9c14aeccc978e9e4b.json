{"ast":null,"code":"/**\r\n * DBSCAN - Density based clustering\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\n\n/**\r\n * DBSCAN class construcotr\r\n * @constructor\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distanceFunction\r\n * @returns {DBSCAN}\r\n */\nfunction DBSCAN(dataset, epsilon, minPts, distanceFunction) {\n  /** @type {Array} */\n  this.dataset = [];\n  /** @type {number} */\n\n  this.epsilon = 1;\n  /** @type {number} */\n\n  this.minPts = 2;\n  /** @type {function} */\n\n  this.distance = this._euclideanDistance;\n  /** @type {Array} */\n\n  this.clusters = [];\n  /** @type {Array} */\n\n  this.noise = []; // temporary variables used during computation\n\n  /** @type {Array} */\n\n  this._visited = [];\n  /** @type {Array} */\n\n  this._assigned = [];\n  /** @type {number} */\n\n  this._datasetLength = 0;\n\n  this._init(dataset, epsilon, minPts, distanceFunction);\n}\n\n;\n/******************************************************************************/\n// public functions\n\n/**\r\n * Start clustering\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distanceFunction\r\n * @returns {undefined}\r\n * @access public\r\n */\n\nDBSCAN.prototype.run = function (dataset, epsilon, minPts, distanceFunction) {\n  this._init(dataset, epsilon, minPts, distanceFunction);\n\n  for (var pointId = 0; pointId < this._datasetLength; pointId++) {\n    // if point is not visited, check if it forms a cluster\n    if (this._visited[pointId] !== 1) {\n      this._visited[pointId] = 1; // if closest neighborhood is too small to form a cluster, mark as noise\n\n      var neighbors = this._regionQuery(pointId);\n\n      if (neighbors.length < this.minPts) {\n        this.noise.push(pointId);\n      } else {\n        // create new cluster and add point\n        var clusterId = this.clusters.length;\n        this.clusters.push([]);\n\n        this._addToCluster(pointId, clusterId);\n\n        this._expandCluster(clusterId, neighbors);\n      }\n    }\n  }\n\n  return this.clusters;\n};\n/******************************************************************************/\n// protected functions\n\n/**\r\n * Set object properties\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distance\r\n * @returns {undefined}\r\n * @access protected\r\n */\n\n\nDBSCAN.prototype._init = function (dataset, epsilon, minPts, distance) {\n  if (dataset) {\n    if (!(dataset instanceof Array)) {\n      throw Error('Dataset must be of type array, ' + typeof dataset + ' given');\n    }\n\n    this.dataset = dataset;\n    this.clusters = [];\n    this.noise = [];\n    this._datasetLength = dataset.length;\n    this._visited = new Array(this._datasetLength);\n    this._assigned = new Array(this._datasetLength);\n  }\n\n  if (epsilon) {\n    this.epsilon = epsilon;\n  }\n\n  if (minPts) {\n    this.minPts = minPts;\n  }\n\n  if (distance) {\n    this.distance = distance;\n  }\n};\n/**\r\n * Expand cluster to closest points of given neighborhood\r\n *\r\n * @param {number} clusterId\r\n * @param {Array} neighbors\r\n * @returns {undefined}\r\n * @access protected\r\n */\n\n\nDBSCAN.prototype._expandCluster = function (clusterId, neighbors) {\n  /**\r\n   * It's very important to calculate length of neighbors array each time,\r\n   * as the number of elements changes over time\r\n   */\n  for (var i = 0; i < neighbors.length; i++) {\n    var pointId2 = neighbors[i];\n\n    if (this._visited[pointId2] !== 1) {\n      this._visited[pointId2] = 1;\n\n      var neighbors2 = this._regionQuery(pointId2);\n\n      if (neighbors2.length >= this.minPts) {\n        neighbors = this._mergeArrays(neighbors, neighbors2);\n      }\n    } // add to cluster\n\n\n    if (this._assigned[pointId2] !== 1) {\n      this._addToCluster(pointId2, clusterId);\n    }\n  }\n};\n/**\r\n * Add new point to cluster\r\n *\r\n * @param {number} pointId\r\n * @param {number} clusterId\r\n */\n\n\nDBSCAN.prototype._addToCluster = function (pointId, clusterId) {\n  this.clusters[clusterId].push(pointId);\n  this._assigned[pointId] = 1;\n};\n/**\r\n * Find all neighbors around given point\r\n *\r\n * @param {number} pointId,\r\n * @param {number} epsilon\r\n * @returns {Array}\r\n * @access protected\r\n */\n\n\nDBSCAN.prototype._regionQuery = function (pointId) {\n  var neighbors = [];\n\n  for (var id = 0; id < this._datasetLength; id++) {\n    var dist = this.distance(this.dataset[pointId], this.dataset[id]);\n\n    if (dist < this.epsilon) {\n      neighbors.push(id);\n    }\n  }\n\n  return neighbors;\n};\n/******************************************************************************/\n// helpers\n\n/**\r\n * @param {Array} a\r\n * @param {Array} b\r\n * @returns {Array}\r\n * @access protected\r\n */\n\n\nDBSCAN.prototype._mergeArrays = function (a, b) {\n  var len = b.length;\n\n  for (var i = 0; i < len; i++) {\n    var P = b[i];\n\n    if (a.indexOf(P) < 0) {\n      a.push(P);\n    }\n  }\n\n  return a;\n};\n/**\r\n * Calculate euclidean distance in multidimensional space\r\n *\r\n * @param {Array} p\r\n * @param {Array} q\r\n * @returns {number}\r\n * @access protected\r\n */\n\n\nDBSCAN.prototype._euclideanDistance = function (p, q) {\n  var sum = 0;\n  var i = Math.min(p.length, q.length);\n\n  while (i--) {\n    sum += (p[i] - q[i]) * (p[i] - q[i]);\n  }\n\n  return Math.sqrt(sum);\n};\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = DBSCAN;\n}","map":{"version":3,"names":["DBSCAN","dataset","epsilon","minPts","distanceFunction","distance","_euclideanDistance","clusters","noise","_visited","_assigned","_datasetLength","_init","prototype","run","pointId","neighbors","_regionQuery","length","push","clusterId","_addToCluster","_expandCluster","Array","Error","i","pointId2","neighbors2","_mergeArrays","id","dist","a","b","len","P","indexOf","p","q","sum","Math","min","sqrt","module","exports"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/density-clustering/lib/DBSCAN.js"],"sourcesContent":["/**\r\n * DBSCAN - Density based clustering\r\n *\r\n * @author Lukasz Krawczyk <contact@lukaszkrawczyk.eu>\r\n * @copyright MIT\r\n */\r\n\r\n/**\r\n * DBSCAN class construcotr\r\n * @constructor\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distanceFunction\r\n * @returns {DBSCAN}\r\n */\r\nfunction DBSCAN(dataset, epsilon, minPts, distanceFunction) {\r\n  /** @type {Array} */\r\n  this.dataset = [];\r\n  /** @type {number} */\r\n  this.epsilon = 1;\r\n  /** @type {number} */\r\n  this.minPts = 2;\r\n  /** @type {function} */\r\n  this.distance = this._euclideanDistance;\r\n  /** @type {Array} */\r\n  this.clusters = [];\r\n  /** @type {Array} */\r\n  this.noise = [];\r\n\r\n  // temporary variables used during computation\r\n\r\n  /** @type {Array} */\r\n  this._visited = [];\r\n  /** @type {Array} */\r\n  this._assigned = [];\r\n  /** @type {number} */\r\n  this._datasetLength = 0;\r\n\r\n  this._init(dataset, epsilon, minPts, distanceFunction);\r\n};\r\n\r\n/******************************************************************************/\r\n// public functions\r\n\r\n/**\r\n * Start clustering\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distanceFunction\r\n * @returns {undefined}\r\n * @access public\r\n */\r\nDBSCAN.prototype.run = function(dataset, epsilon, minPts, distanceFunction) {\r\n  this._init(dataset, epsilon, minPts, distanceFunction);\r\n\r\n  for (var pointId = 0; pointId < this._datasetLength; pointId++) {\r\n    // if point is not visited, check if it forms a cluster\r\n    if (this._visited[pointId] !== 1) {\r\n      this._visited[pointId] = 1;\r\n\r\n      // if closest neighborhood is too small to form a cluster, mark as noise\r\n      var neighbors = this._regionQuery(pointId);\r\n\r\n      if (neighbors.length < this.minPts) {\r\n        this.noise.push(pointId);\r\n      } else {\r\n        // create new cluster and add point\r\n        var clusterId = this.clusters.length;\r\n        this.clusters.push([]);\r\n        this._addToCluster(pointId, clusterId);\r\n\r\n        this._expandCluster(clusterId, neighbors);\r\n      }\r\n    }\r\n  }\r\n\r\n  return this.clusters;\r\n};\r\n\r\n/******************************************************************************/\r\n// protected functions\r\n\r\n/**\r\n * Set object properties\r\n *\r\n * @param {Array} dataset\r\n * @param {number} epsilon\r\n * @param {number} minPts\r\n * @param {function} distance\r\n * @returns {undefined}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._init = function(dataset, epsilon, minPts, distance) {\r\n\r\n  if (dataset) {\r\n\r\n    if (!(dataset instanceof Array)) {\r\n      throw Error('Dataset must be of type array, ' +\r\n        typeof dataset + ' given');\r\n    }\r\n\r\n    this.dataset = dataset;\r\n    this.clusters = [];\r\n    this.noise = [];\r\n\r\n    this._datasetLength = dataset.length;\r\n    this._visited = new Array(this._datasetLength);\r\n    this._assigned = new Array(this._datasetLength);\r\n  }\r\n\r\n  if (epsilon) {\r\n    this.epsilon = epsilon;\r\n  }\r\n\r\n  if (minPts) {\r\n    this.minPts = minPts;\r\n  }\r\n\r\n  if (distance) {\r\n    this.distance = distance;\r\n  }\r\n};\r\n\r\n/**\r\n * Expand cluster to closest points of given neighborhood\r\n *\r\n * @param {number} clusterId\r\n * @param {Array} neighbors\r\n * @returns {undefined}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._expandCluster = function(clusterId, neighbors) {\r\n\r\n  /**\r\n   * It's very important to calculate length of neighbors array each time,\r\n   * as the number of elements changes over time\r\n   */\r\n  for (var i = 0; i < neighbors.length; i++) {\r\n    var pointId2 = neighbors[i];\r\n\r\n    if (this._visited[pointId2] !== 1) {\r\n      this._visited[pointId2] = 1;\r\n      var neighbors2 = this._regionQuery(pointId2);\r\n\r\n      if (neighbors2.length >= this.minPts) {\r\n        neighbors = this._mergeArrays(neighbors, neighbors2);\r\n      }\r\n    }\r\n\r\n    // add to cluster\r\n    if (this._assigned[pointId2] !== 1) {\r\n      this._addToCluster(pointId2, clusterId);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Add new point to cluster\r\n *\r\n * @param {number} pointId\r\n * @param {number} clusterId\r\n */\r\nDBSCAN.prototype._addToCluster = function(pointId, clusterId) {\r\n  this.clusters[clusterId].push(pointId);\r\n  this._assigned[pointId] = 1;\r\n};\r\n\r\n/**\r\n * Find all neighbors around given point\r\n *\r\n * @param {number} pointId,\r\n * @param {number} epsilon\r\n * @returns {Array}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._regionQuery = function(pointId) {\r\n  var neighbors = [];\r\n\r\n  for (var id = 0; id < this._datasetLength; id++) {\r\n    var dist = this.distance(this.dataset[pointId], this.dataset[id]);\r\n    if (dist < this.epsilon) {\r\n      neighbors.push(id);\r\n    }\r\n  }\r\n\r\n  return neighbors;\r\n};\r\n\r\n/******************************************************************************/\r\n// helpers\r\n\r\n/**\r\n * @param {Array} a\r\n * @param {Array} b\r\n * @returns {Array}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._mergeArrays = function(a, b) {\r\n  var len = b.length;\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    var P = b[i];\r\n    if (a.indexOf(P) < 0) {\r\n      a.push(P);\r\n    }\r\n  }\r\n\r\n  return a;\r\n};\r\n\r\n/**\r\n * Calculate euclidean distance in multidimensional space\r\n *\r\n * @param {Array} p\r\n * @param {Array} q\r\n * @returns {number}\r\n * @access protected\r\n */\r\nDBSCAN.prototype._euclideanDistance = function(p, q) {\r\n  var sum = 0;\r\n  var i = Math.min(p.length, q.length);\r\n\r\n  while (i--) {\r\n    sum += (p[i] - q[i]) * (p[i] - q[i]);\r\n  }\r\n\r\n  return Math.sqrt(sum);\r\n};\r\n\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = DBSCAN;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}