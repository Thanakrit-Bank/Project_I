{"ast":null,"code":"import { abs, asin, atan2, cos, epsilon, sign, sin, sqrt } from \"../math\";\nimport { conicProjection } from \"./conic\";\nimport { cylindricalEqualAreaRaw } from \"./cylindricalEqualArea\";\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0),\n      n = (sy0 + sin(y1)) / 2; // Are the parallels symmetrical around the Equator?\n\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n  var c = 1 + sy0 * (2 * n - sy0),\n      r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function (x, y) {\n    var r0y = r0 - y;\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\nexport default function () {\n  return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);\n}","map":{"version":3,"names":["abs","asin","atan2","cos","epsilon","sign","sin","sqrt","conicProjection","cylindricalEqualAreaRaw","conicEqualAreaRaw","y0","y1","sy0","n","c","r0","project","x","y","r","invert","r0y","scale","center"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/d3-geo/src/projection/conicEqualArea.js"],"sourcesContent":["import {abs, asin, atan2, cos, epsilon, sign, sin, sqrt} from \"../math\";\r\nimport {conicProjection} from \"./conic\";\r\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea\";\r\n\r\nexport function conicEqualAreaRaw(y0, y1) {\r\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\r\n\r\n  // Are the parallels symmetrical around the Equator?\r\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\r\n\r\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\r\n\r\n  function project(x, y) {\r\n    var r = sqrt(c - 2 * n * sin(y)) / n;\r\n    return [r * sin(x *= n), r0 - r * cos(x)];\r\n  }\r\n\r\n  project.invert = function(x, y) {\r\n    var r0y = r0 - y;\r\n    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\r\n  };\r\n\r\n  return project;\r\n}\r\n\r\nexport default function() {\r\n  return conicProjection(conicEqualAreaRaw)\r\n      .scale(155.424)\r\n      .center([0, 33.6442]);\r\n}\r\n"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,GAA1B,EAA+BC,OAA/B,EAAwCC,IAAxC,EAA8CC,GAA9C,EAAmDC,IAAnD,QAA8D,SAA9D;AACA,SAAQC,eAAR,QAA8B,SAA9B;AACA,SAAQC,uBAAR,QAAsC,wBAAtC;AAEA,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,EAA/B,EAAmC;EACxC,IAAIC,GAAG,GAAGP,GAAG,CAACK,EAAD,CAAb;EAAA,IAAmBG,CAAC,GAAG,CAACD,GAAG,GAAGP,GAAG,CAACM,EAAD,CAAV,IAAkB,CAAzC,CADwC,CAGxC;;EACA,IAAIZ,GAAG,CAACc,CAAD,CAAH,GAASV,OAAb,EAAsB,OAAOK,uBAAuB,CAACE,EAAD,CAA9B;EAEtB,IAAII,CAAC,GAAG,IAAIF,GAAG,IAAI,IAAIC,CAAJ,GAAQD,GAAZ,CAAf;EAAA,IAAiCG,EAAE,GAAGT,IAAI,CAACQ,CAAD,CAAJ,GAAUD,CAAhD;;EAEA,SAASG,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;IACrB,IAAIC,CAAC,GAAGb,IAAI,CAACQ,CAAC,GAAG,IAAID,CAAJ,GAAQR,GAAG,CAACa,CAAD,CAAhB,CAAJ,GAA2BL,CAAnC;IACA,OAAO,CAACM,CAAC,GAAGd,GAAG,CAACY,CAAC,IAAIJ,CAAN,CAAR,EAAkBE,EAAE,GAAGI,CAAC,GAAGjB,GAAG,CAACe,CAAD,CAA9B,CAAP;EACD;;EAEDD,OAAO,CAACI,MAAR,GAAiB,UAASH,CAAT,EAAYC,CAAZ,EAAe;IAC9B,IAAIG,GAAG,GAAGN,EAAE,GAAGG,CAAf;IACA,OAAO,CAACjB,KAAK,CAACgB,CAAD,EAAIlB,GAAG,CAACsB,GAAD,CAAP,CAAL,GAAqBR,CAArB,GAAyBT,IAAI,CAACiB,GAAD,CAA9B,EAAqCrB,IAAI,CAAC,CAACc,CAAC,GAAG,CAACG,CAAC,GAAGA,CAAJ,GAAQI,GAAG,GAAGA,GAAf,IAAsBR,CAAtB,GAA0BA,CAA/B,KAAqC,IAAIA,CAAzC,CAAD,CAAzC,CAAP;EACD,CAHD;;EAKA,OAAOG,OAAP;AACD;AAED,eAAe,YAAW;EACxB,OAAOT,eAAe,CAACE,iBAAD,CAAf,CACFa,KADE,CACI,OADJ,EAEFC,MAFE,CAEK,CAAC,CAAD,EAAI,OAAJ,CAFL,CAAP;AAGD"},"metadata":{},"sourceType":"module"}