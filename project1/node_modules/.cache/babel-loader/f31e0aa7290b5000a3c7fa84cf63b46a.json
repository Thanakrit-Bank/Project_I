{"ast":null,"code":"import { featureCollection } from \"@turf/helpers\";\nimport Graph from \"./lib/Graph.js\";\nimport EdgeRing from \"./lib/EdgeRing.js\";\n/**\n * Polygonizes {@link LineString|(Multi)LineString(s)} into {@link Polygons}.\n *\n * Implementation of GEOSPolygonize function (`geos::operation::polygonize::Polygonizer`).\n *\n * Polygonizes a set of lines that represents edges in a planar graph. Edges must be correctly\n * noded, i.e., they must only meet at their endpoints.\n *\n * The implementation correctly handles:\n *\n * - Dangles: edges which have one or both ends which are not incident on another edge endpoint.\n * - Cut Edges (bridges): edges that are connected at both ends but which do not form part of a polygon.\n *\n * @name polygonize\n * @param {FeatureCollection|Geometry|Feature<LineString|MultiLineString>} geoJson Lines in order to polygonize\n * @returns {FeatureCollection<Polygon>} Polygons created\n * @throws {Error} if geoJson is invalid.\n */\n\nexport default function polygonize(geoJson) {\n  var graph = Graph.fromGeoJson(geoJson); // 1. Remove dangle node\n\n  graph.deleteDangles(); // 2. Remove cut-edges (bridge edges)\n\n  graph.deleteCutEdges(); // 3. Get all holes and shells\n\n  var holes = [],\n      shells = [];\n  graph.getEdgeRings().filter(function (edgeRing) {\n    return edgeRing.isValid();\n  }).forEach(function (edgeRing) {\n    if (edgeRing.isHole()) holes.push(edgeRing);else shells.push(edgeRing);\n  }); // 4. Assign Holes to Shells\n\n  holes.forEach(function (hole) {\n    if (EdgeRing.findEdgeRingContaining(hole, shells)) shells.push(hole);\n  }); // 5. EdgeRings to Polygons\n\n  return featureCollection(shells.map(function (shell) {\n    return shell.toPolygon();\n  }));\n}","map":{"version":3,"names":["featureCollection","Graph","EdgeRing","polygonize","geoJson","graph","fromGeoJson","deleteDangles","deleteCutEdges","holes","shells","getEdgeRings","filter","edgeRing","isValid","forEach","isHole","push","hole","findEdgeRingContaining","map","shell","toPolygon"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/polygonize/dist/es/index.js"],"sourcesContent":["import { featureCollection } from \"@turf/helpers\";\nimport Graph from \"./lib/Graph.js\";\nimport EdgeRing from \"./lib/EdgeRing.js\";\n/**\n * Polygonizes {@link LineString|(Multi)LineString(s)} into {@link Polygons}.\n *\n * Implementation of GEOSPolygonize function (`geos::operation::polygonize::Polygonizer`).\n *\n * Polygonizes a set of lines that represents edges in a planar graph. Edges must be correctly\n * noded, i.e., they must only meet at their endpoints.\n *\n * The implementation correctly handles:\n *\n * - Dangles: edges which have one or both ends which are not incident on another edge endpoint.\n * - Cut Edges (bridges): edges that are connected at both ends but which do not form part of a polygon.\n *\n * @name polygonize\n * @param {FeatureCollection|Geometry|Feature<LineString|MultiLineString>} geoJson Lines in order to polygonize\n * @returns {FeatureCollection<Polygon>} Polygons created\n * @throws {Error} if geoJson is invalid.\n */\nexport default function polygonize(geoJson) {\n    var graph = Graph.fromGeoJson(geoJson);\n    // 1. Remove dangle node\n    graph.deleteDangles();\n    // 2. Remove cut-edges (bridge edges)\n    graph.deleteCutEdges();\n    // 3. Get all holes and shells\n    var holes = [], shells = [];\n    graph\n        .getEdgeRings()\n        .filter(function (edgeRing) { return edgeRing.isValid(); })\n        .forEach(function (edgeRing) {\n        if (edgeRing.isHole())\n            holes.push(edgeRing);\n        else\n            shells.push(edgeRing);\n    });\n    // 4. Assign Holes to Shells\n    holes.forEach(function (hole) {\n        if (EdgeRing.findEdgeRingContaining(hole, shells))\n            shells.push(hole);\n    });\n    // 5. EdgeRings to Polygons\n    return featureCollection(shells.map(function (shell) { return shell.toPolygon(); }));\n}\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,eAAlC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAA6B;EACxC,IAAIC,KAAK,GAAGJ,KAAK,CAACK,WAAN,CAAkBF,OAAlB,CAAZ,CADwC,CAExC;;EACAC,KAAK,CAACE,aAAN,GAHwC,CAIxC;;EACAF,KAAK,CAACG,cAAN,GALwC,CAMxC;;EACA,IAAIC,KAAK,GAAG,EAAZ;EAAA,IAAgBC,MAAM,GAAG,EAAzB;EACAL,KAAK,CACAM,YADL,GAEKC,MAFL,CAEY,UAAUC,QAAV,EAAoB;IAAE,OAAOA,QAAQ,CAACC,OAAT,EAAP;EAA4B,CAF9D,EAGKC,OAHL,CAGa,UAAUF,QAAV,EAAoB;IAC7B,IAAIA,QAAQ,CAACG,MAAT,EAAJ,EACIP,KAAK,CAACQ,IAAN,CAAWJ,QAAX,EADJ,KAGIH,MAAM,CAACO,IAAP,CAAYJ,QAAZ;EACP,CARD,EARwC,CAiBxC;;EACAJ,KAAK,CAACM,OAAN,CAAc,UAAUG,IAAV,EAAgB;IAC1B,IAAIhB,QAAQ,CAACiB,sBAAT,CAAgCD,IAAhC,EAAsCR,MAAtC,CAAJ,EACIA,MAAM,CAACO,IAAP,CAAYC,IAAZ;EACP,CAHD,EAlBwC,CAsBxC;;EACA,OAAOlB,iBAAiB,CAACU,MAAM,CAACU,GAAP,CAAW,UAAUC,KAAV,EAAiB;IAAE,OAAOA,KAAK,CAACC,SAAN,EAAP;EAA2B,CAAzD,CAAD,CAAxB;AACH"},"metadata":{},"sourceType":"module"}