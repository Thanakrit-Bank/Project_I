{"ast":null,"code":"import clone from \"@turf/clone\";\nimport distance from \"@turf/distance\";\nimport { featureEach } from \"@turf/meta\";\n/**\r\n * Takes a reference {@link Point|point} and a FeatureCollection of Features\r\n * with Point geometries and returns the\r\n * point from the FeatureCollection closest to the reference. This calculation\r\n * is geodesic.\r\n *\r\n * @name nearestPoint\r\n * @param {Coord} targetPoint the reference point\r\n * @param {FeatureCollection<Point>} points against input point set\r\n * @returns {Feature<Point>} the closest point in the set to the reference point\r\n * @example\r\n * var targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\r\n * var points = turf.featureCollection([\r\n *     turf.point([28.973865, 41.011122]),\r\n *     turf.point([28.948459, 41.024204]),\r\n *     turf.point([28.938674, 41.013324])\r\n * ]);\r\n *\r\n * var nearest = turf.nearestPoint(targetPoint, points);\r\n *\r\n * //addToMap\r\n * var addToMap = [targetPoint, points, nearest];\r\n * nearest.properties['marker-color'] = '#F00';\r\n */\n\nfunction nearestPoint(targetPoint, points) {\n  // Input validation\n  if (!targetPoint) throw new Error(\"targetPoint is required\");\n  if (!points) throw new Error(\"points is required\");\n  var nearest;\n  var minDist = Infinity;\n  var bestFeatureIndex = 0;\n  featureEach(points, function (pt, featureIndex) {\n    var distanceToPoint = distance(targetPoint, pt);\n\n    if (distanceToPoint < minDist) {\n      bestFeatureIndex = featureIndex;\n      minDist = distanceToPoint;\n    }\n  });\n  nearest = clone(points.features[bestFeatureIndex]);\n  nearest.properties.featureIndex = bestFeatureIndex;\n  nearest.properties.distanceToPoint = minDist;\n  return nearest;\n}\n\nexport default nearestPoint;","map":{"version":3,"names":["clone","distance","featureEach","nearestPoint","targetPoint","points","Error","nearest","minDist","Infinity","bestFeatureIndex","pt","featureIndex","distanceToPoint","features","properties"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/nearest-point/dist/es/index.js"],"sourcesContent":["import clone from \"@turf/clone\";\r\nimport distance from \"@turf/distance\";\r\nimport { featureEach } from \"@turf/meta\";\r\n/**\r\n * Takes a reference {@link Point|point} and a FeatureCollection of Features\r\n * with Point geometries and returns the\r\n * point from the FeatureCollection closest to the reference. This calculation\r\n * is geodesic.\r\n *\r\n * @name nearestPoint\r\n * @param {Coord} targetPoint the reference point\r\n * @param {FeatureCollection<Point>} points against input point set\r\n * @returns {Feature<Point>} the closest point in the set to the reference point\r\n * @example\r\n * var targetPoint = turf.point([28.965797, 41.010086], {\"marker-color\": \"#0F0\"});\r\n * var points = turf.featureCollection([\r\n *     turf.point([28.973865, 41.011122]),\r\n *     turf.point([28.948459, 41.024204]),\r\n *     turf.point([28.938674, 41.013324])\r\n * ]);\r\n *\r\n * var nearest = turf.nearestPoint(targetPoint, points);\r\n *\r\n * //addToMap\r\n * var addToMap = [targetPoint, points, nearest];\r\n * nearest.properties['marker-color'] = '#F00';\r\n */\r\nfunction nearestPoint(targetPoint, points) {\r\n    // Input validation\r\n    if (!targetPoint)\r\n        throw new Error(\"targetPoint is required\");\r\n    if (!points)\r\n        throw new Error(\"points is required\");\r\n    var nearest;\r\n    var minDist = Infinity;\r\n    var bestFeatureIndex = 0;\r\n    featureEach(points, function (pt, featureIndex) {\r\n        var distanceToPoint = distance(targetPoint, pt);\r\n        if (distanceToPoint < minDist) {\r\n            bestFeatureIndex = featureIndex;\r\n            minDist = distanceToPoint;\r\n        }\r\n    });\r\n    nearest = clone(points.features[bestFeatureIndex]);\r\n    nearest.properties.featureIndex = bestFeatureIndex;\r\n    nearest.properties.distanceToPoint = minDist;\r\n    return nearest;\r\n}\r\nexport default nearestPoint;\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,WAAtB,EAAmCC,MAAnC,EAA2C;EACvC;EACA,IAAI,CAACD,WAAL,EACI,MAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;EACJ,IAAI,CAACD,MAAL,EACI,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;EACJ,IAAIC,OAAJ;EACA,IAAIC,OAAO,GAAGC,QAAd;EACA,IAAIC,gBAAgB,GAAG,CAAvB;EACAR,WAAW,CAACG,MAAD,EAAS,UAAUM,EAAV,EAAcC,YAAd,EAA4B;IAC5C,IAAIC,eAAe,GAAGZ,QAAQ,CAACG,WAAD,EAAcO,EAAd,CAA9B;;IACA,IAAIE,eAAe,GAAGL,OAAtB,EAA+B;MAC3BE,gBAAgB,GAAGE,YAAnB;MACAJ,OAAO,GAAGK,eAAV;IACH;EACJ,CANU,CAAX;EAOAN,OAAO,GAAGP,KAAK,CAACK,MAAM,CAACS,QAAP,CAAgBJ,gBAAhB,CAAD,CAAf;EACAH,OAAO,CAACQ,UAAR,CAAmBH,YAAnB,GAAkCF,gBAAlC;EACAH,OAAO,CAACQ,UAAR,CAAmBF,eAAnB,GAAqCL,OAArC;EACA,OAAOD,OAAP;AACH;;AACD,eAAeJ,YAAf"},"metadata":{},"sourceType":"module"}