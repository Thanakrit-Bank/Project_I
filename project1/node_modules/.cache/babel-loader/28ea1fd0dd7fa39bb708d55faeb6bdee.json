{"ast":null,"code":"import distance from '@turf/distance';\n/**\r\n * Takes a bounding box and calculates the minimum square bounding box that\r\n * would contain the input.\r\n *\r\n * @name square\r\n * @param {BBox} bbox extent in [west, south, east, north] order\r\n * @returns {BBox} a square surrounding `bbox`\r\n * @example\r\n * var bbox = [-20, -20, -15, 0];\r\n * var squared = turf.square(bbox);\r\n *\r\n * //addToMap\r\n * var addToMap = [turf.bboxPolygon(bbox), turf.bboxPolygon(squared)]\r\n */\n\nfunction square(bbox) {\n  var west = bbox[0];\n  var south = bbox[1];\n  var east = bbox[2];\n  var north = bbox[3];\n  var horizontalDistance = distance(bbox.slice(0, 2), [east, south]);\n  var verticalDistance = distance(bbox.slice(0, 2), [west, north]);\n\n  if (horizontalDistance >= verticalDistance) {\n    var verticalMidpoint = (south + north) / 2;\n    return [west, verticalMidpoint - (east - west) / 2, east, verticalMidpoint + (east - west) / 2];\n  } else {\n    var horizontalMidpoint = (west + east) / 2;\n    return [horizontalMidpoint - (north - south) / 2, south, horizontalMidpoint + (north - south) / 2, north];\n  }\n}\n\nexport default square;","map":{"version":3,"names":["distance","square","bbox","west","south","east","north","horizontalDistance","slice","verticalDistance","verticalMidpoint","horizontalMidpoint"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/square/dist/es/index.js"],"sourcesContent":["import distance from '@turf/distance';\r\n\r\n/**\r\n * Takes a bounding box and calculates the minimum square bounding box that\r\n * would contain the input.\r\n *\r\n * @name square\r\n * @param {BBox} bbox extent in [west, south, east, north] order\r\n * @returns {BBox} a square surrounding `bbox`\r\n * @example\r\n * var bbox = [-20, -20, -15, 0];\r\n * var squared = turf.square(bbox);\r\n *\r\n * //addToMap\r\n * var addToMap = [turf.bboxPolygon(bbox), turf.bboxPolygon(squared)]\r\n */\r\nfunction square(bbox) {\r\n  var west = bbox[0];\r\n  var south = bbox[1];\r\n  var east = bbox[2];\r\n  var north = bbox[3];\r\n\r\n  var horizontalDistance = distance(bbox.slice(0, 2), [east, south]);\r\n  var verticalDistance = distance(bbox.slice(0, 2), [west, north]);\r\n  if (horizontalDistance >= verticalDistance) {\r\n    var verticalMidpoint = (south + north) / 2;\r\n    return [\r\n      west,\r\n      verticalMidpoint - (east - west) / 2,\r\n      east,\r\n      verticalMidpoint + (east - west) / 2,\r\n    ];\r\n  } else {\r\n    var horizontalMidpoint = (west + east) / 2;\r\n    return [\r\n      horizontalMidpoint - (north - south) / 2,\r\n      south,\r\n      horizontalMidpoint + (north - south) / 2,\r\n      north,\r\n    ];\r\n  }\r\n}\r\n\r\nexport default square;\r\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EACpB,IAAIC,IAAI,GAAGD,IAAI,CAAC,CAAD,CAAf;EACA,IAAIE,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAhB;EACA,IAAIG,IAAI,GAAGH,IAAI,CAAC,CAAD,CAAf;EACA,IAAII,KAAK,GAAGJ,IAAI,CAAC,CAAD,CAAhB;EAEA,IAAIK,kBAAkB,GAAGP,QAAQ,CAACE,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,CAACH,IAAD,EAAOD,KAAP,CAAnB,CAAjC;EACA,IAAIK,gBAAgB,GAAGT,QAAQ,CAACE,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,EAAmB,CAACL,IAAD,EAAOG,KAAP,CAAnB,CAA/B;;EACA,IAAIC,kBAAkB,IAAIE,gBAA1B,EAA4C;IAC1C,IAAIC,gBAAgB,GAAG,CAACN,KAAK,GAAGE,KAAT,IAAkB,CAAzC;IACA,OAAO,CACLH,IADK,EAELO,gBAAgB,GAAG,CAACL,IAAI,GAAGF,IAAR,IAAgB,CAF9B,EAGLE,IAHK,EAILK,gBAAgB,GAAG,CAACL,IAAI,GAAGF,IAAR,IAAgB,CAJ9B,CAAP;EAMD,CARD,MAQO;IACL,IAAIQ,kBAAkB,GAAG,CAACR,IAAI,GAAGE,IAAR,IAAgB,CAAzC;IACA,OAAO,CACLM,kBAAkB,GAAG,CAACL,KAAK,GAAGF,KAAT,IAAkB,CADlC,EAELA,KAFK,EAGLO,kBAAkB,GAAG,CAACL,KAAK,GAAGF,KAAT,IAAkB,CAHlC,EAILE,KAJK,CAAP;EAMD;AACF;;AAED,eAAeL,MAAf"},"metadata":{},"sourceType":"module"}