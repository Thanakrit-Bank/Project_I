{"ast":null,"code":"import pointInPolygon from '@turf/boolean-point-in-polygon';\nimport { multiPoint, featureCollection } from '@turf/helpers';\nimport { featureEach, geomEach, coordEach } from '@turf/meta';\n/**\r\n * Finds {@link Points} or {@link MultiPoint} coordinate positions that fall within {@link (Multi)Polygon(s)}.\r\n *\r\n * @name pointsWithinPolygon\r\n * @param {Feature|FeatureCollection<Point|MultiPoint>} points Point(s) or MultiPoint(s) as input search\r\n * @param {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon>} polygons (Multi)Polygon(s) to check if points are within\r\n * @returns {FeatureCollection<Point|MultiPoint>} Point(s) or MultiPoint(s) with positions that land within at least one polygon.  The geometry type will match what was passsed in\r\n * @example\r\n * var points = turf.points([\r\n *     [-46.6318, -23.5523],\r\n *     [-46.6246, -23.5325],\r\n *     [-46.6062, -23.5513],\r\n *     [-46.663, -23.554],\r\n *     [-46.643, -23.557]\r\n * ]);\r\n *\r\n * var searchWithin = turf.polygon([[\r\n *     [-46.653,-23.543],\r\n *     [-46.634,-23.5346],\r\n *     [-46.613,-23.543],\r\n *     [-46.614,-23.559],\r\n *     [-46.631,-23.567],\r\n *     [-46.653,-23.560],\r\n *     [-46.653,-23.543]\r\n * ]]);\r\n *\r\n * var ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\r\n *\r\n * //addToMap\r\n * var addToMap = [points, searchWithin, ptsWithin]\r\n * turf.featureEach(ptsWithin, function (currentFeature) {\r\n *   currentFeature.properties['marker-size'] = 'large';\r\n *   currentFeature.properties['marker-color'] = '#000';\r\n * });\r\n */\n\nfunction pointsWithinPolygon(points, polygons) {\n  var results = [];\n  featureEach(points, function (point) {\n    var contained = false;\n\n    if (point.geometry.type === \"Point\") {\n      geomEach(polygons, function (polygon) {\n        if (pointInPolygon(point, polygon)) contained = true;\n      });\n\n      if (contained) {\n        results.push(point);\n      }\n    } else if (point.geometry.type === \"MultiPoint\") {\n      var pointsWithin = [];\n      geomEach(polygons, function (polygon) {\n        coordEach(point, function (pointCoord) {\n          if (pointInPolygon(pointCoord, polygon)) {\n            contained = true;\n            pointsWithin.push(pointCoord);\n          }\n        });\n      });\n\n      if (contained) {\n        results.push(multiPoint(pointsWithin));\n      }\n    } else {\n      throw new Error(\"Input geometry must be a Point or MultiPoint\");\n    }\n  });\n  return featureCollection(results);\n}\n\nexport default pointsWithinPolygon;","map":{"version":3,"names":["pointInPolygon","multiPoint","featureCollection","featureEach","geomEach","coordEach","pointsWithinPolygon","points","polygons","results","point","contained","geometry","type","polygon","push","pointsWithin","pointCoord","Error"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/points-within-polygon/dist/es/index.js"],"sourcesContent":["import pointInPolygon from '@turf/boolean-point-in-polygon';\r\nimport { multiPoint, featureCollection } from '@turf/helpers';\r\nimport { featureEach, geomEach, coordEach } from '@turf/meta';\r\n\r\n/**\r\n * Finds {@link Points} or {@link MultiPoint} coordinate positions that fall within {@link (Multi)Polygon(s)}.\r\n *\r\n * @name pointsWithinPolygon\r\n * @param {Feature|FeatureCollection<Point|MultiPoint>} points Point(s) or MultiPoint(s) as input search\r\n * @param {FeatureCollection|Geometry|Feature<Polygon|MultiPolygon>} polygons (Multi)Polygon(s) to check if points are within\r\n * @returns {FeatureCollection<Point|MultiPoint>} Point(s) or MultiPoint(s) with positions that land within at least one polygon.  The geometry type will match what was passsed in\r\n * @example\r\n * var points = turf.points([\r\n *     [-46.6318, -23.5523],\r\n *     [-46.6246, -23.5325],\r\n *     [-46.6062, -23.5513],\r\n *     [-46.663, -23.554],\r\n *     [-46.643, -23.557]\r\n * ]);\r\n *\r\n * var searchWithin = turf.polygon([[\r\n *     [-46.653,-23.543],\r\n *     [-46.634,-23.5346],\r\n *     [-46.613,-23.543],\r\n *     [-46.614,-23.559],\r\n *     [-46.631,-23.567],\r\n *     [-46.653,-23.560],\r\n *     [-46.653,-23.543]\r\n * ]]);\r\n *\r\n * var ptsWithin = turf.pointsWithinPolygon(points, searchWithin);\r\n *\r\n * //addToMap\r\n * var addToMap = [points, searchWithin, ptsWithin]\r\n * turf.featureEach(ptsWithin, function (currentFeature) {\r\n *   currentFeature.properties['marker-size'] = 'large';\r\n *   currentFeature.properties['marker-color'] = '#000';\r\n * });\r\n */\r\nfunction pointsWithinPolygon(points, polygons) {\r\n  var results = [];\r\n  featureEach(points, function (point) {\r\n    var contained = false;\r\n    if (point.geometry.type === \"Point\") {\r\n      geomEach(polygons, function (polygon) {\r\n        if (pointInPolygon(point, polygon)) contained = true;\r\n      });\r\n      if (contained) {\r\n        results.push(point);\r\n      }\r\n    } else if (point.geometry.type === \"MultiPoint\") {\r\n      var pointsWithin = [];\r\n      geomEach(polygons, function (polygon) {\r\n        coordEach(point, function (pointCoord) {\r\n          if (pointInPolygon(pointCoord, polygon)) {\r\n            contained = true;\r\n            pointsWithin.push(pointCoord);\r\n          }\r\n        });\r\n      });\r\n      if (contained) {\r\n        results.push(multiPoint(pointsWithin));\r\n      }\r\n    } else {\r\n      throw new Error(\"Input geometry must be a Point or MultiPoint\");\r\n    }\r\n  });\r\n  return featureCollection(results);\r\n}\r\n\r\nexport default pointsWithinPolygon;\r\n"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,gCAA3B;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,eAA9C;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,YAAjD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,CAA6BC,MAA7B,EAAqCC,QAArC,EAA+C;EAC7C,IAAIC,OAAO,GAAG,EAAd;EACAN,WAAW,CAACI,MAAD,EAAS,UAAUG,KAAV,EAAiB;IACnC,IAAIC,SAAS,GAAG,KAAhB;;IACA,IAAID,KAAK,CAACE,QAAN,CAAeC,IAAf,KAAwB,OAA5B,EAAqC;MACnCT,QAAQ,CAACI,QAAD,EAAW,UAAUM,OAAV,EAAmB;QACpC,IAAId,cAAc,CAACU,KAAD,EAAQI,OAAR,CAAlB,EAAoCH,SAAS,GAAG,IAAZ;MACrC,CAFO,CAAR;;MAGA,IAAIA,SAAJ,EAAe;QACbF,OAAO,CAACM,IAAR,CAAaL,KAAb;MACD;IACF,CAPD,MAOO,IAAIA,KAAK,CAACE,QAAN,CAAeC,IAAf,KAAwB,YAA5B,EAA0C;MAC/C,IAAIG,YAAY,GAAG,EAAnB;MACAZ,QAAQ,CAACI,QAAD,EAAW,UAAUM,OAAV,EAAmB;QACpCT,SAAS,CAACK,KAAD,EAAQ,UAAUO,UAAV,EAAsB;UACrC,IAAIjB,cAAc,CAACiB,UAAD,EAAaH,OAAb,CAAlB,EAAyC;YACvCH,SAAS,GAAG,IAAZ;YACAK,YAAY,CAACD,IAAb,CAAkBE,UAAlB;UACD;QACF,CALQ,CAAT;MAMD,CAPO,CAAR;;MAQA,IAAIN,SAAJ,EAAe;QACbF,OAAO,CAACM,IAAR,CAAad,UAAU,CAACe,YAAD,CAAvB;MACD;IACF,CAbM,MAaA;MACL,MAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;IACD;EACF,CAzBU,CAAX;EA0BA,OAAOhB,iBAAiB,CAACO,OAAD,CAAxB;AACD;;AAED,eAAeH,mBAAf"},"metadata":{},"sourceType":"module"}