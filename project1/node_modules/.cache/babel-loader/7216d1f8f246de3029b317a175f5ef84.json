{"ast":null,"code":"import { featureCollection, lineString } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\n\nfunction lineSegment(geojson) {\n  if (!geojson) {\n    throw new Error(\"geojson is required\");\n  }\n\n  var results = [];\n  flattenEach(geojson, function (feature) {\n    lineSegmentFeature(feature, results);\n  });\n  return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\n\n\nfunction lineSegmentFeature(geojson, results) {\n  var coords = [];\n  var geometry = geojson.geometry;\n\n  if (geometry !== null) {\n    switch (geometry.type) {\n      case \"Polygon\":\n        coords = getCoords(geometry);\n        break;\n\n      case \"LineString\":\n        coords = [getCoords(geometry)];\n    }\n\n    coords.forEach(function (coord) {\n      var segments = createSegments(coord, geojson.properties);\n      segments.forEach(function (segment) {\n        segment.id = results.length;\n        results.push(segment);\n      });\n    });\n  }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\n\n\nfunction createSegments(coords, properties) {\n  var segments = [];\n  coords.reduce(function (previousCoords, currentCoords) {\n    var segment = lineString([previousCoords, currentCoords], properties);\n    segment.bbox = bbox(previousCoords, currentCoords);\n    segments.push(segment);\n    return currentCoords;\n  });\n  return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\n\n\nfunction bbox(coords1, coords2) {\n  var x1 = coords1[0];\n  var y1 = coords1[1];\n  var x2 = coords2[0];\n  var y2 = coords2[1];\n  var west = x1 < x2 ? x1 : x2;\n  var south = y1 < y2 ? y1 : y2;\n  var east = x1 > x2 ? x1 : x2;\n  var north = y1 > y2 ? y1 : y2;\n  return [west, south, east, north];\n}\n\nexport default lineSegment;","map":{"version":3,"names":["featureCollection","lineString","getCoords","flattenEach","lineSegment","geojson","Error","results","feature","lineSegmentFeature","coords","geometry","type","forEach","coord","segments","createSegments","properties","segment","id","length","push","reduce","previousCoords","currentCoords","bbox","coords1","coords2","x1","y1","x2","y2","west","south","east","north"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/line-segment/dist/es/index.js"],"sourcesContent":["import { featureCollection, lineString, } from \"@turf/helpers\";\nimport { getCoords } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\n/**\n * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a\n * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.\n *\n * @name lineSegment\n * @param {GeoJSON} geojson GeoJSON Polygon or LineString\n * @returns {FeatureCollection<LineString>} 2-vertex line segments\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n * var segments = turf.lineSegment(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, segments]\n */\nfunction lineSegment(geojson) {\n    if (!geojson) {\n        throw new Error(\"geojson is required\");\n    }\n    var results = [];\n    flattenEach(geojson, function (feature) {\n        lineSegmentFeature(feature, results);\n    });\n    return featureCollection(results);\n}\n/**\n * Line Segment\n *\n * @private\n * @param {Feature<LineString|Polygon>} geojson Line or polygon feature\n * @param {Array} results push to results\n * @returns {void}\n */\nfunction lineSegmentFeature(geojson, results) {\n    var coords = [];\n    var geometry = geojson.geometry;\n    if (geometry !== null) {\n        switch (geometry.type) {\n            case \"Polygon\":\n                coords = getCoords(geometry);\n                break;\n            case \"LineString\":\n                coords = [getCoords(geometry)];\n        }\n        coords.forEach(function (coord) {\n            var segments = createSegments(coord, geojson.properties);\n            segments.forEach(function (segment) {\n                segment.id = results.length;\n                results.push(segment);\n            });\n        });\n    }\n}\n/**\n * Create Segments from LineString coordinates\n *\n * @private\n * @param {Array<Array<number>>} coords LineString coordinates\n * @param {*} properties GeoJSON properties\n * @returns {Array<Feature<LineString>>} line segments\n */\nfunction createSegments(coords, properties) {\n    var segments = [];\n    coords.reduce(function (previousCoords, currentCoords) {\n        var segment = lineString([previousCoords, currentCoords], properties);\n        segment.bbox = bbox(previousCoords, currentCoords);\n        segments.push(segment);\n        return currentCoords;\n    });\n    return segments;\n}\n/**\n * Create BBox between two coordinates (faster than @turf/bbox)\n *\n * @private\n * @param {Array<number>} coords1 Point coordinate\n * @param {Array<number>} coords2 Point coordinate\n * @returns {BBox} [west, south, east, north]\n */\nfunction bbox(coords1, coords2) {\n    var x1 = coords1[0];\n    var y1 = coords1[1];\n    var x2 = coords2[0];\n    var y2 = coords2[1];\n    var west = x1 < x2 ? x1 : x2;\n    var south = y1 < y2 ? y1 : y2;\n    var east = x1 > x2 ? x1 : x2;\n    var north = y1 > y2 ? y1 : y2;\n    return [west, south, east, north];\n}\nexport default lineSegment;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}