{"ast":null,"code":"import spatialWeight from \"@turf/distance-weight\";\nimport { featureEach } from \"@turf/meta\";\n/**\n * Moran's I measures patterns of attribute values associated with features.\n * The method reveal whether similar values tend to occur near each other,\n * or whether high or low values are interspersed.\n *\n * Moran's I > 0 means a clusterd pattern.\n * Moran's I < 0 means a dispersed pattern.\n * Moran's I = 0 means a random pattern.\n *\n * In order to test the significance of the result. The z score is calculated.\n * A positive enough z-score (ex. >1.96) indicates clustering,\n * while a negative enough z-score (ex. <-1.96) indicates a dispersed pattern.\n *\n * the z-score can be calculated based on a normal or random assumption.\n *\n * **Bibliography***\n *\n * 1. [Moran's I](https://en.wikipedia.org/wiki/Moran%27s_I)\n *\n * 2. [pysal](http://pysal.readthedocs.io/en/latest/index.html)\n *\n * 3. Andy Mitchell, The ESRI Guide to GIS Analysis Volume 2: Spatial Measurements & Statistics.\n *\n * @name moranIndex\n * @param {FeatureCollection<any>} fc\n * @param {Object} options\n * @param {string} options.inputField the property name, must contain numeric values\n * @param {number} [options.threshold=100000] the distance threshold\n * @param {number} [options.p=2] the Minkowski p-norm distance parameter\n * @param {boolean} [options.binary=false] whether transfrom the distance to binary\n * @param {number} [options.alpha=-1] the distance decay parameter\n * @param {boolean} [options.standardization=true] wheter row standardization the distance\n * @returns {MoranIndex}\n * @example\n *\n * const bbox = [-65, 40, -63, 42];\n * const dataset = turf.randomPoint(100, { bbox: bbox });\n *\n * const result = turf.moranIndex(dataset, {\n *   inputField: 'CRIME',\n * });\n */\n\nexport default function (fc, options) {\n  var inputField = options.inputField;\n  var threshold = options.threshold || 100000;\n  var p = options.p || 2;\n  var binary = options.binary || false;\n  var alpha = options.alpha || -1;\n  var standardization = options.standardization || true;\n  var weight = spatialWeight(fc, {\n    alpha: alpha,\n    binary: binary,\n    p: p,\n    standardization: standardization,\n    threshold: threshold\n  });\n  var y = [];\n  featureEach(fc, function (feature) {\n    var feaProperties = feature.properties || {}; // validate inputField exists\n\n    y.push(feaProperties[inputField]);\n  });\n  var yMean = mean(y);\n  var yVar = variance(y);\n  var weightSum = 0;\n  var s0 = 0;\n  var s1 = 0;\n  var s2 = 0;\n  var n = weight.length; // validate y.length is the same as weight.length\n\n  for (var i = 0; i < n; i++) {\n    var subS2 = 0;\n\n    for (var j = 0; j < n; j++) {\n      weightSum += weight[i][j] * (y[i] - yMean) * (y[j] - yMean);\n      s0 += weight[i][j];\n      s1 += Math.pow(weight[i][j] + weight[j][i], 2);\n      subS2 += weight[i][j] + weight[j][i];\n    }\n\n    s2 += Math.pow(subS2, 2);\n  }\n\n  s1 = 0.5 * s1;\n  var moranIndex = weightSum / s0 / yVar;\n  var expectedMoranIndex = -1 / (n - 1);\n  var vNum = n * n * s1 - n * s2 + 3 * (s0 * s0);\n  var vDen = (n - 1) * (n + 1) * (s0 * s0);\n  var vNorm = vNum / vDen - expectedMoranIndex * expectedMoranIndex;\n  var stdNorm = Math.sqrt(vNorm);\n  var zNorm = (moranIndex - expectedMoranIndex) / stdNorm;\n  return {\n    expectedMoranIndex: expectedMoranIndex,\n    moranIndex: moranIndex,\n    stdNorm: stdNorm,\n    zNorm: zNorm\n  };\n}\n/**\n * get mean of a list\n * @param {number[]} y\n * @returns {number}\n *\n */\n\nfunction mean(y) {\n  var sum = 0;\n\n  for (var _i = 0, y_1 = y; _i < y_1.length; _i++) {\n    var item = y_1[_i];\n    sum += item;\n  }\n\n  return sum / y.length;\n}\n/**\n * get variance of a list\n * @param {number[]} y\n * @returns {number}\n *\n */\n\n\nfunction variance(y) {\n  var yMean = mean(y);\n  var sum = 0;\n\n  for (var _i = 0, y_2 = y; _i < y_2.length; _i++) {\n    var item = y_2[_i];\n    sum += Math.pow(item - yMean, 2);\n  }\n\n  return sum / y.length;\n}\n/**\n * @typedef {Object} MoranIndex\n * @property {number} moranIndex the moran's Index of the observed feature set\n * @property {number} expectedMoranIndex the moran's Index of the random distribution\n * @property {number} stdNorm the standard devitaion of the random distribution\n * @property {number} zNorm the z-score of the observe samples with regard to the random distribution\n */","map":{"version":3,"names":["spatialWeight","featureEach","fc","options","inputField","threshold","p","binary","alpha","standardization","weight","y","feature","feaProperties","properties","push","yMean","mean","yVar","variance","weightSum","s0","s1","s2","n","length","i","subS2","j","Math","pow","moranIndex","expectedMoranIndex","vNum","vDen","vNorm","stdNorm","sqrt","zNorm","sum","_i","y_1","item","y_2"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/moran-index/dist/es/index.js"],"sourcesContent":["import spatialWeight from \"@turf/distance-weight\";\nimport { featureEach } from \"@turf/meta\";\n/**\n * Moran's I measures patterns of attribute values associated with features.\n * The method reveal whether similar values tend to occur near each other,\n * or whether high or low values are interspersed.\n *\n * Moran's I > 0 means a clusterd pattern.\n * Moran's I < 0 means a dispersed pattern.\n * Moran's I = 0 means a random pattern.\n *\n * In order to test the significance of the result. The z score is calculated.\n * A positive enough z-score (ex. >1.96) indicates clustering,\n * while a negative enough z-score (ex. <-1.96) indicates a dispersed pattern.\n *\n * the z-score can be calculated based on a normal or random assumption.\n *\n * **Bibliography***\n *\n * 1. [Moran's I](https://en.wikipedia.org/wiki/Moran%27s_I)\n *\n * 2. [pysal](http://pysal.readthedocs.io/en/latest/index.html)\n *\n * 3. Andy Mitchell, The ESRI Guide to GIS Analysis Volume 2: Spatial Measurements & Statistics.\n *\n * @name moranIndex\n * @param {FeatureCollection<any>} fc\n * @param {Object} options\n * @param {string} options.inputField the property name, must contain numeric values\n * @param {number} [options.threshold=100000] the distance threshold\n * @param {number} [options.p=2] the Minkowski p-norm distance parameter\n * @param {boolean} [options.binary=false] whether transfrom the distance to binary\n * @param {number} [options.alpha=-1] the distance decay parameter\n * @param {boolean} [options.standardization=true] wheter row standardization the distance\n * @returns {MoranIndex}\n * @example\n *\n * const bbox = [-65, 40, -63, 42];\n * const dataset = turf.randomPoint(100, { bbox: bbox });\n *\n * const result = turf.moranIndex(dataset, {\n *   inputField: 'CRIME',\n * });\n */\nexport default function (fc, options) {\n    var inputField = options.inputField;\n    var threshold = options.threshold || 100000;\n    var p = options.p || 2;\n    var binary = options.binary || false;\n    var alpha = options.alpha || -1;\n    var standardization = options.standardization || true;\n    var weight = spatialWeight(fc, {\n        alpha: alpha,\n        binary: binary,\n        p: p,\n        standardization: standardization,\n        threshold: threshold,\n    });\n    var y = [];\n    featureEach(fc, function (feature) {\n        var feaProperties = feature.properties || {};\n        // validate inputField exists\n        y.push(feaProperties[inputField]);\n    });\n    var yMean = mean(y);\n    var yVar = variance(y);\n    var weightSum = 0;\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var n = weight.length;\n    // validate y.length is the same as weight.length\n    for (var i = 0; i < n; i++) {\n        var subS2 = 0;\n        for (var j = 0; j < n; j++) {\n            weightSum += weight[i][j] * (y[i] - yMean) * (y[j] - yMean);\n            s0 += weight[i][j];\n            s1 += Math.pow(weight[i][j] + weight[j][i], 2);\n            subS2 += weight[i][j] + weight[j][i];\n        }\n        s2 += Math.pow(subS2, 2);\n    }\n    s1 = 0.5 * s1;\n    var moranIndex = weightSum / s0 / yVar;\n    var expectedMoranIndex = -1 / (n - 1);\n    var vNum = n * n * s1 - n * s2 + 3 * (s0 * s0);\n    var vDen = (n - 1) * (n + 1) * (s0 * s0);\n    var vNorm = vNum / vDen - expectedMoranIndex * expectedMoranIndex;\n    var stdNorm = Math.sqrt(vNorm);\n    var zNorm = (moranIndex - expectedMoranIndex) / stdNorm;\n    return {\n        expectedMoranIndex: expectedMoranIndex,\n        moranIndex: moranIndex,\n        stdNorm: stdNorm,\n        zNorm: zNorm,\n    };\n}\n/**\n * get mean of a list\n * @param {number[]} y\n * @returns {number}\n *\n */\nfunction mean(y) {\n    var sum = 0;\n    for (var _i = 0, y_1 = y; _i < y_1.length; _i++) {\n        var item = y_1[_i];\n        sum += item;\n    }\n    return sum / y.length;\n}\n/**\n * get variance of a list\n * @param {number[]} y\n * @returns {number}\n *\n */\nfunction variance(y) {\n    var yMean = mean(y);\n    var sum = 0;\n    for (var _i = 0, y_2 = y; _i < y_2.length; _i++) {\n        var item = y_2[_i];\n        sum += Math.pow(item - yMean, 2);\n    }\n    return sum / y.length;\n}\n/**\n * @typedef {Object} MoranIndex\n * @property {number} moranIndex the moran's Index of the observed feature set\n * @property {number} expectedMoranIndex the moran's Index of the random distribution\n * @property {number} stdNorm the standard devitaion of the random distribution\n * @property {number} zNorm the z-score of the observe samples with regard to the random distribution\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}