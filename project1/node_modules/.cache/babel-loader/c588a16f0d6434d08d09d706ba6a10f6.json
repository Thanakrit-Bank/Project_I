{"ast":null,"code":"import booleanDisjoint from \"@turf/boolean-disjoint\";\nimport { flattenEach } from \"@turf/meta\";\n/**\r\n * Boolean-intersects returns (TRUE) two geometries intersect.\r\n *\r\n * @name booleanIntersects\r\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\r\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\r\n * @returns {boolean} true/false\r\n * @example\r\n * var point = turf.point([2, 2]);\r\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\r\n *\r\n * turf.booleanIntersects(line, point);\r\n * //=true\r\n */\n\nexport default function booleanIntersects(feature1, feature2) {\n  var bool = false;\n  flattenEach(feature1, function (flatten1) {\n    flattenEach(feature2, function (flatten2) {\n      if (bool === true) {\n        return true;\n      }\n\n      bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\n    });\n  });\n  return bool;\n}","map":{"version":3,"names":["booleanDisjoint","flattenEach","booleanIntersects","feature1","feature2","bool","flatten1","flatten2","geometry"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/boolean-intersects/dist/es/index.js"],"sourcesContent":["import booleanDisjoint from \"@turf/boolean-disjoint\";\r\nimport { flattenEach } from \"@turf/meta\";\r\n/**\r\n * Boolean-intersects returns (TRUE) two geometries intersect.\r\n *\r\n * @name booleanIntersects\r\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\r\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\r\n * @returns {boolean} true/false\r\n * @example\r\n * var point = turf.point([2, 2]);\r\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\r\n *\r\n * turf.booleanIntersects(line, point);\r\n * //=true\r\n */\r\nexport default function booleanIntersects(feature1, feature2) {\r\n    var bool = false;\r\n    flattenEach(feature1, function (flatten1) {\r\n        flattenEach(feature2, function (flatten2) {\r\n            if (bool === true) {\r\n                return true;\r\n            }\r\n            bool = !booleanDisjoint(flatten1.geometry, flatten2.geometry);\r\n        });\r\n    });\r\n    return bool;\r\n}\r\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,wBAA5B;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,QAArC,EAA+C;EAC1D,IAAIC,IAAI,GAAG,KAAX;EACAJ,WAAW,CAACE,QAAD,EAAW,UAAUG,QAAV,EAAoB;IACtCL,WAAW,CAACG,QAAD,EAAW,UAAUG,QAAV,EAAoB;MACtC,IAAIF,IAAI,KAAK,IAAb,EAAmB;QACf,OAAO,IAAP;MACH;;MACDA,IAAI,GAAG,CAACL,eAAe,CAACM,QAAQ,CAACE,QAAV,EAAoBD,QAAQ,CAACC,QAA7B,CAAvB;IACH,CALU,CAAX;EAMH,CAPU,CAAX;EAQA,OAAOH,IAAP;AACH"},"metadata":{},"sourceType":"module"}