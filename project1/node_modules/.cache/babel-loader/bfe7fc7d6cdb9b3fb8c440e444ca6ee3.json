{"ast":null,"code":"import { coordEach } from \"@turf/meta\";\nimport { isNumber } from \"@turf/helpers\";\nimport clone from \"@turf/clone\";\n/**\r\n * Converts a WGS84 GeoJSON object into Mercator (EPSG:900913) projection\r\n *\r\n * @name toMercator\r\n * @param {GeoJSON|Position} geojson WGS84 GeoJSON object\r\n * @param {Object} [options] Optional parameters\r\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\r\n * @returns {GeoJSON} Projected GeoJSON\r\n * @example\r\n * var pt = turf.point([-71,41]);\r\n * var converted = turf.toMercator(pt);\r\n *\r\n * //addToMap\r\n * var addToMap = [pt, converted];\r\n */\n\nexport function toMercator(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return convert(geojson, \"mercator\", options);\n}\n/**\r\n * Converts a Mercator (EPSG:900913) GeoJSON object into WGS84 projection\r\n *\r\n * @name toWgs84\r\n * @param {GeoJSON|Position} geojson Mercator GeoJSON object\r\n * @param {Object} [options] Optional parameters\r\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\r\n * @returns {GeoJSON} Projected GeoJSON\r\n * @example\r\n * var pt = turf.point([-7903683.846322424, 5012341.663847514]);\r\n * var converted = turf.toWgs84(pt);\r\n *\r\n * //addToMap\r\n * var addToMap = [pt, converted];\r\n */\n\nexport function toWgs84(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return convert(geojson, \"wgs84\", options);\n}\n/**\r\n * Converts a GeoJSON coordinates to the defined `projection`\r\n *\r\n * @private\r\n * @param {GeoJSON} geojson GeoJSON Feature or Geometry\r\n * @param {string} projection defines the projection system to convert the coordinates to\r\n * @param {Object} [options] Optional parameters\r\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\r\n * @returns {GeoJSON} Converted GeoJSON\r\n */\n\nfunction convert(geojson, projection, options) {\n  if (options === void 0) {\n    options = {};\n  } // Optional parameters\n\n\n  options = options || {};\n  var mutate = options.mutate; // Validation\n\n  if (!geojson) throw new Error(\"geojson is required\"); // Handle Position\n\n  if (Array.isArray(geojson) && isNumber(geojson[0])) geojson = projection === \"mercator\" ? convertToMercator(geojson) : convertToWgs84(geojson); // Handle GeoJSON\n  else {\n    // Handle possible data mutation\n    if (mutate !== true) geojson = clone(geojson);\n    coordEach(geojson, function (coord) {\n      var newCoord = projection === \"mercator\" ? convertToMercator(coord) : convertToWgs84(coord);\n      coord[0] = newCoord[0];\n      coord[1] = newCoord[1];\n    });\n  }\n  return geojson;\n}\n/**\r\n * Convert lon/lat values to 900913 x/y.\r\n * (from https://github.com/mapbox/sphericalmercator)\r\n *\r\n * @private\r\n * @param {Array<number>} lonLat WGS84 point\r\n * @returns {Array<number>} Mercator [x, y] point\r\n */\n\n\nfunction convertToMercator(lonLat) {\n  var D2R = Math.PI / 180,\n      // 900913 properties\n  A = 6378137.0,\n      MAXEXTENT = 20037508.342789244; // compensate longitudes passing the 180th meridian\n  // from https://github.com/proj4js/proj4js/blob/master/lib/common/adjust_lon.js\n\n  var adjusted = Math.abs(lonLat[0]) <= 180 ? lonLat[0] : lonLat[0] - sign(lonLat[0]) * 360;\n  var xy = [A * adjusted * D2R, A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat[1] * D2R))]; // if xy value is beyond maxextent (e.g. poles), return maxextent\n\n  if (xy[0] > MAXEXTENT) xy[0] = MAXEXTENT;\n  if (xy[0] < -MAXEXTENT) xy[0] = -MAXEXTENT;\n  if (xy[1] > MAXEXTENT) xy[1] = MAXEXTENT;\n  if (xy[1] < -MAXEXTENT) xy[1] = -MAXEXTENT;\n  return xy;\n}\n/**\r\n * Convert 900913 x/y values to lon/lat.\r\n * (from https://github.com/mapbox/sphericalmercator)\r\n *\r\n * @private\r\n * @param {Array<number>} xy Mercator [x, y] point\r\n * @returns {Array<number>} WGS84 [lon, lat] point\r\n */\n\n\nfunction convertToWgs84(xy) {\n  // 900913 properties.\n  var R2D = 180 / Math.PI;\n  var A = 6378137.0;\n  return [xy[0] * R2D / A, (Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-xy[1] / A))) * R2D];\n}\n/**\r\n * Returns the sign of the input, or zero\r\n *\r\n * @private\r\n * @param {number} x input\r\n * @returns {number} -1|0|1 output\r\n */\n\n\nfunction sign(x) {\n  return x < 0 ? -1 : x > 0 ? 1 : 0;\n}","map":{"version":3,"names":["coordEach","isNumber","clone","toMercator","geojson","options","convert","toWgs84","projection","mutate","Error","Array","isArray","convertToMercator","convertToWgs84","coord","newCoord","lonLat","D2R","Math","PI","A","MAXEXTENT","adjusted","abs","sign","xy","log","tan","R2D","atan","exp","x"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/projection/dist/es/index.js"],"sourcesContent":["import { coordEach } from \"@turf/meta\";\r\nimport { isNumber } from \"@turf/helpers\";\r\nimport clone from \"@turf/clone\";\r\n/**\r\n * Converts a WGS84 GeoJSON object into Mercator (EPSG:900913) projection\r\n *\r\n * @name toMercator\r\n * @param {GeoJSON|Position} geojson WGS84 GeoJSON object\r\n * @param {Object} [options] Optional parameters\r\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\r\n * @returns {GeoJSON} Projected GeoJSON\r\n * @example\r\n * var pt = turf.point([-71,41]);\r\n * var converted = turf.toMercator(pt);\r\n *\r\n * //addToMap\r\n * var addToMap = [pt, converted];\r\n */\r\nexport function toMercator(geojson, options) {\r\n    if (options === void 0) { options = {}; }\r\n    return convert(geojson, \"mercator\", options);\r\n}\r\n/**\r\n * Converts a Mercator (EPSG:900913) GeoJSON object into WGS84 projection\r\n *\r\n * @name toWgs84\r\n * @param {GeoJSON|Position} geojson Mercator GeoJSON object\r\n * @param {Object} [options] Optional parameters\r\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\r\n * @returns {GeoJSON} Projected GeoJSON\r\n * @example\r\n * var pt = turf.point([-7903683.846322424, 5012341.663847514]);\r\n * var converted = turf.toWgs84(pt);\r\n *\r\n * //addToMap\r\n * var addToMap = [pt, converted];\r\n */\r\nexport function toWgs84(geojson, options) {\r\n    if (options === void 0) { options = {}; }\r\n    return convert(geojson, \"wgs84\", options);\r\n}\r\n/**\r\n * Converts a GeoJSON coordinates to the defined `projection`\r\n *\r\n * @private\r\n * @param {GeoJSON} geojson GeoJSON Feature or Geometry\r\n * @param {string} projection defines the projection system to convert the coordinates to\r\n * @param {Object} [options] Optional parameters\r\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\r\n * @returns {GeoJSON} Converted GeoJSON\r\n */\r\nfunction convert(geojson, projection, options) {\r\n    if (options === void 0) { options = {}; }\r\n    // Optional parameters\r\n    options = options || {};\r\n    var mutate = options.mutate;\r\n    // Validation\r\n    if (!geojson)\r\n        throw new Error(\"geojson is required\");\r\n    // Handle Position\r\n    if (Array.isArray(geojson) && isNumber(geojson[0]))\r\n        geojson =\r\n            projection === \"mercator\"\r\n                ? convertToMercator(geojson)\r\n                : convertToWgs84(geojson);\r\n    // Handle GeoJSON\r\n    else {\r\n        // Handle possible data mutation\r\n        if (mutate !== true)\r\n            geojson = clone(geojson);\r\n        coordEach(geojson, function (coord) {\r\n            var newCoord = projection === \"mercator\"\r\n                ? convertToMercator(coord)\r\n                : convertToWgs84(coord);\r\n            coord[0] = newCoord[0];\r\n            coord[1] = newCoord[1];\r\n        });\r\n    }\r\n    return geojson;\r\n}\r\n/**\r\n * Convert lon/lat values to 900913 x/y.\r\n * (from https://github.com/mapbox/sphericalmercator)\r\n *\r\n * @private\r\n * @param {Array<number>} lonLat WGS84 point\r\n * @returns {Array<number>} Mercator [x, y] point\r\n */\r\nfunction convertToMercator(lonLat) {\r\n    var D2R = Math.PI / 180, \r\n    // 900913 properties\r\n    A = 6378137.0, MAXEXTENT = 20037508.342789244;\r\n    // compensate longitudes passing the 180th meridian\r\n    // from https://github.com/proj4js/proj4js/blob/master/lib/common/adjust_lon.js\r\n    var adjusted = Math.abs(lonLat[0]) <= 180 ? lonLat[0] : lonLat[0] - sign(lonLat[0]) * 360;\r\n    var xy = [\r\n        A * adjusted * D2R,\r\n        A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat[1] * D2R)),\r\n    ];\r\n    // if xy value is beyond maxextent (e.g. poles), return maxextent\r\n    if (xy[0] > MAXEXTENT)\r\n        xy[0] = MAXEXTENT;\r\n    if (xy[0] < -MAXEXTENT)\r\n        xy[0] = -MAXEXTENT;\r\n    if (xy[1] > MAXEXTENT)\r\n        xy[1] = MAXEXTENT;\r\n    if (xy[1] < -MAXEXTENT)\r\n        xy[1] = -MAXEXTENT;\r\n    return xy;\r\n}\r\n/**\r\n * Convert 900913 x/y values to lon/lat.\r\n * (from https://github.com/mapbox/sphericalmercator)\r\n *\r\n * @private\r\n * @param {Array<number>} xy Mercator [x, y] point\r\n * @returns {Array<number>} WGS84 [lon, lat] point\r\n */\r\nfunction convertToWgs84(xy) {\r\n    // 900913 properties.\r\n    var R2D = 180 / Math.PI;\r\n    var A = 6378137.0;\r\n    return [\r\n        (xy[0] * R2D) / A,\r\n        (Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-xy[1] / A))) * R2D,\r\n    ];\r\n}\r\n/**\r\n * Returns the sign of the input, or zero\r\n *\r\n * @private\r\n * @param {number} x input\r\n * @returns {number} -1|0|1 output\r\n */\r\nfunction sign(x) {\r\n    return x < 0 ? -1 : x > 0 ? 1 : 0;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}