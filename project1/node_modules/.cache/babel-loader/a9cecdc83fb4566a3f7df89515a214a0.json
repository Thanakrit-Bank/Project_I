{"ast":null,"code":"// Cohen-Sutherland line clipping algorithm, adapted to efficiently\n// handle polylines rather than just segments\nexport function lineclip(points, bbox, result) {\n  var len = points.length,\n      codeA = bitCode(points[0], bbox),\n      part = [],\n      i,\n      codeB,\n      lastCode;\n  var a;\n  var b;\n  if (!result) result = [];\n\n  for (i = 1; i < len; i++) {\n    a = points[i - 1];\n    b = points[i];\n    codeB = lastCode = bitCode(b, bbox);\n\n    while (true) {\n      if (!(codeA | codeB)) {\n        // accept\n        part.push(a);\n\n        if (codeB !== lastCode) {\n          // segment went outside\n          part.push(b);\n\n          if (i < len - 1) {\n            // start a new line\n            result.push(part);\n            part = [];\n          }\n        } else if (i === len - 1) {\n          part.push(b);\n        }\n\n        break;\n      } else if (codeA & codeB) {\n        // trivial reject\n        break;\n      } else if (codeA) {\n        // a outside, intersect with clip edge\n        a = intersect(a, b, codeA, bbox);\n        codeA = bitCode(a, bbox);\n      } else {\n        // b outside\n        b = intersect(a, b, codeB, bbox);\n        codeB = bitCode(b, bbox);\n      }\n    }\n\n    codeA = lastCode;\n  }\n\n  if (part.length) result.push(part);\n  return result;\n} // Sutherland-Hodgeman polygon clipping algorithm\n\nexport function polygonclip(points, bbox) {\n  var result, edge, prev, prevInside, i, p, inside; // clip against each side of the clip rectangle\n\n  for (edge = 1; edge <= 8; edge *= 2) {\n    result = [];\n    prev = points[points.length - 1];\n    prevInside = !(bitCode(prev, bbox) & edge);\n\n    for (i = 0; i < points.length; i++) {\n      p = points[i];\n      inside = !(bitCode(p, bbox) & edge); // if segment goes through the clip window, add an intersection\n\n      if (inside !== prevInside) result.push(intersect(prev, p, edge, bbox));\n      if (inside) result.push(p); // add a point if it's inside\n\n      prev = p;\n      prevInside = inside;\n    }\n\n    points = result;\n    if (!points.length) break;\n  }\n\n  return result;\n} // intersect a segment against one of the 4 lines that make up the bbox\n\nfunction intersect(a, b, edge, bbox) {\n  return edge & 8 ? [a[0] + (b[0] - a[0]) * (bbox[3] - a[1]) / (b[1] - a[1]), bbox[3]] // top\n  : edge & 4 ? [a[0] + (b[0] - a[0]) * (bbox[1] - a[1]) / (b[1] - a[1]), bbox[1]] // bottom\n  : edge & 2 ? [bbox[2], a[1] + (b[1] - a[1]) * (bbox[2] - a[0]) / (b[0] - a[0])] // right\n  : edge & 1 ? [bbox[0], a[1] + (b[1] - a[1]) * (bbox[0] - a[0]) / (b[0] - a[0])] // left\n  : null;\n} // bit code reflects the point position relative to the bbox:\n//         left  mid  right\n//    top  1001  1000  1010\n//    mid  0001  0000  0010\n// bottom  0101  0100  0110\n\n\nfunction bitCode(p, bbox) {\n  var code = 0;\n  if (p[0] < bbox[0]) code |= 1; // left\n  else if (p[0] > bbox[2]) code |= 2; // right\n\n  if (p[1] < bbox[1]) code |= 4; // bottom\n  else if (p[1] > bbox[3]) code |= 8; // top\n\n  return code;\n}","map":{"version":3,"names":["lineclip","points","bbox","result","len","length","codeA","bitCode","part","i","codeB","lastCode","a","b","push","intersect","polygonclip","edge","prev","prevInside","p","inside","code"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/bbox-clip/dist/es/lib/lineclip.js"],"sourcesContent":["// Cohen-Sutherland line clipping algorithm, adapted to efficiently\r\n// handle polylines rather than just segments\r\nexport function lineclip(points, bbox, result) {\r\n    var len = points.length, codeA = bitCode(points[0], bbox), part = [], i, codeB, lastCode;\r\n    var a;\r\n    var b;\r\n    if (!result)\r\n        result = [];\r\n    for (i = 1; i < len; i++) {\r\n        a = points[i - 1];\r\n        b = points[i];\r\n        codeB = lastCode = bitCode(b, bbox);\r\n        while (true) {\r\n            if (!(codeA | codeB)) {\r\n                // accept\r\n                part.push(a);\r\n                if (codeB !== lastCode) {\r\n                    // segment went outside\r\n                    part.push(b);\r\n                    if (i < len - 1) {\r\n                        // start a new line\r\n                        result.push(part);\r\n                        part = [];\r\n                    }\r\n                }\r\n                else if (i === len - 1) {\r\n                    part.push(b);\r\n                }\r\n                break;\r\n            }\r\n            else if (codeA & codeB) {\r\n                // trivial reject\r\n                break;\r\n            }\r\n            else if (codeA) {\r\n                // a outside, intersect with clip edge\r\n                a = intersect(a, b, codeA, bbox);\r\n                codeA = bitCode(a, bbox);\r\n            }\r\n            else {\r\n                // b outside\r\n                b = intersect(a, b, codeB, bbox);\r\n                codeB = bitCode(b, bbox);\r\n            }\r\n        }\r\n        codeA = lastCode;\r\n    }\r\n    if (part.length)\r\n        result.push(part);\r\n    return result;\r\n}\r\n// Sutherland-Hodgeman polygon clipping algorithm\r\nexport function polygonclip(points, bbox) {\r\n    var result, edge, prev, prevInside, i, p, inside;\r\n    // clip against each side of the clip rectangle\r\n    for (edge = 1; edge <= 8; edge *= 2) {\r\n        result = [];\r\n        prev = points[points.length - 1];\r\n        prevInside = !(bitCode(prev, bbox) & edge);\r\n        for (i = 0; i < points.length; i++) {\r\n            p = points[i];\r\n            inside = !(bitCode(p, bbox) & edge);\r\n            // if segment goes through the clip window, add an intersection\r\n            if (inside !== prevInside)\r\n                result.push(intersect(prev, p, edge, bbox));\r\n            if (inside)\r\n                result.push(p); // add a point if it's inside\r\n            prev = p;\r\n            prevInside = inside;\r\n        }\r\n        points = result;\r\n        if (!points.length)\r\n            break;\r\n    }\r\n    return result;\r\n}\r\n// intersect a segment against one of the 4 lines that make up the bbox\r\nfunction intersect(a, b, edge, bbox) {\r\n    return edge & 8\r\n        ? [a[0] + ((b[0] - a[0]) * (bbox[3] - a[1])) / (b[1] - a[1]), bbox[3]] // top\r\n        : edge & 4\r\n            ? [a[0] + ((b[0] - a[0]) * (bbox[1] - a[1])) / (b[1] - a[1]), bbox[1]] // bottom\r\n            : edge & 2\r\n                ? [bbox[2], a[1] + ((b[1] - a[1]) * (bbox[2] - a[0])) / (b[0] - a[0])] // right\r\n                : edge & 1\r\n                    ? [bbox[0], a[1] + ((b[1] - a[1]) * (bbox[0] - a[0])) / (b[0] - a[0])] // left\r\n                    : null;\r\n}\r\n// bit code reflects the point position relative to the bbox:\r\n//         left  mid  right\r\n//    top  1001  1000  1010\r\n//    mid  0001  0000  0010\r\n// bottom  0101  0100  0110\r\nfunction bitCode(p, bbox) {\r\n    var code = 0;\r\n    if (p[0] < bbox[0])\r\n        code |= 1;\r\n    // left\r\n    else if (p[0] > bbox[2])\r\n        code |= 2; // right\r\n    if (p[1] < bbox[1])\r\n        code |= 4;\r\n    // bottom\r\n    else if (p[1] > bbox[3])\r\n        code |= 8; // top\r\n    return code;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}