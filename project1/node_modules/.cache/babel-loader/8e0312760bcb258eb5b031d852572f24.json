{"ast":null,"code":"import clone from \"@turf/clone\";\nimport { isObject, lineString, multiLineString } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { lineReduce } from \"@turf/meta\";\n/**\n * Merges all connected (non-forking, non-junctioning) line strings into single lineStrings.\n * [LineString] -> LineString|MultiLineString\n *\n * @param {FeatureCollection<LineString|MultiLineString>} geojson Lines to dissolve\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<LineString|MultiLineString>} Dissolved lines\n */\n\nfunction lineDissolve(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  } // Optional parameters\n\n\n  options = options || {};\n\n  if (!isObject(options)) {\n    throw new Error(\"options is invalid\");\n  }\n\n  var mutate = options.mutate; // Validation\n\n  if (getType(geojson) !== \"FeatureCollection\") {\n    throw new Error(\"geojson must be a FeatureCollection\");\n  }\n\n  if (!geojson.features.length) {\n    throw new Error(\"geojson is empty\");\n  } // Clone geojson to avoid side effects\n\n\n  if (mutate === false || mutate === undefined) {\n    geojson = clone(geojson);\n  }\n\n  var result = [];\n  var lastLine = lineReduce(geojson, function (previousLine, currentLine) {\n    // Attempt to merge this LineString with the other LineStrings, updating\n    // the reference as it is merged with others and grows.\n    var merged = mergeLineStrings(previousLine, currentLine); // Accumulate the merged LineString\n\n    if (merged) {\n      return merged; // Put the unmerged LineString back into the list\n    } else {\n      result.push(previousLine);\n      return currentLine;\n    }\n  }); // Append the last line\n\n  if (lastLine) {\n    result.push(lastLine);\n  } // Return null if no lines were dissolved\n\n\n  if (!result.length) {\n    return null; // Return LineString if only 1 line was dissolved\n  } else if (result.length === 1) {\n    return result[0]; // Return MultiLineString if multiple lines were dissolved with gaps\n  } else {\n    return multiLineString(result.map(function (line) {\n      return line.coordinates;\n    }));\n  }\n} // [Number, Number] -> String\n\n\nfunction coordId(coord) {\n  return coord[0].toString() + \",\" + coord[1].toString();\n}\n/**\n * LineString, LineString -> LineString\n *\n * @private\n * @param {Feature<LineString>} a line1\n * @param {Feature<LineString>} b line2\n * @returns {Feature<LineString>|null} Merged LineString\n */\n\n\nfunction mergeLineStrings(a, b) {\n  var coords1 = a.geometry.coordinates;\n  var coords2 = b.geometry.coordinates;\n  var s1 = coordId(coords1[0]);\n  var e1 = coordId(coords1[coords1.length - 1]);\n  var s2 = coordId(coords2[0]);\n  var e2 = coordId(coords2[coords2.length - 1]); // TODO: handle case where more than one of these is true!\n\n  var coords;\n\n  if (s1 === e2) {\n    coords = coords2.concat(coords1.slice(1));\n  } else if (s2 === e1) {\n    coords = coords1.concat(coords2.slice(1));\n  } else if (s1 === s2) {\n    coords = coords1.slice(1).reverse().concat(coords2);\n  } else if (e1 === e2) {\n    coords = coords1.concat(coords2.reverse().slice(1));\n  } else {\n    return null;\n  }\n\n  return lineString(coords);\n}\n\nexport default lineDissolve;","map":{"version":3,"names":["clone","isObject","lineString","multiLineString","getType","lineReduce","lineDissolve","geojson","options","Error","mutate","features","length","undefined","result","lastLine","previousLine","currentLine","merged","mergeLineStrings","push","map","line","coordinates","coordId","coord","toString","a","b","coords1","geometry","coords2","s1","e1","s2","e2","coords","concat","slice","reverse"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/concave/dist/es/lib/turf-line-dissolve.js"],"sourcesContent":["import clone from \"@turf/clone\";\nimport { isObject, lineString, multiLineString } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { lineReduce } from \"@turf/meta\";\n/**\n * Merges all connected (non-forking, non-junctioning) line strings into single lineStrings.\n * [LineString] -> LineString|MultiLineString\n *\n * @param {FeatureCollection<LineString|MultiLineString>} geojson Lines to dissolve\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<LineString|MultiLineString>} Dissolved lines\n */\nfunction lineDissolve(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    options = options || {};\n    if (!isObject(options)) {\n        throw new Error(\"options is invalid\");\n    }\n    var mutate = options.mutate;\n    // Validation\n    if (getType(geojson) !== \"FeatureCollection\") {\n        throw new Error(\"geojson must be a FeatureCollection\");\n    }\n    if (!geojson.features.length) {\n        throw new Error(\"geojson is empty\");\n    }\n    // Clone geojson to avoid side effects\n    if (mutate === false || mutate === undefined) {\n        geojson = clone(geojson);\n    }\n    var result = [];\n    var lastLine = lineReduce(geojson, function (previousLine, currentLine) {\n        // Attempt to merge this LineString with the other LineStrings, updating\n        // the reference as it is merged with others and grows.\n        var merged = mergeLineStrings(previousLine, currentLine);\n        // Accumulate the merged LineString\n        if (merged) {\n            return merged;\n            // Put the unmerged LineString back into the list\n        }\n        else {\n            result.push(previousLine);\n            return currentLine;\n        }\n    });\n    // Append the last line\n    if (lastLine) {\n        result.push(lastLine);\n    }\n    // Return null if no lines were dissolved\n    if (!result.length) {\n        return null;\n        // Return LineString if only 1 line was dissolved\n    }\n    else if (result.length === 1) {\n        return result[0];\n        // Return MultiLineString if multiple lines were dissolved with gaps\n    }\n    else {\n        return multiLineString(result.map(function (line) {\n            return line.coordinates;\n        }));\n    }\n}\n// [Number, Number] -> String\nfunction coordId(coord) {\n    return coord[0].toString() + \",\" + coord[1].toString();\n}\n/**\n * LineString, LineString -> LineString\n *\n * @private\n * @param {Feature<LineString>} a line1\n * @param {Feature<LineString>} b line2\n * @returns {Feature<LineString>|null} Merged LineString\n */\nfunction mergeLineStrings(a, b) {\n    var coords1 = a.geometry.coordinates;\n    var coords2 = b.geometry.coordinates;\n    var s1 = coordId(coords1[0]);\n    var e1 = coordId(coords1[coords1.length - 1]);\n    var s2 = coordId(coords2[0]);\n    var e2 = coordId(coords2[coords2.length - 1]);\n    // TODO: handle case where more than one of these is true!\n    var coords;\n    if (s1 === e2) {\n        coords = coords2.concat(coords1.slice(1));\n    }\n    else if (s2 === e1) {\n        coords = coords1.concat(coords2.slice(1));\n    }\n    else if (s1 === s2) {\n        coords = coords1.slice(1).reverse().concat(coords2);\n    }\n    else if (e1 === e2) {\n        coords = coords1.concat(coords2.reverse().slice(1));\n    }\n    else {\n        return null;\n    }\n    return lineString(coords);\n}\nexport default lineDissolve;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}