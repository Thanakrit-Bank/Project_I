{"ast":null,"code":"// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html\nimport { degreesToRadians, lengthToRadians, point, radiansToDegrees } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n/**\r\n * Takes a {@link Point} and calculates the location of a destination point given a distance in\r\n * degrees, radians, miles, or kilometers; and bearing in degrees.\r\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\r\n *\r\n * @name destination\r\n * @param {Coord} origin starting point\r\n * @param {number} distance distance from the origin point\r\n * @param {number} bearing ranging from -180 to 180\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\r\n * @param {Object} [options.properties={}] Translate properties to Point\r\n * @returns {Feature<Point>} destination point\r\n * @example\r\n * var point = turf.point([-75.343, 39.984]);\r\n * var distance = 50;\r\n * var bearing = 90;\r\n * var options = {units: 'miles'};\r\n *\r\n * var destination = turf.destination(point, distance, bearing, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [point, destination]\r\n * destination.properties['marker-color'] = '#f00';\r\n * point.properties['marker-color'] = '#0f0';\r\n */\n\nexport default function destination(origin, distance, bearing, options) {\n  if (options === void 0) {\n    options = {};\n  } // Handle input\n\n\n  var coordinates1 = getCoord(origin);\n  var longitude1 = degreesToRadians(coordinates1[0]);\n  var latitude1 = degreesToRadians(coordinates1[1]);\n  var bearingRad = degreesToRadians(bearing);\n  var radians = lengthToRadians(distance, options.units); // Main\n\n  var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) + Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));\n  var longitude2 = longitude1 + Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\n  var lng = radiansToDegrees(longitude2);\n  var lat = radiansToDegrees(latitude2);\n  return point([lng, lat], options.properties);\n}","map":{"version":3,"names":["degreesToRadians","lengthToRadians","point","radiansToDegrees","getCoord","destination","origin","distance","bearing","options","coordinates1","longitude1","latitude1","bearingRad","radians","units","latitude2","Math","asin","sin","cos","longitude2","atan2","lng","lat","properties"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/destination/dist/es/index.js"],"sourcesContent":["// http://en.wikipedia.org/wiki/Haversine_formula\r\n// http://www.movable-type.co.uk/scripts/latlong.html\r\nimport { degreesToRadians, lengthToRadians, point, radiansToDegrees, } from \"@turf/helpers\";\r\nimport { getCoord } from \"@turf/invariant\";\r\n/**\r\n * Takes a {@link Point} and calculates the location of a destination point given a distance in\r\n * degrees, radians, miles, or kilometers; and bearing in degrees.\r\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\r\n *\r\n * @name destination\r\n * @param {Coord} origin starting point\r\n * @param {number} distance distance from the origin point\r\n * @param {number} bearing ranging from -180 to 180\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\r\n * @param {Object} [options.properties={}] Translate properties to Point\r\n * @returns {Feature<Point>} destination point\r\n * @example\r\n * var point = turf.point([-75.343, 39.984]);\r\n * var distance = 50;\r\n * var bearing = 90;\r\n * var options = {units: 'miles'};\r\n *\r\n * var destination = turf.destination(point, distance, bearing, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [point, destination]\r\n * destination.properties['marker-color'] = '#f00';\r\n * point.properties['marker-color'] = '#0f0';\r\n */\r\nexport default function destination(origin, distance, bearing, options) {\r\n    if (options === void 0) { options = {}; }\r\n    // Handle input\r\n    var coordinates1 = getCoord(origin);\r\n    var longitude1 = degreesToRadians(coordinates1[0]);\r\n    var latitude1 = degreesToRadians(coordinates1[1]);\r\n    var bearingRad = degreesToRadians(bearing);\r\n    var radians = lengthToRadians(distance, options.units);\r\n    // Main\r\n    var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) +\r\n        Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));\r\n    var longitude2 = longitude1 +\r\n        Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));\r\n    var lng = radiansToDegrees(longitude2);\r\n    var lat = radiansToDegrees(latitude2);\r\n    return point([lng, lat], options.properties);\r\n}\r\n"],"mappings":"AAAA;AACA;AACA,SAASA,gBAAT,EAA2BC,eAA3B,EAA4CC,KAA5C,EAAmDC,gBAAnD,QAA4E,eAA5E;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,OAAvC,EAAgDC,OAAhD,EAAyD;EACpE,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe,CAD2B,CAEpE;;;EACA,IAAIC,YAAY,GAAGN,QAAQ,CAACE,MAAD,CAA3B;EACA,IAAIK,UAAU,GAAGX,gBAAgB,CAACU,YAAY,CAAC,CAAD,CAAb,CAAjC;EACA,IAAIE,SAAS,GAAGZ,gBAAgB,CAACU,YAAY,CAAC,CAAD,CAAb,CAAhC;EACA,IAAIG,UAAU,GAAGb,gBAAgB,CAACQ,OAAD,CAAjC;EACA,IAAIM,OAAO,GAAGb,eAAe,CAACM,QAAD,EAAWE,OAAO,CAACM,KAAnB,CAA7B,CAPoE,CAQpE;;EACA,IAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASP,SAAT,IAAsBK,IAAI,CAACG,GAAL,CAASN,OAAT,CAAtB,GACtBG,IAAI,CAACG,GAAL,CAASR,SAAT,IAAsBK,IAAI,CAACE,GAAL,CAASL,OAAT,CAAtB,GAA0CG,IAAI,CAACG,GAAL,CAASP,UAAT,CAD9B,CAAhB;EAEA,IAAIQ,UAAU,GAAGV,UAAU,GACvBM,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACE,GAAL,CAASN,UAAT,IAAuBI,IAAI,CAACE,GAAL,CAASL,OAAT,CAAvB,GAA2CG,IAAI,CAACG,GAAL,CAASR,SAAT,CAAtD,EAA2EK,IAAI,CAACG,GAAL,CAASN,OAAT,IAAoBG,IAAI,CAACE,GAAL,CAASP,SAAT,IAAsBK,IAAI,CAACE,GAAL,CAASH,SAAT,CAArH,CADJ;EAEA,IAAIO,GAAG,GAAGpB,gBAAgB,CAACkB,UAAD,CAA1B;EACA,IAAIG,GAAG,GAAGrB,gBAAgB,CAACa,SAAD,CAA1B;EACA,OAAOd,KAAK,CAAC,CAACqB,GAAD,EAAMC,GAAN,CAAD,EAAaf,OAAO,CAACgB,UAArB,CAAZ;AACH"},"metadata":{},"sourceType":"module"}