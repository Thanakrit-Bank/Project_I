{"ast":null,"code":"import bbox from '@turf/bbox';\nimport hexGrid from '@turf/hex-grid';\nimport pointGrid from '@turf/point-grid';\nimport distance from '@turf/distance';\nimport centroid from '@turf/centroid';\nimport squareGrid from '@turf/square-grid';\nimport triangleGrid from '@turf/triangle-grid';\nimport clone from '@turf/clone';\nimport { featureCollection } from '@turf/helpers';\nimport { featureEach } from '@turf/meta';\nimport { collectionOf } from '@turf/invariant';\n/**\n * Takes a set of points and estimates their 'property' values on a grid using the [Inverse Distance Weighting (IDW) method](https://en.wikipedia.org/wiki/Inverse_distance_weighting).\n *\n * @name interpolate\n * @param {FeatureCollection<Point>} points with known value\n * @param {number} cellSize the distance across each grid point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.gridType='square'] defines the output format based on a Grid Type (options: 'square' | 'point' | 'hex' | 'triangle')\n * @param {string} [options.property='elevation'] the property name in `points` from which z-values will be pulled, zValue fallbacks to 3rd coordinate if no property exists.\n * @param {string} [options.units='kilometers'] used in calculating cellSize, can be degrees, radians, miles, or kilometers\n * @param {number} [options.weight=1] exponent regulating the distance-decay weighting\n * @returns {FeatureCollection<Point|Polygon>} grid of points or polygons with interpolated 'property'\n * @example\n * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n *\n * // add a random property to each point\n * turf.featureEach(points, function(point) {\n *     point.properties.solRad = Math.random() * 50;\n * });\n * var options = {gridType: 'points', property: 'solRad', units: 'miles'};\n * var grid = turf.interpolate(points, 100, options);\n *\n * //addToMap\n * var addToMap = [grid];\n */\n\nfunction interpolate(points, cellSize, options) {\n  // Optional parameters\n  options = options || {};\n  if (typeof options !== \"object\") throw new Error(\"options is invalid\");\n  var gridType = options.gridType;\n  var property = options.property;\n  var weight = options.weight; // validation\n\n  if (!points) throw new Error(\"points is required\");\n  collectionOf(points, \"Point\", \"input must contain Points\");\n  if (!cellSize) throw new Error(\"cellSize is required\");\n  if (weight !== undefined && typeof weight !== \"number\") throw new Error(\"weight must be a number\"); // default values\n\n  property = property || \"elevation\";\n  gridType = gridType || \"square\";\n  weight = weight || 1;\n  var box = bbox(points);\n  var grid;\n\n  switch (gridType) {\n    case \"point\":\n    case \"points\":\n      grid = pointGrid(box, cellSize, options);\n      break;\n\n    case \"square\":\n    case \"squares\":\n      grid = squareGrid(box, cellSize, options);\n      break;\n\n    case \"hex\":\n    case \"hexes\":\n      grid = hexGrid(box, cellSize, options);\n      break;\n\n    case \"triangle\":\n    case \"triangles\":\n      grid = triangleGrid(box, cellSize, options);\n      break;\n\n    default:\n      throw new Error(\"invalid gridType\");\n  }\n\n  var results = [];\n  featureEach(grid, function (gridFeature) {\n    var zw = 0;\n    var sw = 0; // calculate the distance from each input point to the grid points\n\n    featureEach(points, function (point) {\n      var gridPoint = gridType === \"point\" ? gridFeature : centroid(gridFeature);\n      var d = distance(gridPoint, point, options);\n      var zValue; // property has priority for zValue, fallbacks to 3rd coordinate from geometry\n\n      if (property !== undefined) zValue = point.properties[property];\n      if (zValue === undefined) zValue = point.geometry.coordinates[2];\n      if (zValue === undefined) throw new Error(\"zValue is missing\");\n      if (d === 0) zw = zValue;\n      var w = 1.0 / Math.pow(d, weight);\n      sw += w;\n      zw += w * zValue;\n    }); // write interpolated value for each grid point\n\n    var newFeature = clone(gridFeature);\n    newFeature.properties[property] = zw / sw;\n    results.push(newFeature);\n  });\n  return featureCollection(results);\n}\n\nexport default interpolate;","map":{"version":3,"names":["bbox","hexGrid","pointGrid","distance","centroid","squareGrid","triangleGrid","clone","featureCollection","featureEach","collectionOf","interpolate","points","cellSize","options","Error","gridType","property","weight","undefined","box","grid","results","gridFeature","zw","sw","point","gridPoint","d","zValue","properties","geometry","coordinates","w","Math","pow","newFeature","push"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/interpolate/dist/es/index.js"],"sourcesContent":["import bbox from '@turf/bbox';\nimport hexGrid from '@turf/hex-grid';\nimport pointGrid from '@turf/point-grid';\nimport distance from '@turf/distance';\nimport centroid from '@turf/centroid';\nimport squareGrid from '@turf/square-grid';\nimport triangleGrid from '@turf/triangle-grid';\nimport clone from '@turf/clone';\nimport { featureCollection } from '@turf/helpers';\nimport { featureEach } from '@turf/meta';\nimport { collectionOf } from '@turf/invariant';\n\n/**\n * Takes a set of points and estimates their 'property' values on a grid using the [Inverse Distance Weighting (IDW) method](https://en.wikipedia.org/wiki/Inverse_distance_weighting).\n *\n * @name interpolate\n * @param {FeatureCollection<Point>} points with known value\n * @param {number} cellSize the distance across each grid point\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.gridType='square'] defines the output format based on a Grid Type (options: 'square' | 'point' | 'hex' | 'triangle')\n * @param {string} [options.property='elevation'] the property name in `points` from which z-values will be pulled, zValue fallbacks to 3rd coordinate if no property exists.\n * @param {string} [options.units='kilometers'] used in calculating cellSize, can be degrees, radians, miles, or kilometers\n * @param {number} [options.weight=1] exponent regulating the distance-decay weighting\n * @returns {FeatureCollection<Point|Polygon>} grid of points or polygons with interpolated 'property'\n * @example\n * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n *\n * // add a random property to each point\n * turf.featureEach(points, function(point) {\n *     point.properties.solRad = Math.random() * 50;\n * });\n * var options = {gridType: 'points', property: 'solRad', units: 'miles'};\n * var grid = turf.interpolate(points, 100, options);\n *\n * //addToMap\n * var addToMap = [grid];\n */\nfunction interpolate(points, cellSize, options) {\n  // Optional parameters\n  options = options || {};\n  if (typeof options !== \"object\") throw new Error(\"options is invalid\");\n  var gridType = options.gridType;\n  var property = options.property;\n  var weight = options.weight;\n\n  // validation\n  if (!points) throw new Error(\"points is required\");\n  collectionOf(points, \"Point\", \"input must contain Points\");\n  if (!cellSize) throw new Error(\"cellSize is required\");\n  if (weight !== undefined && typeof weight !== \"number\")\n    throw new Error(\"weight must be a number\");\n\n  // default values\n  property = property || \"elevation\";\n  gridType = gridType || \"square\";\n  weight = weight || 1;\n\n  var box = bbox(points);\n  var grid;\n  switch (gridType) {\n    case \"point\":\n    case \"points\":\n      grid = pointGrid(box, cellSize, options);\n      break;\n    case \"square\":\n    case \"squares\":\n      grid = squareGrid(box, cellSize, options);\n      break;\n    case \"hex\":\n    case \"hexes\":\n      grid = hexGrid(box, cellSize, options);\n      break;\n    case \"triangle\":\n    case \"triangles\":\n      grid = triangleGrid(box, cellSize, options);\n      break;\n    default:\n      throw new Error(\"invalid gridType\");\n  }\n  var results = [];\n  featureEach(grid, function (gridFeature) {\n    var zw = 0;\n    var sw = 0;\n    // calculate the distance from each input point to the grid points\n    featureEach(points, function (point) {\n      var gridPoint =\n        gridType === \"point\" ? gridFeature : centroid(gridFeature);\n      var d = distance(gridPoint, point, options);\n      var zValue;\n      // property has priority for zValue, fallbacks to 3rd coordinate from geometry\n      if (property !== undefined) zValue = point.properties[property];\n      if (zValue === undefined) zValue = point.geometry.coordinates[2];\n      if (zValue === undefined) throw new Error(\"zValue is missing\");\n      if (d === 0) zw = zValue;\n      var w = 1.0 / Math.pow(d, weight);\n      sw += w;\n      zw += w * zValue;\n    });\n    // write interpolated value for each grid point\n    var newFeature = clone(gridFeature);\n    newFeature.properties[property] = zw / sw;\n    results.push(newFeature);\n  });\n  return featureCollection(results);\n}\n\nexport default interpolate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}