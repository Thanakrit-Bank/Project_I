{"ast":null,"code":"import { geomReduce } from \"@turf/meta\"; // Note: change RADIUS => earthRadius\n\nvar RADIUS = 6378137;\n/**\r\n * Takes one or more features and returns their area in square meters.\r\n *\r\n * @name area\r\n * @param {GeoJSON} geojson input GeoJSON feature(s)\r\n * @returns {number} area in square meters\r\n * @example\r\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\r\n *\r\n * var area = turf.area(polygon);\r\n *\r\n * //addToMap\r\n * var addToMap = [polygon]\r\n * polygon.properties.area = area\r\n */\n\nexport default function area(geojson) {\n  return geomReduce(geojson, function (value, geom) {\n    return value + calculateArea(geom);\n  }, 0);\n}\n/**\r\n * Calculate Area\r\n *\r\n * @private\r\n * @param {Geometry} geom GeoJSON Geometries\r\n * @returns {number} area\r\n */\n\nfunction calculateArea(geom) {\n  var total = 0;\n  var i;\n\n  switch (geom.type) {\n    case \"Polygon\":\n      return polygonArea(geom.coordinates);\n\n    case \"MultiPolygon\":\n      for (i = 0; i < geom.coordinates.length; i++) {\n        total += polygonArea(geom.coordinates[i]);\n      }\n\n      return total;\n\n    case \"Point\":\n    case \"MultiPoint\":\n    case \"LineString\":\n    case \"MultiLineString\":\n      return 0;\n  }\n\n  return 0;\n}\n\nfunction polygonArea(coords) {\n  var total = 0;\n\n  if (coords && coords.length > 0) {\n    total += Math.abs(ringArea(coords[0]));\n\n    for (var i = 1; i < coords.length; i++) {\n      total -= Math.abs(ringArea(coords[i]));\n    }\n  }\n\n  return total;\n}\n/**\r\n * @private\r\n * Calculate the approximate area of the polygon were it projected onto the earth.\r\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\r\n *\r\n * Reference:\r\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\r\n * JPL Publication 07-03, Jet Propulsion\r\n * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409\r\n *\r\n * @param {Array<Array<number>>} coords Ring Coordinates\r\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\r\n */\n\n\nfunction ringArea(coords) {\n  var p1;\n  var p2;\n  var p3;\n  var lowerIndex;\n  var middleIndex;\n  var upperIndex;\n  var i;\n  var total = 0;\n  var coordsLength = coords.length;\n\n  if (coordsLength > 2) {\n    for (i = 0; i < coordsLength; i++) {\n      if (i === coordsLength - 2) {\n        // i = N-2\n        lowerIndex = coordsLength - 2;\n        middleIndex = coordsLength - 1;\n        upperIndex = 0;\n      } else if (i === coordsLength - 1) {\n        // i = N-1\n        lowerIndex = coordsLength - 1;\n        middleIndex = 0;\n        upperIndex = 1;\n      } else {\n        // i = 0 to N-3\n        lowerIndex = i;\n        middleIndex = i + 1;\n        upperIndex = i + 2;\n      }\n\n      p1 = coords[lowerIndex];\n      p2 = coords[middleIndex];\n      p3 = coords[upperIndex];\n      total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\n    }\n\n    total = total * RADIUS * RADIUS / 2;\n  }\n\n  return total;\n}\n\nfunction rad(num) {\n  return num * Math.PI / 180;\n}","map":{"version":3,"names":["geomReduce","RADIUS","area","geojson","value","geom","calculateArea","total","i","type","polygonArea","coordinates","length","coords","Math","abs","ringArea","p1","p2","p3","lowerIndex","middleIndex","upperIndex","coordsLength","rad","sin","num","PI"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/area/dist/es/index.js"],"sourcesContent":["import { geomReduce } from \"@turf/meta\";\r\n// Note: change RADIUS => earthRadius\r\nvar RADIUS = 6378137;\r\n/**\r\n * Takes one or more features and returns their area in square meters.\r\n *\r\n * @name area\r\n * @param {GeoJSON} geojson input GeoJSON feature(s)\r\n * @returns {number} area in square meters\r\n * @example\r\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\r\n *\r\n * var area = turf.area(polygon);\r\n *\r\n * //addToMap\r\n * var addToMap = [polygon]\r\n * polygon.properties.area = area\r\n */\r\nexport default function area(geojson) {\r\n    return geomReduce(geojson, function (value, geom) {\r\n        return value + calculateArea(geom);\r\n    }, 0);\r\n}\r\n/**\r\n * Calculate Area\r\n *\r\n * @private\r\n * @param {Geometry} geom GeoJSON Geometries\r\n * @returns {number} area\r\n */\r\nfunction calculateArea(geom) {\r\n    var total = 0;\r\n    var i;\r\n    switch (geom.type) {\r\n        case \"Polygon\":\r\n            return polygonArea(geom.coordinates);\r\n        case \"MultiPolygon\":\r\n            for (i = 0; i < geom.coordinates.length; i++) {\r\n                total += polygonArea(geom.coordinates[i]);\r\n            }\r\n            return total;\r\n        case \"Point\":\r\n        case \"MultiPoint\":\r\n        case \"LineString\":\r\n        case \"MultiLineString\":\r\n            return 0;\r\n    }\r\n    return 0;\r\n}\r\nfunction polygonArea(coords) {\r\n    var total = 0;\r\n    if (coords && coords.length > 0) {\r\n        total += Math.abs(ringArea(coords[0]));\r\n        for (var i = 1; i < coords.length; i++) {\r\n            total -= Math.abs(ringArea(coords[i]));\r\n        }\r\n    }\r\n    return total;\r\n}\r\n/**\r\n * @private\r\n * Calculate the approximate area of the polygon were it projected onto the earth.\r\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\r\n *\r\n * Reference:\r\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\r\n * JPL Publication 07-03, Jet Propulsion\r\n * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409\r\n *\r\n * @param {Array<Array<number>>} coords Ring Coordinates\r\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\r\n */\r\nfunction ringArea(coords) {\r\n    var p1;\r\n    var p2;\r\n    var p3;\r\n    var lowerIndex;\r\n    var middleIndex;\r\n    var upperIndex;\r\n    var i;\r\n    var total = 0;\r\n    var coordsLength = coords.length;\r\n    if (coordsLength > 2) {\r\n        for (i = 0; i < coordsLength; i++) {\r\n            if (i === coordsLength - 2) {\r\n                // i = N-2\r\n                lowerIndex = coordsLength - 2;\r\n                middleIndex = coordsLength - 1;\r\n                upperIndex = 0;\r\n            }\r\n            else if (i === coordsLength - 1) {\r\n                // i = N-1\r\n                lowerIndex = coordsLength - 1;\r\n                middleIndex = 0;\r\n                upperIndex = 1;\r\n            }\r\n            else {\r\n                // i = 0 to N-3\r\n                lowerIndex = i;\r\n                middleIndex = i + 1;\r\n                upperIndex = i + 2;\r\n            }\r\n            p1 = coords[lowerIndex];\r\n            p2 = coords[middleIndex];\r\n            p3 = coords[upperIndex];\r\n            total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\r\n        }\r\n        total = (total * RADIUS * RADIUS) / 2;\r\n    }\r\n    return total;\r\n}\r\nfunction rad(num) {\r\n    return (num * Math.PI) / 180;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}