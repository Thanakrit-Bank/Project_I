{"ast":null,"code":"import { lineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\nimport Spline from \"./lib/spline.js\";\n/**\n * Takes a {@link LineString|line} and returns a curved version\n * by applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)\n * algorithm.\n *\n * The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).\n *\n * @name bezierSpline\n * @param {Feature<LineString>} line input LineString\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] Translate properties to output\n * @param {number} [options.resolution=10000] time in milliseconds between points\n * @param {number} [options.sharpness=0.85] a measure of how curvy the path should be between splines\n * @returns {Feature<LineString>} curved line\n * @example\n * var line = turf.lineString([\n *   [-76.091308, 18.427501],\n *   [-76.695556, 18.729501],\n *   [-76.552734, 19.40443],\n *   [-74.61914, 19.134789],\n *   [-73.652343, 20.07657],\n *   [-73.157958, 20.210656]\n * ]);\n *\n * var curved = turf.bezierSpline(line);\n *\n * //addToMap\n * var addToMap = [line, curved]\n * curved.properties = { stroke: '#0F0' };\n */\n\nfunction bezier(line, options) {\n  if (options === void 0) {\n    options = {};\n  } // Optional params\n\n\n  var resolution = options.resolution || 10000;\n  var sharpness = options.sharpness || 0.85;\n  var coords = [];\n  var points = getGeom(line).coordinates.map(function (pt) {\n    return {\n      x: pt[0],\n      y: pt[1]\n    };\n  });\n  var spline = new Spline({\n    duration: resolution,\n    points: points,\n    sharpness: sharpness\n  });\n\n  var pushCoord = function pushCoord(time) {\n    var pos = spline.pos(time);\n\n    if (Math.floor(time / 100) % 2 === 0) {\n      coords.push([pos.x, pos.y]);\n    }\n  };\n\n  for (var i = 0; i < spline.duration; i += 10) {\n    pushCoord(i);\n  }\n\n  pushCoord(spline.duration);\n  return lineString(coords, options.properties);\n}\n\nexport default bezier;","map":{"version":3,"names":["lineString","getGeom","Spline","bezier","line","options","resolution","sharpness","coords","points","coordinates","map","pt","x","y","spline","duration","pushCoord","time","pos","Math","floor","push","i","properties"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/bezier-spline/dist/es/index.js"],"sourcesContent":["import { lineString } from \"@turf/helpers\";\nimport { getGeom } from \"@turf/invariant\";\nimport Spline from \"./lib/spline.js\";\n/**\n * Takes a {@link LineString|line} and returns a curved version\n * by applying a [Bezier spline](http://en.wikipedia.org/wiki/B%C3%A9zier_spline)\n * algorithm.\n *\n * The bezier spline implementation is by [Leszek Rybicki](http://leszek.rybicki.cc/).\n *\n * @name bezierSpline\n * @param {Feature<LineString>} line input LineString\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] Translate properties to output\n * @param {number} [options.resolution=10000] time in milliseconds between points\n * @param {number} [options.sharpness=0.85] a measure of how curvy the path should be between splines\n * @returns {Feature<LineString>} curved line\n * @example\n * var line = turf.lineString([\n *   [-76.091308, 18.427501],\n *   [-76.695556, 18.729501],\n *   [-76.552734, 19.40443],\n *   [-74.61914, 19.134789],\n *   [-73.652343, 20.07657],\n *   [-73.157958, 20.210656]\n * ]);\n *\n * var curved = turf.bezierSpline(line);\n *\n * //addToMap\n * var addToMap = [line, curved]\n * curved.properties = { stroke: '#0F0' };\n */\nfunction bezier(line, options) {\n    if (options === void 0) { options = {}; }\n    // Optional params\n    var resolution = options.resolution || 10000;\n    var sharpness = options.sharpness || 0.85;\n    var coords = [];\n    var points = getGeom(line).coordinates.map(function (pt) {\n        return { x: pt[0], y: pt[1] };\n    });\n    var spline = new Spline({\n        duration: resolution,\n        points: points,\n        sharpness: sharpness,\n    });\n    var pushCoord = function (time) {\n        var pos = spline.pos(time);\n        if (Math.floor(time / 100) % 2 === 0) {\n            coords.push([pos.x, pos.y]);\n        }\n    };\n    for (var i = 0; i < spline.duration; i += 10) {\n        pushCoord(i);\n    }\n    pushCoord(spline.duration);\n    return lineString(coords, options.properties);\n}\nexport default bezier;\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+B;EAC3B,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe,CADd,CAE3B;;;EACA,IAAIC,UAAU,GAAGD,OAAO,CAACC,UAAR,IAAsB,KAAvC;EACA,IAAIC,SAAS,GAAGF,OAAO,CAACE,SAAR,IAAqB,IAArC;EACA,IAAIC,MAAM,GAAG,EAAb;EACA,IAAIC,MAAM,GAAGR,OAAO,CAACG,IAAD,CAAP,CAAcM,WAAd,CAA0BC,GAA1B,CAA8B,UAAUC,EAAV,EAAc;IACrD,OAAO;MAAEC,CAAC,EAAED,EAAE,CAAC,CAAD,CAAP;MAAYE,CAAC,EAAEF,EAAE,CAAC,CAAD;IAAjB,CAAP;EACH,CAFY,CAAb;EAGA,IAAIG,MAAM,GAAG,IAAIb,MAAJ,CAAW;IACpBc,QAAQ,EAAEV,UADU;IAEpBG,MAAM,EAAEA,MAFY;IAGpBF,SAAS,EAAEA;EAHS,CAAX,CAAb;;EAKA,IAAIU,SAAS,GAAG,SAAZA,SAAY,CAAUC,IAAV,EAAgB;IAC5B,IAAIC,GAAG,GAAGJ,MAAM,CAACI,GAAP,CAAWD,IAAX,CAAV;;IACA,IAAIE,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,GAAlB,IAAyB,CAAzB,KAA+B,CAAnC,EAAsC;MAClCV,MAAM,CAACc,IAAP,CAAY,CAACH,GAAG,CAACN,CAAL,EAAQM,GAAG,CAACL,CAAZ,CAAZ;IACH;EACJ,CALD;;EAMA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,MAAM,CAACC,QAA3B,EAAqCO,CAAC,IAAI,EAA1C,EAA8C;IAC1CN,SAAS,CAACM,CAAD,CAAT;EACH;;EACDN,SAAS,CAACF,MAAM,CAACC,QAAR,CAAT;EACA,OAAOhB,UAAU,CAACQ,MAAD,EAASH,OAAO,CAACmB,UAAjB,CAAjB;AACH;;AACD,eAAerB,MAAf"},"metadata":{},"sourceType":"module"}