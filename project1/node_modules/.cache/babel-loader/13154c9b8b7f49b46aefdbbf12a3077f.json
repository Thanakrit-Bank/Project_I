{"ast":null,"code":"import _slicedToArray from \"D:/Project/Mix_Project/Project_I/project1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"D:\\\\Project\\\\Mix_Project\\\\Project_I\\\\project1\\\\src\\\\components\\\\GridData.jsx\",\n    _s = $RefreshSig$();\n\nimport { GeoJSON, Popup, FeatureGroup } from 'react-leaflet';\nimport React, { useState, useEffect } from 'react';\nimport legendData from './../data/dataLegend';\nimport * as turf from '@turf/turf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GridData(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shp = _useState4[0],\n      setShp = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoadinga = _useState6[0],\n      setIsLoadinga = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isLoadingb = _useState8[0],\n      setIsLoadingb = _useState8[1];\n\n  var url_grid = 'http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02');\n  var url_shp = 'http://127.0.0.1:5000/get_province/'.concat(props.pName);\n  var interval = (legendData.spei.max - legendData.spei.min) / 8;\n  var twoDegit = parseFloat(interval).toFixed(2);\n  useEffect(function () {\n    setData([]);\n    fetchData(url_grid, url_shp);\n    console.log(url_grid);\n  }, [props.pName]);\n\n  function fetchData(url_grid, url_shp) {\n    var reqOptions = {\n      method: \"get\",\n      headers: {\n        \"x-access-token\": \"test\"\n      }\n    };\n    var request_grid = fetch(url_grid, reqOptions);\n    console.log('feching');\n    request_grid.then(function (r) {\n      return r.json();\n    }).then(function (data) {\n      setData(data);\n      setIsLoadinga(false);\n    }, function (error) {\n      console.error(error);\n    });\n    var request_shp = fetch(url_shp, reqOptions);\n    console.log('feching');\n    request_shp.then(function (r) {\n      return r.json();\n    }).then(function (data) {\n      setShp(data);\n      setIsLoadingb(false);\n    }, function (error) {\n      console.error(error);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(FeatureGroup, {\n    children: data.map(function (data) {\n      var myStyleGrid = {\n        color: \"white\",\n        weight: 0,\n        fillOpacity: 0.75,\n        fillColor: 'white'\n      };\n\n      if (data.properties.index < legendData.spei.min + twoDegit) {\n        myStyleGrid.fillColor = '#FFEDA0';\n      } else if (data.properties.index < legendData.spei.min + 2 * twoDegit) {\n        myStyleGrid.fillColor = '#FED976';\n      } else if (data.properties.index < legendData.spei.min + 3 * twoDegit) {\n        myStyleGrid.fillColor = '#FEB24C';\n      } else if (data.properties.index < legendData.spei.min + 4 * twoDegit) {\n        myStyleGrid.fillColor = '#FD8D3C';\n      } else if (data.properties.index < legendData.spei.min + 5 * twoDegit) {\n        myStyleGrid.fillColor = '#FC4E2A';\n      } else if (data.properties.index < legendData.spei.min + 6 * twoDegit) {\n        myStyleGrid.fillColor = '#E31A1C';\n      } else if (data.properties.index < legendData.spei.min + 7 * twoDegit) {\n        myStyleGrid.fillColor = '#BD0026';\n      } else {\n        myStyleGrid.fillColor = '#800026';\n      } // console.log(intersection);\n\n\n      if (isLoadinga && isLoadingb) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"map-view select\",\n          children: \"Loading.....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 24\n        }, _this);\n      } else {\n        var poly1 = turf.polygon(data.geometry.coordinates); // var poly2 = turf.polygon(shp.features.geometry.coordinates)\n        // var intersection = turf.intersect(poly1, poly2)\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(GeoJSON, {\n            data: data,\n            style: myStyleGrid,\n            children: [/*#__PURE__*/_jsxDEV(Popup, {\n              children: [\" \", Math.round(data.properties.index * 1000) / 1000, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, _this), console.log(shp.features.geometry.coordinates)]\n          }, data.properties.grid_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, _this);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GridData, \"bn3Wws1XJFdl78pAev0agwfkRbk=\");\n\n_c = GridData;\nexport default GridData;\n\nvar _c;\n\n$RefreshReg$(_c, \"GridData\");","map":{"version":3,"names":["GeoJSON","Popup","FeatureGroup","React","useState","useEffect","legendData","turf","GridData","props","data","setData","shp","setShp","isLoadinga","setIsLoadinga","isLoadingb","setIsLoadingb","url_grid","concat","pName","url_shp","interval","spei","max","min","twoDegit","parseFloat","toFixed","fetchData","console","log","reqOptions","method","headers","request_grid","fetch","then","r","json","error","request_shp","map","myStyleGrid","color","weight","fillOpacity","fillColor","properties","index","poly1","polygon","geometry","coordinates","Math","round","features","grid_id"],"sources":["D:/Project/Mix_Project/Project_I/project1/src/components/GridData.jsx"],"sourcesContent":["import {GeoJSON, Popup, FeatureGroup} from 'react-leaflet' \r\nimport React, { useState,useEffect } from 'react'\r\nimport legendData from  './../data/dataLegend'  \r\nimport * as turf from '@turf/turf'\r\n\r\nfunction GridData(props) {\r\n    const [data, setData] = useState([])\r\n    const [shp, setShp] = useState([])\r\n    const [isLoadinga, setIsLoadinga] = useState(true)\r\n    const [isLoadingb, setIsLoadingb] = useState(true)\r\n    const url_grid = 'http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02')\r\n    const url_shp = 'http://127.0.0.1:5000/get_province/'.concat(props.pName)\r\n    const interval = (legendData.spei.max - legendData.spei.min)/8\r\n    const twoDegit = parseFloat(interval).toFixed(2)\r\n    \r\n    useEffect(()=>{\r\n        setData([])\r\n        fetchData(url_grid, url_shp)\r\n        console.log(url_grid);\r\n    },[props.pName])\r\n\r\n    function fetchData(url_grid,url_shp) {\r\n        const reqOptions ={\r\n          method:\"get\", \r\n          headers:{\"x-access-token\": \"test\"},\r\n        }\r\n        \r\n        let request_grid = fetch(url_grid, reqOptions);\r\n        console.log('feching');\r\n        request_grid\r\n        .then(r => r.json())\r\n        .then(data => {\r\n            setData(data)\r\n            setIsLoadinga(false)\r\n        }, (error) => {\r\n            console.error(error);\r\n        });\r\n\r\n        let request_shp = fetch(url_shp, reqOptions);\r\n        console.log('feching');\r\n        request_shp\r\n        .then(r => r.json())\r\n        .then(data => {\r\n            setShp(data)\r\n            setIsLoadingb(false)\r\n        }, (error) => {\r\n            console.error(error);\r\n        });\r\n      }\r\n\r\n    return (\r\n    <FeatureGroup>\r\n    \r\n        {data.map(data => {\r\n            var myStyleGrid = {\r\n                color: \"white\",\r\n                weight: 0,\r\n                fillOpacity: 0.75,\r\n                fillColor: 'white',\r\n            }\r\n            if(data.properties.index < legendData.spei.min + twoDegit){\r\n                myStyleGrid.fillColor = '#FFEDA0'\r\n            }else if(data.properties.index < legendData.spei.min + 2*twoDegit){\r\n                myStyleGrid.fillColor = '#FED976'\r\n            }else if(data.properties.index < legendData.spei.min + 3*twoDegit){\r\n                myStyleGrid.fillColor = '#FEB24C'\r\n            }else if(data.properties.index < legendData.spei.min + 4*twoDegit){\r\n                myStyleGrid.fillColor = '#FD8D3C'\r\n            }else if(data.properties.index < legendData.spei.min + 5*twoDegit){\r\n                myStyleGrid.fillColor = '#FC4E2A'\r\n            }else if(data.properties.index < legendData.spei.min + 6*twoDegit){\r\n                myStyleGrid.fillColor = '#E31A1C'\r\n            }else if(data.properties.index < legendData.spei.min + 7*twoDegit){\r\n                myStyleGrid.fillColor = '#BD0026'\r\n            }else {\r\n                myStyleGrid.fillColor = '#800026'\r\n            }\r\n            // console.log(intersection);\r\n            if (isLoadinga && isLoadingb){\r\n                return(<div className='map-view select'>Loading.....</div>)\r\n            }else{\r\n                var poly1 = turf.polygon(data.geometry.coordinates)\r\n                // var poly2 = turf.polygon(shp.features.geometry.coordinates)\r\n                // var intersection = turf.intersect(poly1, poly2)\r\n                return (\r\n                    <div>\r\n                        <GeoJSON key={data.properties.grid_id}  data={data} style={myStyleGrid}>\r\n                            <Popup> {Math.round(data.properties.index*1000)/1000} </Popup>\r\n                            {/* {console.log(data)} */}\r\n                            {console.log(shp.features.geometry.coordinates)}\r\n                        </GeoJSON>\r\n                    </div>\r\n                    )\r\n            }\r\n            })\r\n        }        \r\n        {/* <GeoJSON key={shp.features.properties.id} data={shp}>\r\n            {console.log(shp.features.properties.id)}\r\n        </GeoJSON>  */}\r\n    </FeatureGroup> \r\n  )\r\n}\r\n\r\nexport default GridData"],"mappings":"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"},"metadata":{},"sourceType":"module"}