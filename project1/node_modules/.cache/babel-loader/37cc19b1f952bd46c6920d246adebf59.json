{"ast":null,"code":"'use strict';\n\nvar RBush = require('rbush');\n\nvar Queue = require('tinyqueue');\n\nvar pointInPolygon = require('point-in-polygon');\n\nvar orient = require('robust-predicates/umd/orient2d.min.js').orient2d; // Fix for require issue in webpack https://github.com/mapbox/concaveman/issues/18\n\n\nif (Queue.default) {\n  Queue = Queue.default;\n}\n\nmodule.exports = concaveman;\nmodule.exports.default = concaveman;\n\nfunction concaveman(points, concavity, lengthThreshold) {\n  // a relative measure of concavity; higher value means simpler hull\n  concavity = Math.max(0, concavity === undefined ? 2 : concavity); // when a segment goes below this length threshold, it won't be drilled down further\n\n  lengthThreshold = lengthThreshold || 0; // start with a convex hull of the points\n\n  var hull = fastConvexHull(points); // index the points with an R-tree\n\n  var tree = new RBush(16);\n\n  tree.toBBox = function (a) {\n    return {\n      minX: a[0],\n      minY: a[1],\n      maxX: a[0],\n      maxY: a[1]\n    };\n  };\n\n  tree.compareMinX = function (a, b) {\n    return a[0] - b[0];\n  };\n\n  tree.compareMinY = function (a, b) {\n    return a[1] - b[1];\n  };\n\n  tree.load(points); // turn the convex hull into a linked list and populate the initial edge queue with the nodes\n\n  var queue = [];\n\n  for (var i = 0, last; i < hull.length; i++) {\n    var p = hull[i];\n    tree.remove(p);\n    last = insertNode(p, last);\n    queue.push(last);\n  } // index the segments with an R-tree (for intersection checks)\n\n\n  var segTree = new RBush(16);\n\n  for (i = 0; i < queue.length; i++) {\n    segTree.insert(updateBBox(queue[i]));\n  }\n\n  var sqConcavity = concavity * concavity;\n  var sqLenThreshold = lengthThreshold * lengthThreshold; // process edges one by one\n\n  while (queue.length) {\n    var node = queue.shift();\n    var a = node.p;\n    var b = node.next.p; // skip the edge if it's already short enough\n\n    var sqLen = getSqDist(a, b);\n    if (sqLen < sqLenThreshold) continue;\n    var maxSqLen = sqLen / sqConcavity; // find the best connection point for the current edge to flex inward to\n\n    p = findCandidate(tree, node.prev.p, a, b, node.next.next.p, maxSqLen, segTree); // if we found a connection and it satisfies our concavity measure\n\n    if (p && Math.min(getSqDist(p, a), getSqDist(p, b)) <= maxSqLen) {\n      // connect the edge endpoints through this point and add 2 new edges to the queue\n      queue.push(node);\n      queue.push(insertNode(p, node)); // update point and segment indexes\n\n      tree.remove(p);\n      segTree.remove(node);\n      segTree.insert(updateBBox(node));\n      segTree.insert(updateBBox(node.next));\n    }\n  } // convert the resulting hull linked list to an array of points\n\n\n  node = last;\n  var concave = [];\n\n  do {\n    concave.push(node.p);\n    node = node.next;\n  } while (node !== last);\n\n  concave.push(node.p);\n  return concave;\n}\n\nfunction findCandidate(tree, a, b, c, d, maxDist, segTree) {\n  var queue = new Queue([], compareDist);\n  var node = tree.data; // search through the point R-tree with a depth-first search using a priority queue\n  // in the order of distance to the edge (b, c)\n\n  while (node) {\n    for (var i = 0; i < node.children.length; i++) {\n      var child = node.children[i];\n      var dist = node.leaf ? sqSegDist(child, b, c) : sqSegBoxDist(b, c, child);\n      if (dist > maxDist) continue; // skip the node if it's farther than we ever need\n\n      queue.push({\n        node: child,\n        dist: dist\n      });\n    }\n\n    while (queue.length && !queue.peek().node.children) {\n      var item = queue.pop();\n      var p = item.node; // skip all points that are as close to adjacent edges (a,b) and (c,d),\n      // and points that would introduce self-intersections when connected\n\n      var d0 = sqSegDist(p, a, b);\n      var d1 = sqSegDist(p, c, d);\n      if (item.dist < d0 && item.dist < d1 && noIntersections(b, p, segTree) && noIntersections(c, p, segTree)) return p;\n    }\n\n    node = queue.pop();\n    if (node) node = node.node;\n  }\n\n  return null;\n}\n\nfunction compareDist(a, b) {\n  return a.dist - b.dist;\n} // square distance from a segment bounding box to the given one\n\n\nfunction sqSegBoxDist(a, b, bbox) {\n  if (inside(a, bbox) || inside(b, bbox)) return 0;\n  var d1 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.maxX, bbox.minY);\n  if (d1 === 0) return 0;\n  var d2 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.minX, bbox.maxY);\n  if (d2 === 0) return 0;\n  var d3 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.maxX, bbox.minY, bbox.maxX, bbox.maxY);\n  if (d3 === 0) return 0;\n  var d4 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.maxY, bbox.maxX, bbox.maxY);\n  if (d4 === 0) return 0;\n  return Math.min(d1, d2, d3, d4);\n}\n\nfunction inside(a, bbox) {\n  return a[0] >= bbox.minX && a[0] <= bbox.maxX && a[1] >= bbox.minY && a[1] <= bbox.maxY;\n} // check if the edge (a,b) doesn't intersect any other edges\n\n\nfunction noIntersections(a, b, segTree) {\n  var minX = Math.min(a[0], b[0]);\n  var minY = Math.min(a[1], b[1]);\n  var maxX = Math.max(a[0], b[0]);\n  var maxY = Math.max(a[1], b[1]);\n  var edges = segTree.search({\n    minX: minX,\n    minY: minY,\n    maxX: maxX,\n    maxY: maxY\n  });\n\n  for (var i = 0; i < edges.length; i++) {\n    if (intersects(edges[i].p, edges[i].next.p, a, b)) return false;\n  }\n\n  return true;\n}\n\nfunction cross(p1, p2, p3) {\n  return orient(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n} // check if the edges (p1,q1) and (p2,q2) intersect\n\n\nfunction intersects(p1, q1, p2, q2) {\n  return p1 !== q2 && q1 !== p2 && cross(p1, q1, p2) > 0 !== cross(p1, q1, q2) > 0 && cross(p2, q2, p1) > 0 !== cross(p2, q2, q1) > 0;\n} // update the bounding box of a node's edge\n\n\nfunction updateBBox(node) {\n  var p1 = node.p;\n  var p2 = node.next.p;\n  node.minX = Math.min(p1[0], p2[0]);\n  node.minY = Math.min(p1[1], p2[1]);\n  node.maxX = Math.max(p1[0], p2[0]);\n  node.maxY = Math.max(p1[1], p2[1]);\n  return node;\n} // speed up convex hull by filtering out points inside quadrilateral formed by 4 extreme points\n\n\nfunction fastConvexHull(points) {\n  var left = points[0];\n  var top = points[0];\n  var right = points[0];\n  var bottom = points[0]; // find the leftmost, rightmost, topmost and bottommost points\n\n  for (var i = 0; i < points.length; i++) {\n    var p = points[i];\n    if (p[0] < left[0]) left = p;\n    if (p[0] > right[0]) right = p;\n    if (p[1] < top[1]) top = p;\n    if (p[1] > bottom[1]) bottom = p;\n  } // filter out points that are inside the resulting quadrilateral\n\n\n  var cull = [left, top, right, bottom];\n  var filtered = cull.slice();\n\n  for (i = 0; i < points.length; i++) {\n    if (!pointInPolygon(points[i], cull)) filtered.push(points[i]);\n  } // get convex hull around the filtered points\n\n\n  return convexHull(filtered);\n} // create a new node in a doubly linked list\n\n\nfunction insertNode(p, prev) {\n  var node = {\n    p: p,\n    prev: null,\n    next: null,\n    minX: 0,\n    minY: 0,\n    maxX: 0,\n    maxY: 0\n  };\n\n  if (!prev) {\n    node.prev = node;\n    node.next = node;\n  } else {\n    node.next = prev.next;\n    node.prev = prev;\n    prev.next.prev = node;\n    prev.next = node;\n  }\n\n  return node;\n} // square distance between 2 points\n\n\nfunction getSqDist(p1, p2) {\n  var dx = p1[0] - p2[0],\n      dy = p1[1] - p2[1];\n  return dx * dx + dy * dy;\n} // square distance from a point to a segment\n\n\nfunction sqSegDist(p, p1, p2) {\n  var x = p1[0],\n      y = p1[1],\n      dx = p2[0] - x,\n      dy = p2[1] - y;\n\n  if (dx !== 0 || dy !== 0) {\n    var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2[0];\n      y = p2[1];\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p[0] - x;\n  dy = p[1] - y;\n  return dx * dx + dy * dy;\n} // segment to segment distance, ported from http://geomalgorithms.com/a07-_distance.html by Dan Sunday\n\n\nfunction sqSegSegDist(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var ux = x1 - x0;\n  var uy = y1 - y0;\n  var vx = x3 - x2;\n  var vy = y3 - y2;\n  var wx = x0 - x2;\n  var wy = y0 - y2;\n  var a = ux * ux + uy * uy;\n  var b = ux * vx + uy * vy;\n  var c = vx * vx + vy * vy;\n  var d = ux * wx + uy * wy;\n  var e = vx * wx + vy * wy;\n  var D = a * c - b * b;\n  var sc, sN, tc, tN;\n  var sD = D;\n  var tD = D;\n\n  if (D === 0) {\n    sN = 0;\n    sD = 1;\n    tN = e;\n    tD = c;\n  } else {\n    sN = b * e - c * d;\n    tN = a * e - b * d;\n\n    if (sN < 0) {\n      sN = 0;\n      tN = e;\n      tD = c;\n    } else if (sN > sD) {\n      sN = sD;\n      tN = e + b;\n      tD = c;\n    }\n  }\n\n  if (tN < 0.0) {\n    tN = 0.0;\n    if (-d < 0.0) sN = 0.0;else if (-d > a) sN = sD;else {\n      sN = -d;\n      sD = a;\n    }\n  } else if (tN > tD) {\n    tN = tD;\n    if (-d + b < 0.0) sN = 0;else if (-d + b > a) sN = sD;else {\n      sN = -d + b;\n      sD = a;\n    }\n  }\n\n  sc = sN === 0 ? 0 : sN / sD;\n  tc = tN === 0 ? 0 : tN / tD;\n  var cx = (1 - sc) * x0 + sc * x1;\n  var cy = (1 - sc) * y0 + sc * y1;\n  var cx2 = (1 - tc) * x2 + tc * x3;\n  var cy2 = (1 - tc) * y2 + tc * y3;\n  var dx = cx2 - cx;\n  var dy = cy2 - cy;\n  return dx * dx + dy * dy;\n}\n\nfunction compareByX(a, b) {\n  return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];\n}\n\nfunction convexHull(points) {\n  points.sort(compareByX);\n  var lower = [];\n\n  for (var i = 0; i < points.length; i++) {\n    while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points[i]) <= 0) {\n      lower.pop();\n    }\n\n    lower.push(points[i]);\n  }\n\n  var upper = [];\n\n  for (var ii = points.length - 1; ii >= 0; ii--) {\n    while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points[ii]) <= 0) {\n      upper.pop();\n    }\n\n    upper.push(points[ii]);\n  }\n\n  upper.pop();\n  lower.pop();\n  return lower.concat(upper);\n}","map":{"version":3,"names":["RBush","require","Queue","pointInPolygon","orient","orient2d","default","module","exports","concaveman","points","concavity","lengthThreshold","Math","max","undefined","hull","fastConvexHull","tree","toBBox","a","minX","minY","maxX","maxY","compareMinX","b","compareMinY","load","queue","i","last","length","p","remove","insertNode","push","segTree","insert","updateBBox","sqConcavity","sqLenThreshold","node","shift","next","sqLen","getSqDist","maxSqLen","findCandidate","prev","min","concave","c","d","maxDist","compareDist","data","children","child","dist","leaf","sqSegDist","sqSegBoxDist","peek","item","pop","d0","d1","noIntersections","bbox","inside","sqSegSegDist","d2","d3","d4","edges","search","intersects","cross","p1","p2","p3","q1","q2","left","top","right","bottom","cull","filtered","slice","convexHull","dx","dy","x","y","t","x0","y0","x1","y1","x2","y2","x3","y3","ux","uy","vx","vy","wx","wy","e","D","sc","sN","tc","tN","sD","tD","cx","cy","cx2","cy2","compareByX","sort","lower","upper","ii","concat"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/concaveman/index.js"],"sourcesContent":["'use strict';\n\nvar RBush = require('rbush');\nvar Queue = require('tinyqueue');\nvar pointInPolygon = require('point-in-polygon');\nvar orient = require('robust-predicates/umd/orient2d.min.js').orient2d;\n\n// Fix for require issue in webpack https://github.com/mapbox/concaveman/issues/18\nif (Queue.default) {\n    Queue = Queue.default;\n}\n\nmodule.exports = concaveman;\nmodule.exports.default = concaveman;\n\nfunction concaveman(points, concavity, lengthThreshold) {\n    // a relative measure of concavity; higher value means simpler hull\n    concavity = Math.max(0, concavity === undefined ? 2 : concavity);\n\n    // when a segment goes below this length threshold, it won't be drilled down further\n    lengthThreshold = lengthThreshold || 0;\n\n    // start with a convex hull of the points\n    var hull = fastConvexHull(points);\n\n    // index the points with an R-tree\n    var tree = new RBush(16);\n    tree.toBBox = function (a) {\n        return {\n            minX: a[0],\n            minY: a[1],\n            maxX: a[0],\n            maxY: a[1]\n        };\n    };\n    tree.compareMinX = function (a, b) { return a[0] - b[0]; };\n    tree.compareMinY = function (a, b) { return a[1] - b[1]; };\n\n    tree.load(points);\n\n    // turn the convex hull into a linked list and populate the initial edge queue with the nodes\n    var queue = [];\n    for (var i = 0, last; i < hull.length; i++) {\n        var p = hull[i];\n        tree.remove(p);\n        last = insertNode(p, last);\n        queue.push(last);\n    }\n\n    // index the segments with an R-tree (for intersection checks)\n    var segTree = new RBush(16);\n    for (i = 0; i < queue.length; i++) segTree.insert(updateBBox(queue[i]));\n\n    var sqConcavity = concavity * concavity;\n    var sqLenThreshold = lengthThreshold * lengthThreshold;\n\n    // process edges one by one\n    while (queue.length) {\n        var node = queue.shift();\n        var a = node.p;\n        var b = node.next.p;\n\n        // skip the edge if it's already short enough\n        var sqLen = getSqDist(a, b);\n        if (sqLen < sqLenThreshold) continue;\n\n        var maxSqLen = sqLen / sqConcavity;\n\n        // find the best connection point for the current edge to flex inward to\n        p = findCandidate(tree, node.prev.p, a, b, node.next.next.p, maxSqLen, segTree);\n\n        // if we found a connection and it satisfies our concavity measure\n        if (p && Math.min(getSqDist(p, a), getSqDist(p, b)) <= maxSqLen) {\n            // connect the edge endpoints through this point and add 2 new edges to the queue\n            queue.push(node);\n            queue.push(insertNode(p, node));\n\n            // update point and segment indexes\n            tree.remove(p);\n            segTree.remove(node);\n            segTree.insert(updateBBox(node));\n            segTree.insert(updateBBox(node.next));\n        }\n    }\n\n    // convert the resulting hull linked list to an array of points\n    node = last;\n    var concave = [];\n    do {\n        concave.push(node.p);\n        node = node.next;\n    } while (node !== last);\n\n    concave.push(node.p);\n\n    return concave;\n}\n\nfunction findCandidate(tree, a, b, c, d, maxDist, segTree) {\n    var queue = new Queue([], compareDist);\n    var node = tree.data;\n\n    // search through the point R-tree with a depth-first search using a priority queue\n    // in the order of distance to the edge (b, c)\n    while (node) {\n        for (var i = 0; i < node.children.length; i++) {\n            var child = node.children[i];\n\n            var dist = node.leaf ? sqSegDist(child, b, c) : sqSegBoxDist(b, c, child);\n            if (dist > maxDist) continue; // skip the node if it's farther than we ever need\n\n            queue.push({\n                node: child,\n                dist: dist\n            });\n        }\n\n        while (queue.length && !queue.peek().node.children) {\n            var item = queue.pop();\n            var p = item.node;\n\n            // skip all points that are as close to adjacent edges (a,b) and (c,d),\n            // and points that would introduce self-intersections when connected\n            var d0 = sqSegDist(p, a, b);\n            var d1 = sqSegDist(p, c, d);\n            if (item.dist < d0 && item.dist < d1 &&\n                noIntersections(b, p, segTree) &&\n                noIntersections(c, p, segTree)) return p;\n        }\n\n        node = queue.pop();\n        if (node) node = node.node;\n    }\n\n    return null;\n}\n\nfunction compareDist(a, b) {\n    return a.dist - b.dist;\n}\n\n// square distance from a segment bounding box to the given one\nfunction sqSegBoxDist(a, b, bbox) {\n    if (inside(a, bbox) || inside(b, bbox)) return 0;\n    var d1 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.maxX, bbox.minY);\n    if (d1 === 0) return 0;\n    var d2 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.minX, bbox.maxY);\n    if (d2 === 0) return 0;\n    var d3 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.maxX, bbox.minY, bbox.maxX, bbox.maxY);\n    if (d3 === 0) return 0;\n    var d4 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.maxY, bbox.maxX, bbox.maxY);\n    if (d4 === 0) return 0;\n    return Math.min(d1, d2, d3, d4);\n}\n\nfunction inside(a, bbox) {\n    return a[0] >= bbox.minX &&\n           a[0] <= bbox.maxX &&\n           a[1] >= bbox.minY &&\n           a[1] <= bbox.maxY;\n}\n\n// check if the edge (a,b) doesn't intersect any other edges\nfunction noIntersections(a, b, segTree) {\n    var minX = Math.min(a[0], b[0]);\n    var minY = Math.min(a[1], b[1]);\n    var maxX = Math.max(a[0], b[0]);\n    var maxY = Math.max(a[1], b[1]);\n\n    var edges = segTree.search({minX: minX, minY: minY, maxX: maxX, maxY: maxY});\n    for (var i = 0; i < edges.length; i++) {\n        if (intersects(edges[i].p, edges[i].next.p, a, b)) return false;\n    }\n    return true;\n}\n\nfunction cross(p1, p2, p3) {\n    return orient(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);\n}\n\n// check if the edges (p1,q1) and (p2,q2) intersect\nfunction intersects(p1, q1, p2, q2) {\n    return p1 !== q2 && q1 !== p2 &&\n        cross(p1, q1, p2) > 0 !== cross(p1, q1, q2) > 0 &&\n        cross(p2, q2, p1) > 0 !== cross(p2, q2, q1) > 0;\n}\n\n// update the bounding box of a node's edge\nfunction updateBBox(node) {\n    var p1 = node.p;\n    var p2 = node.next.p;\n    node.minX = Math.min(p1[0], p2[0]);\n    node.minY = Math.min(p1[1], p2[1]);\n    node.maxX = Math.max(p1[0], p2[0]);\n    node.maxY = Math.max(p1[1], p2[1]);\n    return node;\n}\n\n// speed up convex hull by filtering out points inside quadrilateral formed by 4 extreme points\nfunction fastConvexHull(points) {\n    var left = points[0];\n    var top = points[0];\n    var right = points[0];\n    var bottom = points[0];\n\n    // find the leftmost, rightmost, topmost and bottommost points\n    for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        if (p[0] < left[0]) left = p;\n        if (p[0] > right[0]) right = p;\n        if (p[1] < top[1]) top = p;\n        if (p[1] > bottom[1]) bottom = p;\n    }\n\n    // filter out points that are inside the resulting quadrilateral\n    var cull = [left, top, right, bottom];\n    var filtered = cull.slice();\n    for (i = 0; i < points.length; i++) {\n        if (!pointInPolygon(points[i], cull)) filtered.push(points[i]);\n    }\n\n    // get convex hull around the filtered points\n    return convexHull(filtered);\n}\n\n// create a new node in a doubly linked list\nfunction insertNode(p, prev) {\n    var node = {\n        p: p,\n        prev: null,\n        next: null,\n        minX: 0,\n        minY: 0,\n        maxX: 0,\n        maxY: 0\n    };\n\n    if (!prev) {\n        node.prev = node;\n        node.next = node;\n\n    } else {\n        node.next = prev.next;\n        node.prev = prev;\n        prev.next.prev = node;\n        prev.next = node;\n    }\n    return node;\n}\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1[0] - p2[0],\n        dy = p1[1] - p2[1];\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction sqSegDist(p, p1, p2) {\n\n    var x = p1[0],\n        y = p1[1],\n        dx = p2[0] - x,\n        dy = p2[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2[0];\n            y = p2[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p[0] - x;\n    dy = p[1] - y;\n\n    return dx * dx + dy * dy;\n}\n\n// segment to segment distance, ported from http://geomalgorithms.com/a07-_distance.html by Dan Sunday\nfunction sqSegSegDist(x0, y0, x1, y1, x2, y2, x3, y3) {\n    var ux = x1 - x0;\n    var uy = y1 - y0;\n    var vx = x3 - x2;\n    var vy = y3 - y2;\n    var wx = x0 - x2;\n    var wy = y0 - y2;\n    var a = ux * ux + uy * uy;\n    var b = ux * vx + uy * vy;\n    var c = vx * vx + vy * vy;\n    var d = ux * wx + uy * wy;\n    var e = vx * wx + vy * wy;\n    var D = a * c - b * b;\n\n    var sc, sN, tc, tN;\n    var sD = D;\n    var tD = D;\n\n    if (D === 0) {\n        sN = 0;\n        sD = 1;\n        tN = e;\n        tD = c;\n    } else {\n        sN = b * e - c * d;\n        tN = a * e - b * d;\n        if (sN < 0) {\n            sN = 0;\n            tN = e;\n            tD = c;\n        } else if (sN > sD) {\n            sN = sD;\n            tN = e + b;\n            tD = c;\n        }\n    }\n\n    if (tN < 0.0) {\n        tN = 0.0;\n        if (-d < 0.0) sN = 0.0;\n        else if (-d > a) sN = sD;\n        else {\n            sN = -d;\n            sD = a;\n        }\n    } else if (tN > tD) {\n        tN = tD;\n        if ((-d + b) < 0.0) sN = 0;\n        else if (-d + b > a) sN = sD;\n        else {\n            sN = -d + b;\n            sD = a;\n        }\n    }\n\n    sc = sN === 0 ? 0 : sN / sD;\n    tc = tN === 0 ? 0 : tN / tD;\n\n    var cx = (1 - sc) * x0 + sc * x1;\n    var cy = (1 - sc) * y0 + sc * y1;\n    var cx2 = (1 - tc) * x2 + tc * x3;\n    var cy2 = (1 - tc) * y2 + tc * y3;\n    var dx = cx2 - cx;\n    var dy = cy2 - cy;\n\n    return dx * dx + dy * dy;\n}\n\nfunction compareByX(a, b) {\n    return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];\n}\n\nfunction convexHull(points) {\n    points.sort(compareByX);\n\n    var lower = [];\n    for (var i = 0; i < points.length; i++) {\n        while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points[i]) <= 0) {\n            lower.pop();\n        }\n        lower.push(points[i]);\n    }\n\n    var upper = [];\n    for (var ii = points.length - 1; ii >= 0; ii--) {\n        while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points[ii]) <= 0) {\n            upper.pop();\n        }\n        upper.push(points[ii]);\n    }\n\n    upper.pop();\n    lower.pop();\n    return lower.concat(upper);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}