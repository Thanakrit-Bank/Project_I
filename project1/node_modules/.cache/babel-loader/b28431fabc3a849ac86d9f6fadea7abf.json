{"ast":null,"code":"import join from \"./join.js\"; // Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared\n// point sequences are identified. The topology can then be subsequently deduped\n// to remove exact duplicate arcs.\n\nexport default function (topology) {\n  var junctions = join(topology),\n      coordinates = topology.coordinates,\n      lines = topology.lines,\n      rings = topology.rings,\n      next,\n      i,\n      n;\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n        lineMid = line[0],\n        lineEnd = line[1];\n\n    while (++lineMid < lineEnd) {\n      if (junctions.has(coordinates[lineMid])) {\n        next = {\n          0: lineMid,\n          1: line[1]\n        };\n        line[1] = lineMid;\n        line = line.next = next;\n      }\n    }\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n        ringStart = ring[0],\n        ringMid = ringStart,\n        ringEnd = ring[1],\n        ringFixed = junctions.has(coordinates[ringStart]);\n\n    while (++ringMid < ringEnd) {\n      if (junctions.has(coordinates[ringMid])) {\n        if (ringFixed) {\n          next = {\n            0: ringMid,\n            1: ring[1]\n          };\n          ring[1] = ringMid;\n          ring = ring.next = next;\n        } else {\n          // For the first junction, we can rotate rather than cut.\n          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);\n          coordinates[ringEnd] = coordinates[ringStart];\n          ringFixed = true;\n          ringMid = ringStart; // restart; we may have skipped junctions\n        }\n      }\n    }\n  }\n\n  return topology;\n}\n\nfunction rotateArray(array, start, end, offset) {\n  reverse(array, start, end);\n  reverse(array, start, start + offset);\n  reverse(array, start + offset, end);\n}\n\nfunction reverse(array, start, end) {\n  for (var mid = start + (end-- - start >> 1), t; start < mid; ++start, --end) {\n    t = array[start], array[start] = array[end], array[end] = t;\n  }\n}","map":{"version":3,"names":["join","topology","junctions","coordinates","lines","rings","next","i","n","length","line","lineMid","lineEnd","has","ring","ringStart","ringMid","ringEnd","ringFixed","rotateArray","array","start","end","offset","reverse","mid","t"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/topojson-server/src/cut.js"],"sourcesContent":["import join from \"./join.js\";\n\n// Given an extracted (pre-)topology, cuts (or rotates) arcs so that all shared\n// point sequences are identified. The topology can then be subsequently deduped\n// to remove exact duplicate arcs.\nexport default function(topology) {\n  var junctions = join(topology),\n      coordinates = topology.coordinates,\n      lines = topology.lines,\n      rings = topology.rings,\n      next,\n      i, n;\n\n  for (i = 0, n = lines.length; i < n; ++i) {\n    var line = lines[i],\n        lineMid = line[0],\n        lineEnd = line[1];\n    while (++lineMid < lineEnd) {\n      if (junctions.has(coordinates[lineMid])) {\n        next = {0: lineMid, 1: line[1]};\n        line[1] = lineMid;\n        line = line.next = next;\n      }\n    }\n  }\n\n  for (i = 0, n = rings.length; i < n; ++i) {\n    var ring = rings[i],\n        ringStart = ring[0],\n        ringMid = ringStart,\n        ringEnd = ring[1],\n        ringFixed = junctions.has(coordinates[ringStart]);\n    while (++ringMid < ringEnd) {\n      if (junctions.has(coordinates[ringMid])) {\n        if (ringFixed) {\n          next = {0: ringMid, 1: ring[1]};\n          ring[1] = ringMid;\n          ring = ring.next = next;\n        } else { // For the first junction, we can rotate rather than cut.\n          rotateArray(coordinates, ringStart, ringEnd, ringEnd - ringMid);\n          coordinates[ringEnd] = coordinates[ringStart];\n          ringFixed = true;\n          ringMid = ringStart; // restart; we may have skipped junctions\n        }\n      }\n    }\n  }\n\n  return topology;\n}\n\nfunction rotateArray(array, start, end, offset) {\n  reverse(array, start, end);\n  reverse(array, start, start + offset);\n  reverse(array, start + offset, end);\n}\n\nfunction reverse(array, start, end) {\n  for (var mid = start + ((end-- - start) >> 1), t; start < mid; ++start, --end) {\n    t = array[start], array[start] = array[end], array[end] = t;\n  }\n}\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB,C,CAEA;AACA;AACA;;AACA,eAAe,UAASC,QAAT,EAAmB;EAChC,IAAIC,SAAS,GAAGF,IAAI,CAACC,QAAD,CAApB;EAAA,IACIE,WAAW,GAAGF,QAAQ,CAACE,WAD3B;EAAA,IAEIC,KAAK,GAAGH,QAAQ,CAACG,KAFrB;EAAA,IAGIC,KAAK,GAAGJ,QAAQ,CAACI,KAHrB;EAAA,IAIIC,IAJJ;EAAA,IAKIC,CALJ;EAAA,IAKOC,CALP;;EAOA,KAAKD,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGJ,KAAK,CAACK,MAAtB,EAA8BF,CAAC,GAAGC,CAAlC,EAAqC,EAAED,CAAvC,EAA0C;IACxC,IAAIG,IAAI,GAAGN,KAAK,CAACG,CAAD,CAAhB;IAAA,IACII,OAAO,GAAGD,IAAI,CAAC,CAAD,CADlB;IAAA,IAEIE,OAAO,GAAGF,IAAI,CAAC,CAAD,CAFlB;;IAGA,OAAO,EAAEC,OAAF,GAAYC,OAAnB,EAA4B;MAC1B,IAAIV,SAAS,CAACW,GAAV,CAAcV,WAAW,CAACQ,OAAD,CAAzB,CAAJ,EAAyC;QACvCL,IAAI,GAAG;UAAC,GAAGK,OAAJ;UAAa,GAAGD,IAAI,CAAC,CAAD;QAApB,CAAP;QACAA,IAAI,CAAC,CAAD,CAAJ,GAAUC,OAAV;QACAD,IAAI,GAAGA,IAAI,CAACJ,IAAL,GAAYA,IAAnB;MACD;IACF;EACF;;EAED,KAAKC,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGH,KAAK,CAACI,MAAtB,EAA8BF,CAAC,GAAGC,CAAlC,EAAqC,EAAED,CAAvC,EAA0C;IACxC,IAAIO,IAAI,GAAGT,KAAK,CAACE,CAAD,CAAhB;IAAA,IACIQ,SAAS,GAAGD,IAAI,CAAC,CAAD,CADpB;IAAA,IAEIE,OAAO,GAAGD,SAFd;IAAA,IAGIE,OAAO,GAAGH,IAAI,CAAC,CAAD,CAHlB;IAAA,IAIII,SAAS,GAAGhB,SAAS,CAACW,GAAV,CAAcV,WAAW,CAACY,SAAD,CAAzB,CAJhB;;IAKA,OAAO,EAAEC,OAAF,GAAYC,OAAnB,EAA4B;MAC1B,IAAIf,SAAS,CAACW,GAAV,CAAcV,WAAW,CAACa,OAAD,CAAzB,CAAJ,EAAyC;QACvC,IAAIE,SAAJ,EAAe;UACbZ,IAAI,GAAG;YAAC,GAAGU,OAAJ;YAAa,GAAGF,IAAI,CAAC,CAAD;UAApB,CAAP;UACAA,IAAI,CAAC,CAAD,CAAJ,GAAUE,OAAV;UACAF,IAAI,GAAGA,IAAI,CAACR,IAAL,GAAYA,IAAnB;QACD,CAJD,MAIO;UAAE;UACPa,WAAW,CAAChB,WAAD,EAAcY,SAAd,EAAyBE,OAAzB,EAAkCA,OAAO,GAAGD,OAA5C,CAAX;UACAb,WAAW,CAACc,OAAD,CAAX,GAAuBd,WAAW,CAACY,SAAD,CAAlC;UACAG,SAAS,GAAG,IAAZ;UACAF,OAAO,GAAGD,SAAV,CAJK,CAIgB;QACtB;MACF;IACF;EACF;;EAED,OAAOd,QAAP;AACD;;AAED,SAASkB,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,MAAxC,EAAgD;EAC9CC,OAAO,CAACJ,KAAD,EAAQC,KAAR,EAAeC,GAAf,CAAP;EACAE,OAAO,CAACJ,KAAD,EAAQC,KAAR,EAAeA,KAAK,GAAGE,MAAvB,CAAP;EACAC,OAAO,CAACJ,KAAD,EAAQC,KAAK,GAAGE,MAAhB,EAAwBD,GAAxB,CAAP;AACD;;AAED,SAASE,OAAT,CAAiBJ,KAAjB,EAAwBC,KAAxB,EAA+BC,GAA/B,EAAoC;EAClC,KAAK,IAAIG,GAAG,GAAGJ,KAAK,IAAKC,GAAG,KAAKD,KAAT,IAAmB,CAAvB,CAAf,EAA0CK,CAA/C,EAAkDL,KAAK,GAAGI,GAA1D,EAA+D,EAAEJ,KAAF,EAAS,EAAEC,GAA1E,EAA+E;IAC7EI,CAAC,GAAGN,KAAK,CAACC,KAAD,CAAT,EAAkBD,KAAK,CAACC,KAAD,CAAL,GAAeD,KAAK,CAACE,GAAD,CAAtC,EAA6CF,KAAK,CAACE,GAAD,CAAL,GAAaI,CAA1D;EACD;AACF"},"metadata":{},"sourceType":"module"}