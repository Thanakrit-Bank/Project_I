{"ast":null,"code":"import clone from \"@turf/clone\";\nimport { isObject } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport lineDissolve from \"./turf-line-dissolve.js\";\nimport polygonDissolve from \"./turf-polygon-dissolve.js\";\n/**\n * Transform function: attempts to dissolve geojson objects where possible\n * [GeoJSON] -> GeoJSON geometry\n *\n * @private\n * @param {FeatureCollection<LineString|MultiLineString|Polygon|MultiPolygon>} geojson Features to dissolved\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<MultiLineString|MultiPolygon>} Dissolved Features\n */\n\nfunction dissolve(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  } // Optional parameters\n\n\n  options = options || {};\n\n  if (!isObject(options)) {\n    throw new Error(\"options is invalid\");\n  }\n\n  var mutate = options.mutate; // Validation\n\n  if (getType(geojson) !== \"FeatureCollection\") {\n    throw new Error(\"geojson must be a FeatureCollection\");\n  }\n\n  if (!geojson.features.length) {\n    throw new Error(\"geojson is empty\");\n  } // Clone geojson to avoid side effects\n  // Topojson modifies in place, so we need to deep clone first\n\n\n  if (mutate === false || mutate === undefined) {\n    geojson = clone(geojson);\n  } // Assert homogenity\n\n\n  var type = getHomogenousType(geojson);\n\n  if (!type) {\n    throw new Error(\"geojson must be homogenous\");\n  } // Data => Typescript hack\n\n\n  var data = geojson;\n\n  switch (type) {\n    case \"LineString\":\n      return lineDissolve(data, options);\n\n    case \"Polygon\":\n      return polygonDissolve(data, options);\n\n    default:\n      throw new Error(type + \" is not supported\");\n  }\n}\n/**\n * Checks if GeoJSON is Homogenous\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON\n * @returns {string|null} Homogenous type or null if multiple types\n */\n\n\nfunction getHomogenousType(geojson) {\n  var types = {};\n  flattenEach(geojson, function (feature) {\n    types[feature.geometry.type] = true;\n  });\n  var keys = Object.keys(types);\n\n  if (keys.length === 1) {\n    return keys[0];\n  }\n\n  return null;\n}\n\nexport default dissolve;","map":{"version":3,"names":["clone","isObject","getType","flattenEach","lineDissolve","polygonDissolve","dissolve","geojson","options","Error","mutate","features","length","undefined","type","getHomogenousType","data","types","feature","geometry","keys","Object"],"sources":["D:/Project/Mix_Project/Project_I/project1/node_modules/@turf/concave/dist/es/lib/turf-dissolve.js"],"sourcesContent":["import clone from \"@turf/clone\";\nimport { isObject } from \"@turf/helpers\";\nimport { getType } from \"@turf/invariant\";\nimport { flattenEach } from \"@turf/meta\";\nimport lineDissolve from \"./turf-line-dissolve.js\";\nimport polygonDissolve from \"./turf-polygon-dissolve.js\";\n/**\n * Transform function: attempts to dissolve geojson objects where possible\n * [GeoJSON] -> GeoJSON geometry\n *\n * @private\n * @param {FeatureCollection<LineString|MultiLineString|Polygon|MultiPolygon>} geojson Features to dissolved\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] Prevent input mutation\n * @returns {Feature<MultiLineString|MultiPolygon>} Dissolved Features\n */\nfunction dissolve(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Optional parameters\n    options = options || {};\n    if (!isObject(options)) {\n        throw new Error(\"options is invalid\");\n    }\n    var mutate = options.mutate;\n    // Validation\n    if (getType(geojson) !== \"FeatureCollection\") {\n        throw new Error(\"geojson must be a FeatureCollection\");\n    }\n    if (!geojson.features.length) {\n        throw new Error(\"geojson is empty\");\n    }\n    // Clone geojson to avoid side effects\n    // Topojson modifies in place, so we need to deep clone first\n    if (mutate === false || mutate === undefined) {\n        geojson = clone(geojson);\n    }\n    // Assert homogenity\n    var type = getHomogenousType(geojson);\n    if (!type) {\n        throw new Error(\"geojson must be homogenous\");\n    }\n    // Data => Typescript hack\n    var data = geojson;\n    switch (type) {\n        case \"LineString\":\n            return lineDissolve(data, options);\n        case \"Polygon\":\n            return polygonDissolve(data, options);\n        default:\n            throw new Error(type + \" is not supported\");\n    }\n}\n/**\n * Checks if GeoJSON is Homogenous\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON\n * @returns {string|null} Homogenous type or null if multiple types\n */\nfunction getHomogenousType(geojson) {\n    var types = {};\n    flattenEach(geojson, function (feature) {\n        types[feature.geometry.type] = true;\n    });\n    var keys = Object.keys(types);\n    if (keys.length === 1) {\n        return keys[0];\n    }\n    return null;\n}\nexport default dissolve;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,eAAP,MAA4B,4BAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoC;EAChC,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe,CADT,CAEhC;;;EACAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;EACA,IAAI,CAACP,QAAQ,CAACO,OAAD,CAAb,EAAwB;IACpB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;EACH;;EACD,IAAIC,MAAM,GAAGF,OAAO,CAACE,MAArB,CAPgC,CAQhC;;EACA,IAAIR,OAAO,CAACK,OAAD,CAAP,KAAqB,mBAAzB,EAA8C;IAC1C,MAAM,IAAIE,KAAJ,CAAU,qCAAV,CAAN;EACH;;EACD,IAAI,CAACF,OAAO,CAACI,QAAR,CAAiBC,MAAtB,EAA8B;IAC1B,MAAM,IAAIH,KAAJ,CAAU,kBAAV,CAAN;EACH,CAd+B,CAehC;EACA;;;EACA,IAAIC,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAKG,SAAnC,EAA8C;IAC1CN,OAAO,GAAGP,KAAK,CAACO,OAAD,CAAf;EACH,CAnB+B,CAoBhC;;;EACA,IAAIO,IAAI,GAAGC,iBAAiB,CAACR,OAAD,CAA5B;;EACA,IAAI,CAACO,IAAL,EAAW;IACP,MAAM,IAAIL,KAAJ,CAAU,4BAAV,CAAN;EACH,CAxB+B,CAyBhC;;;EACA,IAAIO,IAAI,GAAGT,OAAX;;EACA,QAAQO,IAAR;IACI,KAAK,YAAL;MACI,OAAOV,YAAY,CAACY,IAAD,EAAOR,OAAP,CAAnB;;IACJ,KAAK,SAAL;MACI,OAAOH,eAAe,CAACW,IAAD,EAAOR,OAAP,CAAtB;;IACJ;MACI,MAAM,IAAIC,KAAJ,CAAUK,IAAI,GAAG,mBAAjB,CAAN;EANR;AAQH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BR,OAA3B,EAAoC;EAChC,IAAIU,KAAK,GAAG,EAAZ;EACAd,WAAW,CAACI,OAAD,EAAU,UAAUW,OAAV,EAAmB;IACpCD,KAAK,CAACC,OAAO,CAACC,QAAR,CAAiBL,IAAlB,CAAL,GAA+B,IAA/B;EACH,CAFU,CAAX;EAGA,IAAIM,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,KAAZ,CAAX;;EACA,IAAIG,IAAI,CAACR,MAAL,KAAgB,CAApB,EAAuB;IACnB,OAAOQ,IAAI,CAAC,CAAD,CAAX;EACH;;EACD,OAAO,IAAP;AACH;;AACD,eAAed,QAAf"},"metadata":{},"sourceType":"module"}