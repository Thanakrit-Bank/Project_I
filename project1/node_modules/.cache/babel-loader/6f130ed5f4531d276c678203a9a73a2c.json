{"ast":null,"code":"import { geomEach, coordEach } from \"@turf/meta\";\nimport { isNumber, point } from \"@turf/helpers\";\n/**\r\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the mean center. Can be weighted.\r\n *\r\n * @name centerMean\r\n * @param {GeoJSON} geojson GeoJSON to be centered\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point\r\n * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point\r\n * @param {Object} [options.id={}] Translate GeoJSON Id to Point\r\n * @param {string} [options.weight] the property name used to weight the center\r\n * @returns {Feature<Point>} a Point feature at the mean center point of all input features\r\n * @example\r\n * var features = turf.featureCollection([\r\n *   turf.point([-97.522259, 35.4691], {value: 10}),\r\n *   turf.point([-97.502754, 35.463455], {value: 3}),\r\n *   turf.point([-97.508269, 35.463245], {value: 5})\r\n * ]);\r\n *\r\n * var options = {weight: \"value\"}\r\n * var mean = turf.centerMean(features, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [features, mean]\r\n * mean.properties['marker-size'] = 'large';\r\n * mean.properties['marker-color'] = '#000';\r\n */\n\nfunction centerMean(geojson, // To-Do include Typescript AllGeoJSON\noptions) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var sumXs = 0;\n  var sumYs = 0;\n  var sumNs = 0;\n  geomEach(geojson, function (geom, featureIndex, properties) {\n    var weight = options.weight ? properties === null || properties === void 0 ? void 0 : properties[options.weight] : undefined;\n    weight = weight === undefined || weight === null ? 1 : weight;\n    if (!isNumber(weight)) throw new Error(\"weight value must be a number for feature index \" + featureIndex);\n    weight = Number(weight);\n\n    if (weight > 0) {\n      coordEach(geom, function (coord) {\n        sumXs += coord[0] * weight;\n        sumYs += coord[1] * weight;\n        sumNs += weight;\n      });\n    }\n  });\n  return point([sumXs / sumNs, sumYs / sumNs], options.properties, options);\n}\n\nexport default centerMean;","map":{"version":3,"names":["geomEach","coordEach","isNumber","point","centerMean","geojson","options","sumXs","sumYs","sumNs","geom","featureIndex","properties","weight","undefined","Error","Number","coord"],"sources":["C:/Users/Administrator/Desktop/Project_I/project1/node_modules/@turf/center-mean/dist/es/index.js"],"sourcesContent":["import { geomEach, coordEach } from \"@turf/meta\";\r\nimport { isNumber, point, } from \"@turf/helpers\";\r\n/**\r\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the mean center. Can be weighted.\r\n *\r\n * @name centerMean\r\n * @param {GeoJSON} geojson GeoJSON to be centered\r\n * @param {Object} [options={}] Optional parameters\r\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point\r\n * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point\r\n * @param {Object} [options.id={}] Translate GeoJSON Id to Point\r\n * @param {string} [options.weight] the property name used to weight the center\r\n * @returns {Feature<Point>} a Point feature at the mean center point of all input features\r\n * @example\r\n * var features = turf.featureCollection([\r\n *   turf.point([-97.522259, 35.4691], {value: 10}),\r\n *   turf.point([-97.502754, 35.463455], {value: 3}),\r\n *   turf.point([-97.508269, 35.463245], {value: 5})\r\n * ]);\r\n *\r\n * var options = {weight: \"value\"}\r\n * var mean = turf.centerMean(features, options);\r\n *\r\n * //addToMap\r\n * var addToMap = [features, mean]\r\n * mean.properties['marker-size'] = 'large';\r\n * mean.properties['marker-color'] = '#000';\r\n */\r\nfunction centerMean(geojson, // To-Do include Typescript AllGeoJSON\r\noptions) {\r\n    if (options === void 0) { options = {}; }\r\n    var sumXs = 0;\r\n    var sumYs = 0;\r\n    var sumNs = 0;\r\n    geomEach(geojson, function (geom, featureIndex, properties) {\r\n        var weight = options.weight ? properties === null || properties === void 0 ? void 0 : properties[options.weight] : undefined;\r\n        weight = weight === undefined || weight === null ? 1 : weight;\r\n        if (!isNumber(weight))\r\n            throw new Error(\"weight value must be a number for feature index \" + featureIndex);\r\n        weight = Number(weight);\r\n        if (weight > 0) {\r\n            coordEach(geom, function (coord) {\r\n                sumXs += coord[0] * weight;\r\n                sumYs += coord[1] * weight;\r\n                sumNs += weight;\r\n            });\r\n        }\r\n    });\r\n    return point([sumXs / sumNs, sumYs / sumNs], options.properties, options);\r\n}\r\nexport default centerMean;\r\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,YAApC;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAiC,eAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC7BC,OADA,EACS;EACL,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe;;EACzC,IAAIC,KAAK,GAAG,CAAZ;EACA,IAAIC,KAAK,GAAG,CAAZ;EACA,IAAIC,KAAK,GAAG,CAAZ;EACAT,QAAQ,CAACK,OAAD,EAAU,UAAUK,IAAV,EAAgBC,YAAhB,EAA8BC,UAA9B,EAA0C;IACxD,IAAIC,MAAM,GAAGP,OAAO,CAACO,MAAR,GAAiBD,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+C,KAAK,CAApD,GAAwDA,UAAU,CAACN,OAAO,CAACO,MAAT,CAAnF,GAAsGC,SAAnH;IACAD,MAAM,GAAGA,MAAM,KAAKC,SAAX,IAAwBD,MAAM,KAAK,IAAnC,GAA0C,CAA1C,GAA8CA,MAAvD;IACA,IAAI,CAACX,QAAQ,CAACW,MAAD,CAAb,EACI,MAAM,IAAIE,KAAJ,CAAU,qDAAqDJ,YAA/D,CAAN;IACJE,MAAM,GAAGG,MAAM,CAACH,MAAD,CAAf;;IACA,IAAIA,MAAM,GAAG,CAAb,EAAgB;MACZZ,SAAS,CAACS,IAAD,EAAO,UAAUO,KAAV,EAAiB;QAC7BV,KAAK,IAAIU,KAAK,CAAC,CAAD,CAAL,GAAWJ,MAApB;QACAL,KAAK,IAAIS,KAAK,CAAC,CAAD,CAAL,GAAWJ,MAApB;QACAJ,KAAK,IAAII,MAAT;MACH,CAJQ,CAAT;IAKH;EACJ,CAbO,CAAR;EAcA,OAAOV,KAAK,CAAC,CAACI,KAAK,GAAGE,KAAT,EAAgBD,KAAK,GAAGC,KAAxB,CAAD,EAAiCH,OAAO,CAACM,UAAzC,EAAqDN,OAArD,CAAZ;AACH;;AACD,eAAeF,UAAf"},"metadata":{},"sourceType":"module"}