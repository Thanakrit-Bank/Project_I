[{"C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\App.js":"2","C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\components\\MainMap.jsx":"3","C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\components\\GridData.jsx":"4","C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\components\\Legend.jsx":"5","C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\data\\dataLegend.js":"6","C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\components\\Calend.jsx":"7"},{"size":263,"mtime":1663169726527,"results":"8","hashOfConfig":"9"},{"size":319,"mtime":1664210441292,"results":"10","hashOfConfig":"9"},{"size":5964,"mtime":1664210488022,"results":"11","hashOfConfig":"9"},{"size":2809,"mtime":1663171166733,"results":"12","hashOfConfig":"9"},{"size":2629,"mtime":1663171024811,"results":"13","hashOfConfig":"9"},{"size":114,"mtime":1663169726526,"results":"14","hashOfConfig":"9"},{"size":995,"mtime":1664210154073,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"pec3wj",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\index.js",[],[],[],"C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\App.js",[],[],"C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\components\\MainMap.jsx",[],[],"C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\components\\GridData.jsx",["40"],[],"import {GeoJSON, Popup, FeatureGroup} from 'react-leaflet' \r\nimport React, { useState,useEffect } from 'react'\r\nimport legendData from  './../data/dataLegend'  \r\n\r\nfunction GridData(props) {\r\n    // const [url, setUrl] = useState('http://127.0.0.1:5000/get_spei/Amnat Charoen&1902-02')\r\n    // const [url, seturl] = useState('http://127.0.0.1:5000/get_province/Chiang Mai')\r\n    // const [url, seturl] = useState('http://127.0.0.1:5000/get_grid')\r\n    const [data, setData] = useState([])\r\n    const url = 'http://127.0.0.1:5000/get_spei/'.concat(props.pName).concat('&1902-02')\r\n    const interval = (legendData.spei.max - legendData.spei.min)/8\r\n    const twoDegit = parseFloat(interval).toFixed(2)\r\n\r\n    useEffect(()=>{\r\n        setData([])\r\n        fetchData(url)\r\n        console.log(url);\r\n    },[props.pName])\r\n\r\n    function fetchData(url) {\r\n        const reqOptions ={\r\n          method:\"get\", \r\n          headers:{\"x-access-token\": \"test\"},\r\n        }\r\n        \r\n        let request = fetch(url, reqOptions);\r\n        console.log('feching');\r\n        request\r\n        .then(r => r.json())\r\n        .then(data => {\r\n            setData(data)\r\n        }, (error) => {\r\n            console.error(error);\r\n        });\r\n      }\r\n\r\n    return (\r\n    <FeatureGroup>\r\n    \r\n        {data.map(data => {\r\n        var myStyleGrid = {\r\n            color: \"white\",\r\n            weight: 0,\r\n            fillOpacity: 0.75,\r\n            fillColor: 'white',\r\n        }\r\n        if(data.properties.index < legendData.spei.min + twoDegit){\r\n            myStyleGrid.fillColor = '#FFEDA0'\r\n        }else if(data.properties.index < legendData.spei.min + 2*twoDegit){\r\n            myStyleGrid.fillColor = '#FED976'\r\n        }else if(data.properties.index < legendData.spei.min + 3*twoDegit){\r\n            myStyleGrid.fillColor = '#FEB24C'\r\n        }else if(data.properties.index < legendData.spei.min + 4*twoDegit){\r\n            myStyleGrid.fillColor = '#FD8D3C'\r\n        }else if(data.properties.index < legendData.spei.min + 5*twoDegit){\r\n            myStyleGrid.fillColor = '#FC4E2A'\r\n        }else if(data.properties.index < legendData.spei.min + 6*twoDegit){\r\n            myStyleGrid.fillColor = '#E31A1C'\r\n        }else if(data.properties.index < legendData.spei.min + 7*twoDegit){\r\n            myStyleGrid.fillColor = '#BD0026'\r\n        }else {\r\n            myStyleGrid.fillColor = '#800026'\r\n        }\r\n        \r\n        return (\r\n        <GeoJSON key={data.properties.grid_id}  data={data} style={myStyleGrid}>\r\n            {console.log(data)}\r\n            <Popup> {Math.round(data.properties.index*1000)/1000} </Popup>\r\n        </GeoJSON>)\r\n        })}\r\n\r\n        {console.log(props.pName)}\r\n        {console.log(url)}\r\n        {console.log('return')}\r\n\r\n    </FeatureGroup> \r\n  )\r\n}\r\n\r\nexport default GridData","C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\components\\Legend.jsx",["41"],[],"import { useMap } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { useEffect } from \"react\";\r\nimport legendData from  './../data/dataLegend'  \r\n\r\nconst Legend = () => {\r\n    const mapInstance = useMap();\r\n    const interval = (legendData.spei.max - legendData.spei.min)/8\r\n    const twoDegit = parseFloat(interval).toFixed(2)\r\n    useEffect(() => {\r\n    // get color depending on population density value\r\n    const getColor = d => {\r\n      return d > legendData.spei.min + 7*interval\r\n        ? \"#FFEDA0\"\r\n        : d > legendData.spei.min + 6*interval\r\n        ? \"#FED976\"\r\n        : d > legendData.spei.min + 5*interval\r\n        ? \"#FED976\"\r\n        : d > legendData.spei.min + 4*interval\r\n        ? \"#FEB24C\"\r\n        : d > legendData.spei.min + 3*interval\r\n        ? \"#FD8D3C\"\r\n        : d > legendData.spei.min + 2*interval\r\n        ? \"#FC4E2A\"\r\n        : d > legendData.spei.min + interval\r\n        ? \"#E31A1C\"\r\n        : d > legendData.spei.min\r\n        ? \"#BD0026\"\r\n        : \"#800026\"\r\n    };\r\n\r\n    const legend = L.control({ position: \"bottomright\" });\r\n\r\n    legend.onAdd = () => {\r\n      const div = L.DomUtil.create(\"div\", \"info legend\");\r\n      const grades = \r\n      [\r\n        // legendData.spei.min.toFixed(2),\r\n        // (legendData.spei.min + interval).toFixed(2), \r\n        // (legendData.spei.min + 2*interval).toFixed(2), \r\n        // (legendData.spei.min + 3*interval).toFixed(2), \r\n        // (legendData.spei.min + 4*interval).toFixed(2), \r\n        // (legendData.spei.min + 5*interval).toFixed(2), \r\n        // (legendData.spei.min + 6*interval).toFixed(2), \r\n        // (legendData.spei.min + 7*interval).toFixed(2)\r\n\r\n        (legendData.spei.min + 7*twoDegit).toFixed(2), \r\n        (legendData.spei.min + 6*twoDegit).toFixed(2), \r\n        (legendData.spei.min + 5*twoDegit).toFixed(2), \r\n        (legendData.spei.min + 4*twoDegit).toFixed(2), \r\n        (legendData.spei.min + 3*twoDegit).toFixed(2), \r\n        (legendData.spei.min + 2*twoDegit).toFixed(2), \r\n        (legendData.spei.min + 1*twoDegit).toFixed(2),\r\n        legendData.spei.min\r\n      ];\r\n\r\n      let labels = [];\r\n      let from;\r\n      let to;\r\n\r\n      for (let i = 0; i < grades.length; i++) {\r\n        from = grades[i];\r\n        to = grades[i + 1];\r\n\r\n        labels.push(\r\n          '<i style=\"background:' +\r\n            getColor(from + 1) +\r\n            '\"></i> ' +\r\n            from +\r\n            (to ? \" &ndash; \" + to : \"+\")\r\n        );\r\n      }\r\n\r\n      div.innerHTML = labels.join(\"<br>\");\r\n      return div;\r\n    };\r\n\r\n    legend.addTo(mapInstance);\r\n  } , []);\r\n  return null;\r\n};\r\n\r\nexport default Legend;\r\n","C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\data\\dataLegend.js",[],[],"C:\\Users\\Administrator\\Desktop\\Project_I\\project1\\src\\components\\Calend.jsx",[],[],{"ruleId":"42","severity":1,"message":"43","line":18,"column":7,"nodeType":"44","endLine":18,"endColumn":20,"suggestions":"45"},{"ruleId":"42","severity":1,"message":"46","line":79,"column":7,"nodeType":"44","endLine":79,"endColumn":9,"suggestions":"47"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.","ArrayExpression",["48"],"React Hook useEffect has missing dependencies: 'interval', 'mapInstance', and 'twoDegit'. Either include them or remove the dependency array.",["49"],{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},"Update the dependencies array to be: [props.pName, url]",{"range":"54","text":"55"},"Update the dependencies array to be: [interval, mapInstance, twoDegit]",{"range":"56","text":"57"},[803,816],"[props.pName, url]",[2577,2579],"[interval, mapInstance, twoDegit]"]