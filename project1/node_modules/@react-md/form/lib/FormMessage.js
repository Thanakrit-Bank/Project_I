"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormMessage = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("@react-md/utils");
var FormThemeProvider_1 = require("./FormThemeProvider");
var FormMessageCounter_1 = require("./FormMessageCounter");
var block = (0, utils_1.bem)("rmd-form-message");
/**
 * The `FormMessage` component is used to create additional helper messages or
 * error messages and generally placed below the related `TextField`. If a
 * `length` (of the `value`) and `maxLength` are provided, a counter will also
 * be displayed to the right of the `children`.
 *
 * This component can also be used to create form-level validation messages by
 * setting the `role` prop to `"alert"`.
 */
exports.FormMessage = (0, react_1.forwardRef)(function FormMessage(_a, ref) {
    var _b;
    var id = _a.id, role = _a.role, className = _a.className, counterStyle = _a.counterStyle, counterClassName = _a.counterClassName, messageStyle = _a.messageStyle, messageClassName = _a.messageClassName, _c = _a.error, error = _c === void 0 ? false : _c, _d = _a.disableWrap, disableWrap = _d === void 0 ? false : _d, propTheme = _a.theme, children = _a.children, length = _a.length, maxLength = _a.maxLength, props = __rest(_a, ["id", "role", "className", "counterStyle", "counterClassName", "messageStyle", "messageClassName", "error", "disableWrap", "theme", "children", "length", "maxLength"]);
    var theme = (0, FormThemeProvider_1.useFormTheme)({ theme: propTheme }).theme;
    var message = children;
    if (!disableWrap && children) {
        message = ((0, jsx_runtime_1.jsx)("p", __assign({ id: "".concat(id, "-message"), style: messageStyle, className: (0, classnames_1.default)(block("message"), messageClassName) }, { children: children })));
    }
    return ((0, jsx_runtime_1.jsxs)("div", __assign({}, props, { id: id, ref: ref, "aria-live": role !== "alert" ? "polite" : undefined, role: role, className: (0, classnames_1.default)(block((_b = {
                error: error
            },
            _b[theme] = theme !== "none",
            _b)), className) }, { children: [message, typeof length === "number" && typeof maxLength === "number" && ((0, jsx_runtime_1.jsx)(FormMessageCounter_1.FormMessageCounter, __assign({ id: "".concat(id, "-counter"), style: counterStyle, className: counterClassName }, { children: "".concat(length, " / ").concat(maxLength) })))] })));
});
//# sourceMappingURL=FormMessage.js.map