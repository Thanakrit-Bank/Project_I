"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItemInputToggle = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var icon_1 = require("@react-md/icon");
var list_1 = require("@react-md/list");
var utils_1 = require("@react-md/utils");
var InputToggleIcon_1 = require("../toggle/InputToggleIcon");
var SwitchTrack_1 = require("../toggle/SwitchTrack");
var styles = (0, utils_1.bem)("rmd-input-toggle-menu-item");
/**
 * This is a low-level component that should probably not be used externally and
 * instead the `MenuItemCheckbox`, `MenuItemRadio`, or `MenuItemSwitch` should
 * be used instead.
 *
 * @see {@link MenuItemCheckbox} for checkbox examples
 * @see {@link MenuItemRadio} for radio examples
 * @see {@link MenuItemSwitch} for switch examples
 * @remarks \@since 2.8.0
 */
exports.MenuItemInputToggle = (0, react_1.forwardRef)(function MenuItemInputToggle(_a, nodeRef) {
    var children = _a.children, _b = _a.tabIndex, tabIndex = _b === void 0 ? -1 : _b, checked = _a.checked, type = _a.type, propIcon = _a.icon, _c = _a.iconAfter, iconAfter = _c === void 0 ? false : _c, addon = _a.addon, addonType = _a.addonType, addonPosition = _a.addonPosition, onClick = _a.onClick, onCheckedChange = _a.onCheckedChange, _d = _a.disabled, disabled = _d === void 0 ? false : _d, className = _a.className, _e = _a.indeterminate, indeterminate = _e === void 0 ? false : _e, props = __rest(_a, ["children", "tabIndex", "checked", "type", "icon", "iconAfter", "addon", "addonType", "addonPosition", "onClick", "onCheckedChange", "disabled", "className", "indeterminate"]);
    var ref = (0, utils_1.useKeyboardFocusableElement)(nodeRef);
    var icon = (0, icon_1.useIcon)(type === "radio" ? "radio" : "checkbox", propIcon);
    if (type === "switch" && typeof propIcon === "undefined") {
        icon = (0, jsx_runtime_1.jsx)(SwitchTrack_1.SwitchTrack, { checked: checked });
    }
    else if (icon && type !== "switch") {
        icon = ((0, jsx_runtime_1.jsx)("span", __assign({ className: (0, classnames_1.default)("rmd-toggle", styles("toggle")) }, { children: (0, jsx_runtime_1.jsx)(InputToggleIcon_1.InputToggleIcon, __assign({ circle: type === "radio", disabled: disabled, overlay: true, checked: checked, indeterminate: indeterminate }, { children: icon })) })));
    }
    var leftAddon;
    var leftAddonType;
    var leftAddonPosition;
    var rightAddon;
    var rightAddonType;
    var rightAddonPosition;
    if (iconAfter) {
        leftAddon = addon;
        leftAddonType = addonType;
        leftAddonPosition = addonPosition;
        rightAddon = icon;
    }
    else {
        leftAddon = icon;
        rightAddon = addon;
        rightAddonType = addonType;
        rightAddonPosition = addonPosition;
    }
    return ((0, jsx_runtime_1.jsx)(list_1.ListItem, __assign({}, props, { disableRipple: true, "aria-disabled": disabled || undefined, "aria-checked": checked, role: type === "radio" ? "menuitemradio" : "menuitemcheckbox", onClick: function (event) {
            onClick === null || onClick === void 0 ? void 0 : onClick(event);
            onCheckedChange(!checked, event);
        }, ref: ref, className: (0, classnames_1.default)(styles({ switch: type === "switch" }), className), tabIndex: tabIndex, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition }, { children: children })));
});
//# sourceMappingURL=MenuItemInputToggle.js.map