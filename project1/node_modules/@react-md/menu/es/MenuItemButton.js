var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { IconRotator, useIcon } from "@react-md/icon";
import { useMenuBarContext } from "./MenuBarProvider";
import { useMenuBarWidgetFocusId } from "./MenuBarWidget";
import { MenuItem } from "./MenuItem";
/**
 * This is just an internal component that handles rendering a submenu as a
 * menuitem for a `DropdownMenu` with a conditional dropdown icon.
 *
 * @internal
 * @remarks \@since 5.0.0
 */
export var MenuItemButton = forwardRef(function MenuItemButton(_a, ref) {
    var id = _a.id, children = _a.children, propRightAddon = _a.rightAddon, _b = _a.disableDropdownIcon, disableDropdownIcon = _b === void 0 ? typeof propRightAddon !== "undefined" : _b, visible = _a.visible, tabIndex = _a.tabIndex, iconRotatorProps = _a.iconRotatorProps, props = __rest(_a, ["id", "children", "rightAddon", "disableDropdownIcon", "visible", "tabIndex", "iconRotatorProps"]);
    var root = useMenuBarContext().root;
    var focusId = useMenuBarWidgetFocusId();
    var dropdownIcon = useIcon(root ? "dropdown" : "forward");
    var rightAddon = propRightAddon;
    if (!disableDropdownIcon) {
        rightAddon = (_jsx(IconRotator, __assign({}, iconRotatorProps, { rotated: visible }, { children: dropdownIcon })));
    }
    return (_jsx(MenuItem, __assign({}, props, { id: id, ref: ref, rightAddon: rightAddon, tabIndex: tabIndex !== null && tabIndex !== void 0 ? tabIndex : (root && id === focusId ? 0 : -1) }, { children: children })));
});
//# sourceMappingURL=MenuItemButton.js.map