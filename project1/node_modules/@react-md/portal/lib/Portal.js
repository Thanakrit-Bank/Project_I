"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Portal = void 0;
var react_1 = require("react");
var react_dom_1 = require("react-dom");
var getContainer_1 = require("./getContainer");
/**
 * This component is a simple wrapper for the `createPortal` API from ReactDOM
 * that will just ensure that `null` is always returned for server side
 * rendering as well as a "nice" way to choose specific portal targets or just
 * falling back to the `document.body`.
 */
function Portal(_a) {
    var into = _a.into, intoId = _a.intoId, children = _a.children;
    var _b = __read((0, react_1.useState)(null), 2), container = _b[0], setContainer = _b[1];
    // setting the container via useEffect instead of immediately in the render
    // just so that it doesn't throw an error immediately if the dom hasn't fully
    // painted after a SSR
    (0, react_1.useEffect)(function () {
        var nextContainer = (0, getContainer_1.getContainer)(into, intoId);
        if (container !== nextContainer) {
            setContainer(nextContainer);
        }
    }, [into, intoId, container]);
    if (!container) {
        return null;
    }
    return (0, react_dom_1.createPortal)(children, container);
}
exports.Portal = Portal;
//# sourceMappingURL=Portal.js.map