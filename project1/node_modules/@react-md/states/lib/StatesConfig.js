"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatesConfig = exports.useStatesConfigContext = exports.StatesConfigContext = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var constants_1 = require("./ripples/constants");
exports.StatesConfigContext = (0, react_1.createContext)({
    rippleTimeout: constants_1.DEFAULT_RIPPLE_TIMEOUT,
    rippleClassNames: constants_1.DEFAULT_RIPPLE_CLASSNAMES,
    disableRipple: false,
    disableProgrammaticRipple: false,
});
/**
 * A simple hook that can be used to get the Ripple context. This is used behind
 * the scenes for the Ripple component and _probably_ shouldn't be used anywhere
 * else. It's mostly used to just use the context defaults when the timeout or
 * classNames are undefined.
 */
function useStatesConfigContext() {
    return (0, react_1.useContext)(exports.StatesConfigContext);
}
exports.useStatesConfigContext = useStatesConfigContext;
/**
 * The `StatesConfig` component is a top-level context provider for the states
 * context configuration. It'll keep track of:
 *
 * - the current interaction mode of your user
 * - configuration for ripple effects
 * - disabling or enabling the ripple effects
 * - disabling or enabling the fix for color pollution
 */
function StatesConfig(_a) {
    var _b = _a.rippleTimeout, rippleTimeout = _b === void 0 ? constants_1.DEFAULT_RIPPLE_TIMEOUT : _b, _c = _a.rippleClassNames, rippleClassNames = _c === void 0 ? constants_1.DEFAULT_RIPPLE_CLASSNAMES : _c, _d = _a.disableRipple, disableRipple = _d === void 0 ? false : _d, _e = _a.disableProgrammaticRipple, disableProgrammaticRipple = _e === void 0 ? false : _e, children = _a.children;
    var value = (0, react_1.useMemo)(function () { return ({
        rippleTimeout: rippleTimeout,
        rippleClassNames: rippleClassNames,
        disableRipple: disableRipple,
        disableProgrammaticRipple: disableProgrammaticRipple,
    }); }, [rippleTimeout, rippleClassNames, disableRipple, disableProgrammaticRipple]);
    return ((0, jsx_runtime_1.jsx)(exports.StatesConfigContext.Provider, __assign({ value: value }, { children: children })));
}
exports.StatesConfig = StatesConfig;
//# sourceMappingURL=StatesConfig.js.map