var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { useCallback, useState } from "react";
/**
 * A hook that implements the base functionality for selecting different tree
 * items.
 *
 * @param defaultSelectedIds - The default list of tree item ids that should be
 * expanded by default
 * @param multiSelect - Boolean if the tree can have multiple items selected or
 * not.
 * @returns an object containing props that can be passed to the `Tree`
 * component to handle the selection state within the tree
 */
export function useTreeItemSelection(defaultSelectedIds, multiSelect) {
    if (multiSelect === void 0) { multiSelect = false; }
    var _a = __read(useState(defaultSelectedIds), 2), selectedIds = _a[0], setSelectedIds = _a[1];
    var onItemSelect = useCallback(function (itemId) {
        setSelectedIds(function (selectedIds) {
            if (!multiSelect) {
                if (selectedIds[0] === itemId && selectedIds.length === 1) {
                    return selectedIds;
                }
                return [itemId];
            }
            var i = selectedIds.indexOf(itemId);
            var nextSelectedIds = selectedIds.slice();
            if (i === -1) {
                nextSelectedIds.push(itemId);
            }
            else {
                nextSelectedIds.splice(i, 1);
            }
            return nextSelectedIds;
        });
    }, [multiSelect]);
    var onMultiItemSelect = useCallback(function (itemIds) {
        setSelectedIds(itemIds);
    }, []);
    return {
        selectedIds: selectedIds,
        multiSelect: multiSelect,
        onItemSelect: onItemSelect,
        onMultiItemSelect: onMultiItemSelect,
    };
}
//# sourceMappingURL=useTreeItemSelection.js.map