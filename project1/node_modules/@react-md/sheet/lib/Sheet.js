"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sheet = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var dialog_1 = require("@react-md/dialog");
var utils_1 = require("@react-md/utils");
var constants_1 = require("./constants");
var block = (0, utils_1.bem)("rmd-sheet");
/**
 * The Sheet component is an extension of the `Dialog` except that it is fixed
 * to the edges of the viewport instead of centered or full page. This component
 * is great for rendering a navigation tree or menus on mobile devices.
 */
exports.Sheet = (0, react_1.forwardRef)(function Sheet(_a, ref) {
    var _b;
    var className = _a.className, children = _a.children, visible = _a.visible, _c = _a.position, position = _c === void 0 ? "left" : _c, _d = _a.horizontalSize, horizontalSize = _d === void 0 ? "media" : _d, _e = _a.verticalSize, verticalSize = _e === void 0 ? "recommended" : _e, _f = _a.overlay, propOverlay = _f === void 0 ? true : _f, overlayClassName = _a.overlayClassName, _g = _a.role, role = _g === void 0 ? "dialog" : _g, _h = _a.component, component = _h === void 0 ? "div" : _h, _j = _a.tabIndex, tabIndex = _j === void 0 ? -1 : _j, _k = _a.appear, appear = _k === void 0 ? false : _k, _l = _a.enter, enter = _l === void 0 ? true : _l, _m = _a.exit, exit = _m === void 0 ? true : _m, onExited = _a.onExited, propHidden = _a.hidden, _o = _a.timeout, timeout = _o === void 0 ? constants_1.DEFAULT_SHEET_TIMEOUT : _o, _p = _a.classNames, classNames = _p === void 0 ? constants_1.DEFAULT_SHEET_CLASSNAMES : _p, _q = _a.disableTransition, disableTransition = _q === void 0 ? false : _q, _r = _a.temporary, temporary = _r === void 0 ? true : _r, _s = _a.portal, portal = _s === void 0 ? true : _s, _t = _a.overlayHidden, overlayHidden = _t === void 0 ? false : _t, _u = _a.defaultFocus, defaultFocus = _u === void 0 ? "first" : _u, _v = _a.disableScrollLock, disableScrollLock = _v === void 0 ? false : _v, _w = _a.disableEscapeClose, disableEscapeClose = _w === void 0 ? false : _w, _x = _a.disableFocusContainer, disableFocusContainer = _x === void 0 ? false : _x, _y = _a.disableNestedDialogFixes, disableNestedDialogFixes = _y === void 0 ? false : _y, props = __rest(_a, ["className", "children", "visible", "position", "horizontalSize", "verticalSize", "overlay", "overlayClassName", "role", "component", "tabIndex", "appear", "enter", "exit", "onExited", "hidden", "timeout", "classNames", "disableTransition", "temporary", "portal", "overlayHidden", "defaultFocus", "disableScrollLock", "disableEscapeClose", "disableFocusContainer", "disableNestedDialogFixes"]);
    var horizontal = position === "left" || position === "right";
    var overlay = role !== "none" && propOverlay;
    // if the sheet mounts while not visible and the conditional mounting isn't
    // enabled, need to default to the offscreen state which is normally handled
    // by the CSSTransition's exit state.
    var offscreen = (0, react_1.useRef)(!visible && !temporary);
    if (offscreen.current && visible) {
        offscreen.current = false;
    }
    // when sheets are not unmounted on exit, need to set it to hidden so that
    // tabbing no longer focuses any of the elements inside
    var _z = __read((0, react_1.useState)(!visible && !temporary), 2), hidden = _z[0], setHidden = _z[1];
    (0, react_1.useEffect)(function () {
        if (hidden && visible) {
            setHidden(false);
        }
    }, [hidden, visible]);
    return ((0, jsx_runtime_1.jsx)(dialog_1.Dialog, __assign({}, props, { ref: ref, type: "custom", role: role, visible: visible, className: (0, classnames_1.default)(block((_b = {
                horizontal: horizontal,
                vertical: !horizontal,
                raised: overlay,
                offscreen: offscreen.current
            },
            _b[position] = true,
            _b["".concat(horizontalSize, "-width")] = horizontal,
            _b["viewport-height"] = !horizontal && verticalSize === "none",
            _b["touchable-height"] = !horizontal && verticalSize === "touch",
            _b["recommended-height"] = !horizontal && verticalSize === "recommended",
            _b)), className), hidden: propHidden !== null && propHidden !== void 0 ? propHidden : hidden, overlay: overlay, overlayClassName: (0, classnames_1.default)("rmd-sheet-overlay", overlayClassName), component: component, tabIndex: tabIndex, appear: appear, enter: enter, exit: exit, timeout: timeout, classNames: classNames, disableTransition: disableTransition, temporary: temporary, onExited: function () {
            onExited === null || onExited === void 0 ? void 0 : onExited();
            setHidden(!temporary);
        }, portal: portal, overlayHidden: overlayHidden, defaultFocus: defaultFocus, disableScrollLock: disableScrollLock, disableEscapeClose: disableEscapeClose, disableFocusContainer: disableFocusContainer, disableNestedDialogFixes: disableNestedDialogFixes }, { children: children })));
});
//# sourceMappingURL=Sheet.js.map