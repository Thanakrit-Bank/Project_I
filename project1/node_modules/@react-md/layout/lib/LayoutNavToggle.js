"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutNavToggle = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var app_bar_1 = require("@react-md/app-bar");
var icon_1 = require("@react-md/icon");
var sheet_1 = require("@react-md/sheet");
var transition_1 = require("@react-md/transition");
var constants_1 = require("./constants");
var LayoutProvider_1 = require("./LayoutProvider");
var utils_1 = require("./utils");
/**
 * This is the default implementation for the navigation toggle button within
 * the `Layout` component and should normally be the first child for the
 * `LayoutAppBar`. In addition, this component will automatically update itself
 * to provide an accessible `aria-label` for screen readers and change to a
 * toggle button for toggleable layouts.
 */
exports.LayoutNavToggle = (0, react_1.forwardRef)(function LayoutNavToggle(_a, nodeRef) {
    var propAriaLabel = _a["aria-label"], propAriaPressed = _a["aria-pressed"], propChildren = _a.children, className = _a.className, _b = _a.buttonType, buttonType = _b === void 0 ? "icon" : _b, onClick = _a.onClick, propOffset = _a.offset, rendered = _a.rendered, propTabIndex = _a.tabIndex, _c = _a.timeout, timeout = _c === void 0 ? sheet_1.DEFAULT_SHEET_TIMEOUT : _c, _d = _a.classNames, classNames = _d === void 0 ? constants_1.DEFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES : _d, props = __rest(_a, ["aria-label", "aria-pressed", "children", "className", "buttonType", "onClick", "offset", "rendered", "tabIndex", "timeout", "classNames"]);
    var icon = (0, icon_1.useIcon)("menu");
    var _e = (0, LayoutProvider_1.useLayoutConfig)(), baseId = _e.baseId, layout = _e.layout, showNav = _e.showNav, hideNav = _e.hideNav, visible = _e.visible;
    var isToggleable = (0, utils_1.isToggleableLayout)(layout);
    var isTemporary = (0, utils_1.isTemporaryLayout)(layout);
    var isRendered = rendered;
    if (typeof isRendered === "undefined") {
        isRendered = isTemporary || isToggleable;
    }
    var offset = propOffset;
    if (typeof offset === "undefined") {
        offset = isToggleable && visible;
    }
    var elementProps = (0, transition_1.useCSSTransition)({
        nodeRef: nodeRef,
        transitionIn: offset,
        temporary: false,
        timeout: timeout,
        classNames: classNames,
        className: (0, classnames_1.default)("rmd-layout-nav-toggle", className),
    }).elementProps;
    if (!isRendered) {
        return null;
    }
    var children = propChildren;
    if (buttonType === "icon" && typeof children === "undefined") {
        children = icon;
    }
    var tabIndex = propTabIndex;
    if (typeof tabIndex === "undefined" && visible && isToggleable) {
        // set to -1 so it isn't tab focusable but is still programmatically
        // focusable for temporary navigation drawers to re-focus once closed
        tabIndex = -1;
    }
    var ariaPressed = propAriaPressed;
    if (typeof ariaPressed === "undefined" && isToggleable) {
        ariaPressed = visible;
    }
    var ariaLabel = propAriaLabel;
    if (typeof ariaLabel === "undefined" &&
        typeof props["aria-labelledby"] === "undefined") {
        ariaLabel = isToggleable ? "Navigation" : "Show Navigation";
    }
    return ((0, jsx_runtime_1.jsx)(app_bar_1.AppBarNav, __assign({ id: "".concat(baseId, "-nav-toggle") }, props, elementProps, { "aria-label": ariaLabel, "aria-pressed": ariaPressed, onClick: function (event) {
            if (onClick) {
                onClick(event);
            }
            if (!visible) {
                showNav();
            }
            else {
                hideNav();
            }
        }, buttonType: buttonType, tabIndex: tabIndex }, { children: children })));
});
//# sourceMappingURL=LayoutNavToggle.js.map