"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutAppBarTitle = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var app_bar_1 = require("@react-md/app-bar");
var utils_1 = require("@react-md/utils");
var LayoutProvider_1 = require("./LayoutProvider");
var utils_2 = require("./utils");
var styles = (0, utils_1.bem)("rmd-layout-title");
/**
 * An extremely simple wrapper for the `AppBarTitle` that will automatically
 * apply an `id` and apply the correct margin for full-height layouts.
 */
exports.LayoutAppBarTitle = (0, react_1.forwardRef)(function LayoutAppBarTitle(_a, ref) {
    var propId = _a.id, className = _a.className, children = _a.children, props = __rest(_a, ["id", "className", "children"]);
    var _b = (0, LayoutProvider_1.useLayoutConfig)(), baseId = _b.baseId, layout = _b.layout;
    var id = propId !== null && propId !== void 0 ? propId : "".concat(baseId, "-title");
    return ((0, jsx_runtime_1.jsx)(app_bar_1.AppBarTitle, __assign({}, props, { id: id, ref: ref, className: (0, classnames_1.default)(styles({ offset: (0, utils_2.isFullHeightLayout)(layout) }), className) }, { children: children })));
});
//# sourceMappingURL=LayoutAppBarTitle.js.map