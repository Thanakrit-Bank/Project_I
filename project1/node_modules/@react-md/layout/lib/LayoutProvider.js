"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutProvider = exports.useLayoutConfig = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var utils_1 = require("@react-md/utils");
var constants_1 = require("./constants");
var utils_2 = require("./utils");
/**
 * @internal
 */
var notInitialized = function (name) { return function () {
    /* istanbul ignore next */
    if (process.env.NODE_ENV !== "production") {
        /* eslint-disable no-console */
        console.warn("Uh oh, something went wrong. Somehow the `LayoutNavigationConfiguration` context has not been initialized. " +
            "This caused the \"".concat(name, "\" callback to do nothing."));
    }
}; };
var context = (0, react_1.createContext)({
    baseId: "layout",
    layout: "temporary",
    visible: false,
    showNav: notInitialized("showNav"),
    hideNav: notInitialized("hideNav"),
    fixedAppBar: true,
    isMiniable: false,
});
/**
 * Gets the current layout state and configuration.
 */
function useLayoutConfig() {
    return (0, react_1.useContext)(context);
}
exports.useLayoutConfig = useLayoutConfig;
var Provider = context.Provider;
/**
 * @remarks \@since 2.6.0
 * @internal
 */
function isToggleableVisible(behavior, layout) {
    return typeof behavior === "string"
        ? behavior === layout
        : behavior && (0, utils_2.isToggleableLayout)(layout);
}
/**
 * Determines the current layout based on the `LayoutConfiguration` and hooks
 * into the `AppSizeListener` to update on resize. This also initializes the
 * `LayLayoutContext` so that a custom layout implementation can be used along
 * with the `useLayoutConfig()` hook and the multiple `Layout` components.
 */
function LayoutProvider(_a) {
    var baseId = _a.baseId, _b = _a.phoneLayout, phoneLayout = _b === void 0 ? constants_1.DEFAULT_PHONE_LAYOUT : _b, _c = _a.tabletLayout, tabletLayout = _c === void 0 ? constants_1.DEFAULT_TABLET_LAYOUT : _c, _d = _a.landscapeTabletLayout, landscapeTabletLayout = _d === void 0 ? constants_1.DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d, _e = _a.desktopLayout, desktopLayout = _e === void 0 ? constants_1.DEFAULT_DESKTOP_LAYOUT : _e, largeDesktopLayout = _a.largeDesktopLayout, _f = _a.defaultToggleableVisible, defaultToggleableVisible = _f === void 0 ? false : _f, _g = _a.fixedAppBar, fixedAppBar = _g === void 0 ? true : _g, children = _a.children;
    var appSize = (0, utils_1.useAppSize)();
    var layout = (0, utils_2.getLayoutType)({
        appSize: appSize,
        phoneLayout: phoneLayout,
        tabletLayout: tabletLayout,
        landscapeTabletLayout: landscapeTabletLayout,
        desktopLayout: desktopLayout,
        largeDesktopLayout: largeDesktopLayout,
    });
    var isMiniable = [
        phoneLayout,
        tabletLayout,
        landscapeTabletLayout,
        desktopLayout,
        largeDesktopLayout,
    ].some(function (layout) { return !!layout && (0, utils_2.isMiniLayout)(layout); });
    var isDesktop = appSize.isDesktop;
    var _h = __read((0, react_1.useState)(((0, utils_2.isPersistentLayout)(layout) && isDesktop) ||
        isToggleableVisible(defaultToggleableVisible, layout)), 2), visible = _h[0], setVisible = _h[1];
    (0, react_1.useEffect)(function () {
        setVisible((0, utils_2.isPersistentLayout)(layout) ||
            isToggleableVisible(defaultToggleableVisible, layout));
    }, [defaultToggleableVisible, layout]);
    var showNav = (0, react_1.useCallback)(function () {
        setVisible(true);
    }, []);
    var hideNav = (0, react_1.useCallback)(function () {
        if (!(0, utils_2.isPersistentLayout)(layout)) {
            setVisible(false);
        }
    }, [layout]);
    var value = (0, react_1.useMemo)(function () { return ({
        baseId: baseId,
        layout: layout,
        visible: visible,
        showNav: showNav,
        hideNav: hideNav,
        fixedAppBar: fixedAppBar,
        isMiniable: isMiniable,
    }); }, [baseId, layout, visible, showNav, hideNav, fixedAppBar, isMiniable]);
    return (0, jsx_runtime_1.jsx)(Provider, __assign({ value: value }, { children: children }));
}
exports.LayoutProvider = LayoutProvider;
//# sourceMappingURL=LayoutProvider.js.map