"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutNavigation = void 0;
var react_1 = require("react");
var jsx_runtime_1 = require("react/jsx-runtime");
var react_2 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var sheet_1 = require("@react-md/sheet");
var utils_1 = require("@react-md/utils");
var LayoutNavigationHeader_1 = require("./LayoutNavigationHeader");
var LayoutProvider_1 = require("./LayoutProvider");
var LayoutTree_1 = require("./LayoutTree");
var utils_2 = require("./utils");
var defaultMiniNavigationItemRenderer_1 = require("./defaultMiniNavigationItemRenderer");
var styles = (0, utils_1.bem)("rmd-layout-navigation");
/**
 * The container for the main navigation within the `Layout` that renders
 * differently depending on the current layout type.
 */
exports.LayoutNavigation = (0, react_2.forwardRef)(function LayoutNavigation(_a, ref) {
    var propId = _a.id, _b = _a["aria-label"], ariaLabel = _b === void 0 ? "Navigation" : _b, ariaLabelledby = _a["aria-labelledby"], className = _a.className, children = _a.children, _c = _a.mini, mini = _c === void 0 ? false : _c, propHeader = _a.header, headerProps = _a.headerProps, headerTitle = _a.headerTitle, headerTitleProps = _a.headerTitleProps, closeNav = _a.closeNav, closeNavProps = _a.closeNavProps, treeProps = _a.treeProps, _d = _a.sticky, sticky = _d === void 0 ? false : _d, _e = _a.miniNavItemRenderer, miniNavItemRenderer = _e === void 0 ? defaultMiniNavigationItemRenderer_1.defaultMiniNavigationItemRenderer : _e, props = __rest(_a, ["id", "aria-label", "aria-labelledby", "className", "children", "mini", "header", "headerProps", "headerTitle", "headerTitleProps", "closeNav", "closeNavProps", "treeProps", "sticky", "miniNavItemRenderer"]);
    var _f = (0, LayoutProvider_1.useLayoutConfig)(), baseId = _f.baseId, layout = _f.layout, isNonMiniVisible = _f.visible, hideNav = _f.hideNav;
    var visible = mini || isNonMiniVisible;
    var id = propId || "".concat(baseId, "-").concat(mini ? "mini-" : "", "nav-container");
    var isTemporary = !mini && (0, utils_2.isTemporaryLayout)(layout);
    var isPersistent = mini || (0, utils_2.isPersistentLayout)(layout);
    var isToggleable = !mini && (0, utils_2.isToggleableLayout)(layout);
    var floating = layout === "floating";
    var header = propHeader;
    if (!mini && typeof header === "undefined") {
        header = ((0, jsx_runtime_1.jsx)(LayoutNavigationHeader_1.LayoutNavigationHeader, __assign({ closeNav: closeNav, closeNavProps: closeNavProps, title: headerTitle, titleProps: headerTitleProps }, headerProps)));
    }
    return ((0, react_1.createElement)(sheet_1.Sheet, __assign({}, props, { key: layout, id: id, ref: ref, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, role: !isPersistent ? "dialog" : "none", visible: visible, onRequestClose: hideNav, 
        // do not want to portal for the other types so that logical tab order
        // is preserved
        portal: isTemporary, overlay: isTemporary, disableScrollLock: !isTemporary, disableTabFocusWrap: isToggleable, disableNestedDialogFixes: mini, className: (0, classnames_1.default)(styles({
            mini: mini,
            sticky: sticky,
            floating: floating,
            "header-offset": layout === "clipped" || floating,
        }), className) }),
        header,
        treeProps && ((0, jsx_runtime_1.jsx)(LayoutTree_1.LayoutTree, __assign({ miniItemRenderer: miniNavItemRenderer, sticky: mini && sticky }, treeProps, { mini: mini }))),
        children));
});
//# sourceMappingURL=LayoutNavigation.js.map