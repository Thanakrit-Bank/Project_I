var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Divider } from "@react-md/divider";
import { ListSubheader } from "@react-md/list";
import { defaultTreeItemRenderer } from "@react-md/tree";
/**
 * This is the default navigation item renderer provided by the layout package
 * that has some reasonable defaults for creating a navigation tree. This is
 * just an extension of the base `defaultTreeItemRenderer` from the
 * `@react-md/tree` package that adds in some support for also rendering
 * dividers and subheader elements.
 */
export var defaultNavigationItemRenderer = function (itemProps, item, treeProps) {
    var key = itemProps.key;
    var divider = item.divider, subheader = item.subheader;
    if (divider) {
        return _jsx(Divider, {}, key);
    }
    if (subheader) {
        return (_jsx(ListSubheader, __assign({ role: "none" }, { children: item.children }), key));
    }
    return defaultTreeItemRenderer(itemProps, item, treeProps);
};
//# sourceMappingURL=defaultNavigationItemRenderer.js.map