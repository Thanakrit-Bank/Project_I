var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef, useEffect, useRef } from "react";
import cn from "classnames";
import { Tree } from "@react-md/tree";
import { bem } from "@react-md/utils";
import { defaultMiniNavigationItemRenderer } from "./defaultMiniNavigationItemRenderer";
import { defaultNavigationItemRenderer } from "./defaultNavigationItemRenderer";
import { useLayoutConfig } from "./LayoutProvider";
import { isTemporaryLayout } from "./utils";
var styles = bem("rmd-layout-nav");
/**
 * Renders the navigation tree for the Layout component that adds some
 * reasonable defaults to work with navigation items.
 */
export var LayoutTree = forwardRef(function LayoutTree(_a, ref) {
    var propId = _a.id, ariaLabelledBy = _a["aria-labelledby"], _b = _a["aria-label"], ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : "Navigation" : _b, className = _a.className, _c = _a.mini, mini = _c === void 0 ? false : _c, _d = _a.sticky, sticky = _d === void 0 ? false : _d, navStyle = _a.navStyle, navClassName = _a.navClassName, navItems = _a.navItems, _e = _a.labelKey, labelKey = _e === void 0 ? "children" : _e, _f = _a.valueKey, valueKey = _f === void 0 ? "children" : _f, _g = _a.itemRenderer, itemRenderer = _g === void 0 ? defaultNavigationItemRenderer : _g, _h = _a.miniItemRenderer, miniItemRenderer = _h === void 0 ? defaultMiniNavigationItemRenderer : _h, selectedIds = _a.selectedIds, _j = _a.disableTemporaryAutoclose, disableTemporaryAutoclose = _j === void 0 ? false : _j, props = __rest(_a, ["id", "aria-labelledby", "aria-label", "className", "mini", "sticky", "navStyle", "navClassName", "navItems", "labelKey", "valueKey", "itemRenderer", "miniItemRenderer", "selectedIds", "disableTemporaryAutoclose"]);
    var _k = useLayoutConfig(), baseId = _k.baseId, layout = _k.layout, hideNav = _k.hideNav, visible = _k.visible;
    var _l = __read(selectedIds, 1), selectedId = _l[0];
    var lastSelectedId = useRef(selectedId);
    var isTemporary = isTemporaryLayout(layout);
    var id = propId !== null && propId !== void 0 ? propId : "".concat(baseId, "-navigation-tree");
    useEffect(function () {
        if (disableTemporaryAutoclose ||
            !isTemporary ||
            !visible ||
            lastSelectedId.current === selectedId) {
            // need to update the lastSelectedId since the selectedId might've changed
            // by a route change OUTSIDE of the navigation drawer. if it isn't
            // updated, it'll automatically close the next time it is opened.
            lastSelectedId.current = selectedId;
            return;
        }
        lastSelectedId.current = selectedId;
        hideNav();
    }, [disableTemporaryAutoclose, isTemporary, visible, hideNav, selectedId]);
    return (_jsx("nav", __assign({ id: "".concat(id, "-nav"), style: navStyle, className: cn(styles({ sticky: sticky, grow: !sticky }), navClassName) }, { children: _jsx(Tree, __assign({}, props, { id: id, ref: ref, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, data: navItems, labelKey: labelKey, valueKey: valueKey, selectedIds: selectedIds, itemRenderer: mini ? miniItemRenderer : itemRenderer, className: cn("rmd-layout-tree", className) })) })));
});
//# sourceMappingURL=LayoutTree.js.map