"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useNestedDialogContext = exports.NestedDialogContextProvider = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var noop = function () {
    // do nothing
};
var context = (0, react_1.createContext)({
    stack: [],
    add: noop,
    remove: noop,
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    context.displayName = "NestedDialogContext";
}
var Provider = context.Provider;
/**
 * This component is used to help with handling nested dialogs by:
 * - preventing all dialogs to be closed when the escape key is pressed
 * - hiding the overlays for dialogs that are not the top-most focus
 *
 * This should be added to the root of your app if you would like to enable this
 * feature.
 */
function NestedDialogContextProvider(_a) {
    var children = _a.children;
    var _b = __read((0, react_1.useState)([]), 2), stack = _b[0], setStack = _b[1];
    var add = (0, react_1.useCallback)(function (dialogId) {
        setStack(function (prevStack) {
            /* istanbul ignore next */
            if (process.env.NODE_ENV !== "production" &&
                prevStack.includes(dialogId)) {
                /* eslint-disable no-console */
                console.warn("Tried to add a duplicate dialog id to the `NestedDialogContext`.");
                console.warn("This means that you have two dialogs with the same id: `".concat(dialogId, "`."));
                console.warn("This should be fixed before moving to production since this will break accessibility and is technically invalid.");
            }
            return prevStack.concat(dialogId);
        });
    }, []);
    var remove = (0, react_1.useCallback)(function (dialogId) {
        setStack(function (prevStack) { return prevStack.filter(function (id) { return id !== dialogId; }); });
    }, []);
    var value = (0, react_1.useMemo)(function () { return ({ stack: stack, add: add, remove: remove }); }, [add, remove, stack]);
    return (0, jsx_runtime_1.jsx)(Provider, __assign({ value: value }, { children: children }));
}
exports.NestedDialogContextProvider = NestedDialogContextProvider;
/**
 * Gets the current nested dialog context. This shouldn't really be used
 * externally and is a private context hook.
 *
 * @internal
 */
function useNestedDialogContext() {
    return (0, react_1.useContext)(context);
}
exports.useNestedDialogContext = useNestedDialogContext;
//# sourceMappingURL=NestedDialogContext.js.map