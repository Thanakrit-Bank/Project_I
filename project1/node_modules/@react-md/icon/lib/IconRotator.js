"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconRotator = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("@react-md/utils");
var block = (0, utils_1.bem)("rmd-icon-rotator");
/**
 * The `IconRotator` is a simple component that is used to rotate an icon from a
 * one degrees to another.
 */
exports.IconRotator = (0, react_1.forwardRef)(function IconRotator(_a, ref) {
    var style = _a.style, propClassName = _a.className, _b = _a.animate, animate = _b === void 0 ? true : _b, rotated = _a.rotated, children = _a.children, _c = _a.forceIconWrap, forceIconWrap = _c === void 0 ? false : _c, props = __rest(_a, ["style", "className", "animate", "rotated", "children", "forceIconWrap"]);
    var className = (0, classnames_1.default)(block({ animate: animate, rotated: rotated }), propClassName);
    if (!forceIconWrap && (0, react_1.isValidElement)(children)) {
        var child = react_1.Children.only(children);
        return (0, react_1.cloneElement)(child, {
            className: (0, classnames_1.default)(className, child.props.className),
        });
    }
    return ((0, jsx_runtime_1.jsx)("span", __assign({}, props, { style: style, className: className, ref: ref }, { children: children })));
});
//# sourceMappingURL=IconRotator.js.map