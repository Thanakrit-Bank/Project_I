var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from "react";
import cn from "classnames";
import { Card, CardContent } from "@react-md/card";
import { useCollapseTransition } from "@react-md/transition";
import { bem } from "@react-md/utils";
import { ExpansionPanelHeader } from "./ExpansionPanelHeader";
var block = bem("rmd-expansion-panel");
/**
 * The expansion panel renders a header element (that is just a button) and
 * dynamically shows content once expanded.
 */
export var ExpansionPanel = forwardRef(function ExpansionPanel(_a, ref) {
    var className = _a.className, children = _a.children, headerStyle = _a.headerStyle, headerClassName = _a.headerClassName, contentStyle = _a.contentStyle, contentClassName = _a.contentClassName, headerRef = _a.headerRef, _b = _a.disablePadding, disablePadding = _b === void 0 ? false : _b, _c = _a.disableSecondaryColor, disableSecondaryColor = _c === void 0 ? false : _c, customHeader = _a.customHeader, header = _a.header, expanded = _a.expanded, onExpandClick = _a.onExpandClick, expanderIcon = _a.expanderIcon, _d = _a.marginTop, marginTop = _d === void 0 ? false : _d, _e = _a.fullWidth, fullWidth = _e === void 0 ? true : _e, _f = _a.persistent, persistent = _f === void 0 ? false : _f, _g = _a.disabled, disabled = _g === void 0 ? false : _g, _h = _a.disableTransition, disableTransition = _h === void 0 ? false : _h, props = __rest(_a, ["className", "children", "headerStyle", "headerClassName", "contentStyle", "contentClassName", "headerRef", "disablePadding", "disableSecondaryColor", "customHeader", "header", "expanded", "onExpandClick", "expanderIcon", "marginTop", "fullWidth", "persistent", "disabled", "disableTransition"]);
    var id = props.id;
    var contentId = "".concat(id, "-content");
    var _j = useCollapseTransition({
        style: contentStyle,
        className: contentClassName,
        timeout: disableTransition ? 0 : undefined,
        transitionIn: expanded,
        temporary: !persistent,
    }), elementProps = _j.elementProps, rendered = _j.rendered;
    return (_jsxs(Card, __assign({}, props, { id: "".concat(id, "-container"), ref: ref, fullWidth: fullWidth, className: cn(block({ expanded: expanded, "margin-top": marginTop }), className) }, { children: [customHeader || (_jsx(ExpansionPanelHeader, __assign({ "aria-disabled": disabled || undefined, id: id, ref: headerRef, style: headerStyle, className: headerClassName, icon: expanderIcon, expanded: expanded, onClick: onExpandClick, disableTransition: disableTransition }, { children: header }))), rendered && (_jsx(CardContent, __assign({}, elementProps, { id: contentId, "aria-labelledby": id, role: "region", disableSecondaryColor: disableSecondaryColor, disablePadding: disablePadding, disableExtraPadding: true }, { children: children })))] })));
});
//# sourceMappingURL=ExpansionPanel.js.map