"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dialog = exports.DEFAULT_DIALOG_TIMEOUT = exports.DEFAULT_DIALOG_CLASSNAMES = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var overlay_1 = require("@react-md/overlay");
var portal_1 = require("@react-md/portal");
var transition_1 = require("@react-md/transition");
var utils_1 = require("@react-md/utils");
var useNestedDialogFixes_1 = require("./useNestedDialogFixes");
// used to disable the overlay click-to-close functionality when the `modal` prop is enabled.
var noop = function () {
    // do nothing
};
var block = (0, utils_1.bem)("rmd-dialog");
/** @remarks \@since 4.0.0 */
exports.DEFAULT_DIALOG_CLASSNAMES = {
    appear: "rmd-dialog--enter",
    appearActive: "rmd-dialog--enter-active",
    enter: "rmd-dialog--enter",
    enterActive: "rmd-dialog--enter-active",
    exit: "rmd-dialog--exit",
    exitActive: "rmd-dialog--exit-active",
};
/** @remarks \@since 4.0.0 */
exports.DEFAULT_DIALOG_TIMEOUT = {
    enter: 200,
    exit: 150,
};
/**
 * A dialog is used to show important content above all other elements within
 * the page. This is normally used for alerts, confirmations, or just temporary
 * content. The dialog within react-md also has the additional features for
 * accessibility:
 *
 * - automatically focus the dialog on mount for keyboard users
 * - prevent elements outside of the dialog to be focused
 * - close via the escape key
 * - prevent the page outside of the dialog from being scrolled
 *
 * To complete the dialog accessibility requirements, every dialog **must**
 * provide an `id` and either an `aria-label` describing the dialog or an
 * `aria-labelledby` id that points to an element describing this dialog.
 *
 * @example
 * Simple Example
 * ```tsx
 * import { ReactElement, useState } from "react";
 * import { Button } from "@react-md/button";
 * import {
 *   Dialog,
 *   DialogHeader,
 *   DialogTitle,
 *   DialogContent,
 *   DialogFooter,
 * } from "@react-md/dialog";
 * import { Typography } from "@react-md/typography";
 *
 * function Example(): ReactElement {
 *   const [visible, setVisible] = useState(false);
 *   const hide = (): void => {
 *     setVisible(false);
 *   };
 *
 *   return (
 *     <>
 *       <Button onClick={() => setVisible(!visible)}>
 *         Show Dialog
 *       </Button>
 *       <Dialog
 *         aria-labelledby="dialog-title"
 *         id="simple-dialog"
 *         visible={visible}
 *         onRequestClose={hide}
 *       >
 *         <DialogHeader>
 *           <DialogTitle id="dialog-title">Simple Dialog</DialogTitle>
 *         </DialogHeader>
 *         <DialogContent>
 *           <Typography margin="none">This is some text in a dialog.</Typography>
 *         </DialogContent>
 *         <DialogFooter>
 *           <Button onClick={hide}>
 *             Close
 *           </Button>
 *         </DialogFooter>
 *       </Dialog>
 *     </>
 *   );
 * }
 * ```
 */
exports.Dialog = (0, react_1.forwardRef)(function Dialog(_a, nodeRef) {
    var _b = _a.component, component = _b === void 0 ? "div" : _b, _c = _a.tabIndex, tabIndex = _c === void 0 ? -1 : _c, children = _a.children, className = _a.className, containerStyle = _a.containerStyle, containerClassName = _a.containerClassName, propOverlay = _a.overlay, overlayStyle = _a.overlayStyle, overlayClassName = _a.overlayClassName, _d = _a.overlayHidden, overlayHidden = _d === void 0 ? false : _d, visible = _a.visible, onRequestClose = _a.onRequestClose, _e = _a.forceContainer, forceContainer = _e === void 0 ? false : _e, _f = _a.defaultFocus, defaultFocus = _f === void 0 ? "first" : _f, _g = _a.portal, portal = _g === void 0 ? true : _g, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _h = _a.appear, appear = _h === void 0 ? false : _h, _j = _a.enter, enter = _j === void 0 ? true : _j, _k = _a.exit, exit = _k === void 0 ? true : _k, _l = _a.disableTransition, disableTransition = _l === void 0 ? false : _l, _m = _a.classNames, classNames = _m === void 0 ? exports.DEFAULT_DIALOG_CLASSNAMES : _m, _o = _a.timeout, timeout = _o === void 0 ? exports.DEFAULT_DIALOG_TIMEOUT : _o, _p = _a.temporary, temporary = _p === void 0 ? true : _p, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, _q = _a.modal, modal = _q === void 0 ? false : _q, _r = _a.role, role = _r === void 0 ? "dialog" : _r, _s = _a.type, type = _s === void 0 ? "centered" : _s, _t = _a.disableScrollLock, disableScrollLock = _t === void 0 ? false : _t, _u = _a.disableEscapeClose, propDisableEscapeClose = _u === void 0 ? false : _u, _v = _a.disableFocusContainer, disableFocusContainer = _v === void 0 ? false : _v, _w = _a.disableTabFocusWrap, disableTabFocusWrap = _w === void 0 ? false : _w, _x = _a.disableFocusOnMount, disableFocusOnMount = _x === void 0 ? false : _x, _y = _a.disableFocusOnUnmount, disableFocusOnUnmount = _y === void 0 ? false : _y, _z = _a.disableNestedDialogFixes, disableNestedDialogFixes = _z === void 0 ? false : _z, onKeyDown = _a.onKeyDown, overlayProps = _a.overlayProps, props = __rest(_a, ["component", "tabIndex", "children", "className", "containerStyle", "containerClassName", "overlay", "overlayStyle", "overlayClassName", "overlayHidden", "visible", "onRequestClose", "forceContainer", "defaultFocus", "portal", "portalInto", "portalIntoId", "appear", "enter", "exit", "disableTransition", "classNames", "timeout", "temporary", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "modal", "role", "type", "disableScrollLock", "disableEscapeClose", "disableFocusContainer", "disableTabFocusWrap", "disableFocusOnMount", "disableFocusOnUnmount", "disableNestedDialogFixes", "onKeyDown", "overlayProps"]);
    var id = props.id;
    var isNoneRole = role === "none";
    var isFullPage = type === "full-page";
    var isCentered = type === "centered";
    var _0 = (0, useNestedDialogFixes_1.useNestedDialogFixes)({
        id: id,
        visible: visible,
        disabled: disableNestedDialogFixes,
        disableEscapeClose: propDisableEscapeClose,
    }), disableOverlay = _0.disableOverlay, disableEscapeClose = _0.disableEscapeClose;
    (0, utils_1.useScrollLock)(visible && !isNoneRole && !disableScrollLock);
    var overlayEl = null;
    if (typeof propOverlay === "boolean" ? propOverlay : !isFullPage) {
        // do not add the portal props to the overlay element since the portalling
        // is handled in here. With how portals work, this would be rendered **after**
        // the dialog instead of before which breaks some dialog styles
        overlayEl = ((0, jsx_runtime_1.jsx)(overlay_1.Overlay, __assign({ id: "".concat(id, "-overlay") }, overlayProps, { style: overlayStyle, className: (0, classnames_1.default)("rmd-dialog-overlay", overlayClassName), hidden: overlayHidden || disableOverlay, visible: visible, clickable: !modal, onRequestClose: modal ? noop : onRequestClose })));
    }
    var _1 = (0, transition_1.useCSSTransition)({
        nodeRef: nodeRef,
        transitionIn: visible,
        timeout: timeout,
        classNames: classNames,
        className: (0, classnames_1.default)(block({
            centered: isCentered,
            "full-page": isFullPage,
        }), className),
        appear: !disableTransition && appear,
        enter: !disableTransition && enter,
        exit: !disableTransition && exit,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        onExit: onExit,
        onExiting: onExiting,
        onExited: onExited,
        temporary: temporary,
    }), elementProps = _1.elementProps, rendered = _1.rendered;
    var dialog = ((0, jsx_runtime_1.jsx)(utils_1.FocusContainer, __assign({}, props, elementProps, { role: isNoneRole ? undefined : role, "aria-modal": (!isNoneRole && !!overlayEl) || undefined, tabIndex: tabIndex, component: component, defaultFocus: defaultFocus, disableTabFocusWrap: isNoneRole || disableTabFocusWrap || disableFocusContainer, disableFocusOnMount: isNoneRole || disableFocusContainer || disableFocusOnMount, disableFocusOnMountScroll: true, disableFocusOnUnmount: isNoneRole || disableFocusContainer || disableFocusOnUnmount, onKeyDown: (0, utils_1.useCloseOnEscape)(onRequestClose, disableEscapeClose || isNoneRole, onKeyDown) }, { children: children })));
    if (isCentered || forceContainer) {
        // the additional container is only required when we don't have a full page dialog. it's just
        // used to apply flex center to the dialog and add some margin
        dialog = ((0, jsx_runtime_1.jsx)("span", __assign({ id: "".concat(id, "-container"), style: containerStyle, className: (0, classnames_1.default)("rmd-dialog-container", containerClassName) }, { children: dialog })));
    }
    return ((0, jsx_runtime_1.jsxs)(portal_1.ConditionalPortal, __assign({ portal: !isNoneRole && portal, portalInto: portalInto, portalIntoId: portalIntoId }, { children: [overlayEl, rendered && dialog] })));
});
//# sourceMappingURL=Dialog.js.map