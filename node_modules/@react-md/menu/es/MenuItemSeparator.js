var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import cn from "classnames";
import { useVerticalDividerHeight } from "@react-md/divider";
import { bem } from "@react-md/utils";
import { useMenuConfiguration } from "./MenuConfigurationProvider";
var styles = bem("rmd-divider");
/**
 * This component renders a `<li role="separator">` with the divider styles. It
 * will also automatically render itself vertically instead of horizontally if
 * the menu is rendering horizontally.
 *
 * @remarks \@since 5.0.0 Renders as an `<li>` instead of a `<div>` or `<hr />`.
 */
export var MenuItemSeparator = forwardRef(function MenuItemSeparator(_a, ref) {
    var style = _a.style, className = _a.className, maxHeight = _a.maxHeight, inset = _a.inset, propVertical = _a.vertical, children = _a.children, props = __rest(_a, ["style", "className", "maxHeight", "inset", "vertical", "children"]);
    var horizontal = useMenuConfiguration().horizontal;
    var vertical = propVertical !== null && propVertical !== void 0 ? propVertical : horizontal;
    var heightProps = useVerticalDividerHeight({
        ref: ref,
        style: style,
        maxHeight: vertical ? maxHeight !== null && maxHeight !== void 0 ? maxHeight : 1 : 0,
    });
    return (_jsx("li", __assign({}, props, heightProps, { "aria-orientation": vertical ? "vertical" : undefined, role: "separator", className: cn(styles({ inset: inset && !vertical, vertical: vertical }), className) }, { children: children })));
});
//# sourceMappingURL=MenuItemSeparator.js.map