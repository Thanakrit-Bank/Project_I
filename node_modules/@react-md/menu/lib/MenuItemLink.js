"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItemLink = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var list_1 = require("@react-md/list");
var utils_1 = require("@react-md/utils");
/**
 * This is a wrapper for the {@link ListItemLink} component that allows for the
 * correct keyboard focus behavior within {@link Menu}s. Just like the
 * {@link ListItemLink}, set a {@link ListItemLinkProps.component} prop to your
 * custom `Link` if needed.
 *
 * @remarks \@since 2.0.0
 */
exports.MenuItemLink = (0, react_1.forwardRef)(function MenuItemLink(_a, nodeRef) {
    var className = _a.className, children = _a.children, _b = _a.role, role = _b === void 0 ? "menuitem" : _b, _c = _a.tabIndex, tabIndex = _c === void 0 ? -1 : _c, liProps = _a.liProps, props = __rest(_a, ["className", "children", "role", "tabIndex", "liProps"]);
    var ref = (0, utils_1.useKeyboardFocusableElement)(nodeRef);
    return ((0, jsx_runtime_1.jsx)("li", __assign({}, liProps, { role: "none" }, { children: (0, jsx_runtime_1.jsx)(list_1.ListItemLink, __assign({}, props, { ref: ref, role: role, tabIndex: tabIndex, className: (0, classnames_1.default)("rmd-menu-item", className) }, { children: children })) })));
});
//# sourceMappingURL=MenuItemLink.js.map