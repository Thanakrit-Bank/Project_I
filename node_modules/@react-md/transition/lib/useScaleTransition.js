"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useScaleTransition = exports.SCALE_TIMEOUT = exports.SCALE_Y_CLASSNAMES = exports.SCALE_CLASSNAMES = void 0;
var useCSSTransition_1 = require("./useCSSTransition");
/**
 * The default {@link CSSTransitionClassNames} for a horizontal scale
 * transition.
 *
 * @remarks \@since 2.0.0
 */
exports.SCALE_CLASSNAMES = {
    appear: "rmd-transition--scale-enter",
    appearActive: "rmd-transition--scale-enter-active",
    enter: "rmd-transition--scale-enter",
    enterActive: "rmd-transition--scale-enter-active",
    enterDone: "",
    exit: "rmd-transition--scale-exit",
    exitActive: "rmd-transition--scale-exit-active",
};
/**
 * The default {@link CSSTransitionClassNames} for a vertical scale transition.
 *
 * @remarks \@since 2.0.0
 */
exports.SCALE_Y_CLASSNAMES = {
    appear: "rmd-transition--scale-y-enter",
    appearActive: "rmd-transition--scale-y-enter-active",
    enter: "rmd-transition--scale-y-enter",
    enterActive: "rmd-transition--scale-y-enter-active",
    enterDone: "",
    exit: "rmd-transition--scale-y-exit",
    exitActive: "rmd-transition--scale-y-exit-active",
};
/**
 * The default {@link TransitionTimeout} to use for horizontal and vertical
 * scale transitions.
 *
 * @remarks \@since 2.0.0
 */
exports.SCALE_TIMEOUT = {
    enter: 200,
    exit: 150,
};
/**
 * Implements a scale transition that should generally be used for temporary
 * elements that are positioned via `position: absolute` or `position: fixed`.
 *
 * @example
 * Dropdown Menu Example
 * ```tsx
 * import { ReactElement, useRef, useState } from "react";
 * import { Button } from "@react-md/button";
 * import { useFixedPositioning, useScaleTransition } from "@react-md/transition";
 *
 * function Example(): ReactElement {
 *   const buttonRef = useRef<HTMLButtonElement>(null);
 *   const [transitionIn, setTransitionIn] = useState(false);
 *   const { style, transitionOptions } = useFixedPositioning({
 *     fixedTo: buttonRef,
 *   });
 *   const { elementProps, rendered } = useScaleTransition({
 *     ...transitionOptions,
 *     transitionIn,
 *     vertical: true,
 *   });
 *
 *   return (
 *     <>
 *       <Button ref={buttonRef} onClick={() => setTransitionIn(!transitionIn)}>
 *         Toggle
 *       </Button>
 *       {rendered && (
 *         <div {...elementProps} style={style}>
 *           Some content within a menu
 *         </div>
 *       )}
 *     </>
 *   );
 * }
 * ```
 *
 * @typeParam E - The HTMLElement type used or the ref required for the
 * transition.
 * @remarks \@since 4.0.0
 */
function useScaleTransition(_a) {
    var _b = _a.timeout, timeout = _b === void 0 ? exports.SCALE_TIMEOUT : _b, _c = _a.vertical, vertical = _c === void 0 ? false : _c, _d = _a.temporary, temporary = _d === void 0 ? true : _d, _e = _a.classNames, classNames = _e === void 0 ? vertical ? exports.SCALE_Y_CLASSNAMES : exports.SCALE_CLASSNAMES : _e, options = __rest(_a, ["timeout", "vertical", "temporary", "classNames"]);
    return (0, useCSSTransition_1.useCSSTransition)(__assign(__assign({}, options), { timeout: timeout, temporary: temporary, classNames: classNames }));
}
exports.useScaleTransition = useScaleTransition;
//# sourceMappingURL=useScaleTransition.js.map