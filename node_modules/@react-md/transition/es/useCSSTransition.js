var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import cn from "classnames";
import { useTransition } from "./useTransition";
import { getTransitionClassNames } from "./utils";
/**
 * This hook is used to create CSS transitions for different components whenever
 * a {@link TransitionHookOptions.transitionIn} flag is changed.
 *
 * @example
 * Simple Transition
 * ```tsx
 * import { ReactElement, useState } from "react";
 * import { Button } from "@react-md/button";
 * import { useCSSTransition } from "@react-md/transition";
 * import { Typography } from "@react-md/typography";
 *
 * // Pretend styles
 * // .enter {
 * //   opacity: 0.5;
 * //   transition: opacity .15s;
 * // }
 * //
 * // .enter--active {
 * //   opacity: 1;
 * // }
 * //
 * // .exit {
 * //   opacity: 1;
 * //   transition: opacity .15s;
 * // }
 * //
 * // .exit--active {
 * //   opacity: 0.5;
 * // }
 *
 * function Example(): ReactElement {
 *   const [transitionIn, setTransitionIn] = useState(false);
 *   const { elementProps } = useCSSTransition({
 *     timeout: 150,
 *     classNames: {
 *       enter: "enter",
 *       enterActive: "enter--active",
 *       exit: "exit",
 *       exitActive: "exit--active",
 *     },
 *     transitionIn,
 *   });
 *
 *   return (
 *     <>
 *       <Button onClick={() => setTransitionIn(!transitionIn)}>
 *         Toggle
 *       </Button>
 *       <Typography {...elementProps}>
 *         Some Opacity Changing Text
 *       </Typography>
 *     </>
 *   );
 * }
 * ```
 *
 * @example
 * Visibility Transition
 * ```tsx
 * import { ReactElement, useState } from "react";
 * import { Button } from "@react-md/button";
 * import { useCSSTransition } from "@react-md/transition";
 * import { Typography } from "@react-md/typography";
 *
 * // Pretend styles
 * // .enter {
 * //   opacity: 0;
 * //   transition: opacity .2s;
 * // }
 * //
 * // .enter--active {
 * //   opacity: 1;
 * // }
 * //
 * // .exit {
 * //   opacity: 1;
 * //   transition: opacity .15s;
 * // }
 * //
 * // .exit--active {
 * //   opacity: 0;
 * // }
 *
 * function Example(): ReactElement {
 *   const [transitionIn, setTransitionIn] = useState(false);
 *   const { elementProps, rendered } = useCSSTransition({
 *     timeout: {
 *       enter: 200,
 *       exit: 150,
 *     },
 *     classNames: {
 *       enter: "enter",
 *       enterActive: "enter--active",
 *       exit: "exit",
 *       exitActive: "exit--active",
 *     },
 *     transitionIn,
 *     temporary: true,
 *   });
 *
 *   return (
 *     <>
 *       <Button onClick={() => setTransitionIn(!transitionIn)}>
 *         Toggle
 *       </Button>
 *       {rendered && (
 *         <Typography {...elementProps}>
 *           Some Opacity Changing Text
 *         </Typography>
 *       )}
 *     </>
 *   );
 * }
 * ```
 *
 * @example
 * Mount Transition
 * ```tsx
 * import type { ReactElement } from "react";
 * import { useCSSTransition } from "@react-md/transition";
 *
 * // Pretend styles
 * // .opacity {
 * //   opacity: 0;
 * //   transition: opacity .3s;
 * // }
 * //
 * // .opacity--active {
 * //   opacity: 1;
 * // }
 * //
 *
 * function Example(): ReactElement {
 *   const { elementProps } = useCSSTransition({
 *     appear: true,
 *     transitionIn: true,
 *     timeout: 300,
 *     classNames: "opacity",
 *   })
 *
 *   return <div {...elementProps}>Some Content!</div>;
 * }
 * ```
 *
 * @typeParam E - An HTMLElement type used for the ref required for the
 * transition.
 * @remarks \@since 4.0.0
 */
export function useCSSTransition(_a) {
    var className = _a.className, classNames = _a.classNames, _b = _a.appear, appear = _b === void 0 ? false : _b, _c = _a.enter, enter = _c === void 0 ? true : _c, _d = _a.exit, exit = _d === void 0 ? true : _d, timeout = _a.timeout, options = __rest(_a, ["className", "classNames", "appear", "enter", "exit", "timeout"]);
    var _e = useTransition(__assign(__assign({}, options), { appear: appear, enter: enter, exit: exit, timeout: timeout, reflow: true })), ref = _e.ref, stage = _e.stage, rendered = _e.rendered, appearing = _e.appearing, transitionTo = _e.transitionTo;
    var isEntering = stage === "entering";
    var isEnter = isEntering || stage === "enter";
    var isEntered = stage === "entered";
    var isExiting = stage === "exiting";
    var isExit = isExiting || stage === "exit";
    var isExited = stage === "exited";
    var transitionClassNames = getTransitionClassNames({
        timeout: timeout,
        appear: appear,
        enter: enter,
        exit: exit,
        classNames: classNames,
    });
    var elementProps = {
        ref: ref,
        className: cn(
        // always apply the provided className first since it makes snapshot
        // tests easier to parse if dynamic classes come afterwards
        className, appearing && isEnter && transitionClassNames.appear, appearing && isEntering && transitionClassNames.appearActive, appearing && isEntered && transitionClassNames.appearDone, !appearing && isEnter && transitionClassNames.enter, !appearing && isEntering && transitionClassNames.enterActive, !appearing && isEntered && transitionClassNames.enterDone, isExit && transitionClassNames.exit, isExiting && transitionClassNames.exitActive, isExited && transitionClassNames.exitDone) || undefined,
    };
    return __assign(__assign({}, elementProps), { stage: stage, rendered: rendered, appearing: appearing, elementProps: elementProps, transitionTo: transitionTo });
}
//# sourceMappingURL=useCSSTransition.js.map