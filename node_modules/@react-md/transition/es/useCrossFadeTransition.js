var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { useCSSTransition } from "./useCSSTransition";
/**
 * The default cross fade transition classes to use.
 *
 * @remarks \@since 2.0.0
 */
export var CROSS_FADE_CLASSNAMES = {
    appear: "rmd-cross-fade",
    appearActive: "rmd-cross-fade--active",
    enter: "rmd-cross-fade",
    enterActive: "rmd-cross-fade--active",
};
/**
 * The default cross fade transition timeout.
 *
 * @remarks \@since 2.0.0
 */
export var CROSS_FADE_TIMEOUT = {
    appear: 300,
    enter: 300,
    exit: 0,
};
/**
 * This hook is used to create a "cross fade" transition -- a transition that
 * gradually increases the opacity and transforms the element vertically a short
 * distance. This is generally used for full page transitions when a route
 * changes.
 *
 * @example
 * New Page Transition with `@react-md/layout`
 * ```tsx
 * import { ReactElement, ReactNode, useLayoutEffect } from "react";
 * import { useLocation } from "react-router-dom":
 * import { Layout, useLayoutNavigation } from "@react-md/layout";
 * import { useCrossFadeTransition } from "@react-md/transition";
 *
 * import { navItems } from "./navItems";
 *
 * interface ExampleProps {
 *   children: ReactNode;
 * }
 *
 * function Example({ children }: ExampleProps): ReactElement {
 *   const { pathname } = useLocation();
 *   const { elementProps, transitionTo } = useCrossFadeTransition();
 *
 *   const prevPathname = useRef(pathname);
 *   useLayoutEffect(() => {
 *     if (prevPathname.current === pathname) {
 *       return
 *     }
 *
 *     prevPathname.current = pathname;
 *     transitionTo('enter');
 *   }, [pathname, transitionTo])
 *
 *   return (
 *     <Layout
 *       {...useLayoutNavigation(navItems, pathname)}
 *       appBarTitle="My App"
 *       mainProps={elementProps}
 *     >
 *       {children}
 *     </Layout>
 *   );
 * }
 * ```
 *
 * @typeParam E - An HTMLElement type used for the ref required for the
 * transition.
 * @remarks \@since 4.0.0
 */
export function useCrossFadeTransition(_a) {
    if (_a === void 0) { _a = {}; }
    var _b = _a.transitionIn, transitionIn = _b === void 0 ? true : _b, _c = _a.timeout, timeout = _c === void 0 ? CROSS_FADE_TIMEOUT : _c, _d = _a.classNames, classNames = _d === void 0 ? CROSS_FADE_CLASSNAMES : _d, options = __rest(_a, ["transitionIn", "timeout", "classNames"]);
    return useCSSTransition(__assign(__assign({}, options), { timeout: timeout, classNames: classNames, transitionIn: transitionIn }));
}
//# sourceMappingURL=useCrossFadeTransition.js.map