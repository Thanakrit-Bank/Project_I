var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import cn from "classnames";
import { ConditionalPortal } from "@react-md/portal";
import { CSSTransition } from "@react-md/transition";
import { bem } from "@react-md/utils";
import { DEFAULT_OVERLAY_TIMEOUT, DEFAULT_OVERLAY_CLASSNAMES, } from "./constants";
var block = bem("rmd-overlay");
/**
 * The `Overlay` component is a simple component used to render a full page
 * overlay in the page with an enter and exit animation. If there are overflow
 * issues or you need to portal the overlay to a different area within your app,
 * you should use the `OverlayPortal` component instead.
 */
export var Overlay = forwardRef(function Overlay(_a, nodeRef) {
    var className = _a.className, visible = _a.visible, _b = _a.hidden, hidden = _b === void 0 ? false : _b, _c = _a.clickable, clickable = _c === void 0 ? true : _c, _d = _a.timeout, timeout = _d === void 0 ? DEFAULT_OVERLAY_TIMEOUT : _d, _e = _a.classNames, classNames = _e === void 0 ? DEFAULT_OVERLAY_CLASSNAMES : _e, children = _a.children, _f = _a.temporary, temporary = _f === void 0 ? true : _f, onRequestClose = _a.onRequestClose, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, portal = _a.portal, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _g = _a.tabIndex, tabIndex = _g === void 0 ? -1 : _g, onClick = _a.onClick, props = __rest(_a, ["className", "visible", "hidden", "clickable", "timeout", "classNames", "children", "temporary", "onRequestClose", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "portal", "portalInto", "portalIntoId", "tabIndex", "onClick"]);
    return (_jsx(ConditionalPortal, __assign({ portal: portal, portalInto: portalInto, portalIntoId: portalIntoId }, { children: _jsx(CSSTransition, __assign({ appear: true, nodeRef: nodeRef, transitionIn: visible, classNames: hidden ? "" : classNames, timeout: hidden ? 0 : timeout, temporary: temporary, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited }, { children: _jsx("span", __assign({}, props, { className: cn(block({
                    visible: visible,
                    clickable: clickable,
                }), className), onClick: function (event) {
                    onClick === null || onClick === void 0 ? void 0 : onClick(event);
                    if (event.isPropagationStopped()) {
                        return;
                    }
                    onRequestClose();
                }, tabIndex: tabIndex }, { children: children })) })) })));
});
//# sourceMappingURL=Overlay.js.map