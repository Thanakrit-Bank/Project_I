var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, isValidElement, useCallback, useContext, useMemo, useState, } from "react";
var context = createContext({
    tabsId: "tabs",
    activeIndex: 0,
    onActiveIndexChange: function () {
        // do nothing
    },
    tabs: [],
});
/**
 * This hook returns the current "state" for the tabs which can be useful if you
 * need additional control or access to the tabs behavior.
 */
export function useTabs() {
    return useContext(context);
}
var Provider = context.Provider;
/**
 * The `TabsManager` is used to configure your `Tabs` component and handle some
 * of the default behavior such as:
 *
 * - controlling the `activeIndex`
 * - general tab configuration
 * - callbacks when the tab has changed
 * - providing an `id` prefix for all tabs for simplicity
 */
export function TabsManager(_a) {
    var tabsId = _a.tabsId, _b = _a.defaultActiveIndex, defaultActiveIndex = _b === void 0 ? 0 : _b, propActiveIndex = _a.activeIndex, onActiveIndexChange = _a.onActiveIndexChange, tabs = _a.tabs, _c = _a.stacked, stacked = _c === void 0 ? false : _c, _d = _a.iconAfter, iconAfter = _d === void 0 ? false : _d, children = _a.children;
    var _e = __read(useState(defaultActiveIndex), 2), localActiveIndex = _e[0], setActiveIndex = _e[1];
    var handleActiveIndexChange = useCallback(function (activeIndex) {
        if (onActiveIndexChange) {
            onActiveIndexChange(activeIndex);
        }
        setActiveIndex(activeIndex);
    }, [onActiveIndexChange]);
    var activeIndex = typeof propActiveIndex === "number" ? propActiveIndex : localActiveIndex;
    var updateActiveIndex = typeof propActiveIndex === "number"
        ? onActiveIndexChange
        : handleActiveIndexChange;
    var value = useMemo(function () { return ({
        activeIndex: activeIndex,
        onActiveIndexChange: updateActiveIndex,
        tabs: tabs.map(function (config, i) {
            var tab;
            if (typeof config === "string" || isValidElement(config)) {
                tab = { children: config };
            }
            else {
                tab = config;
            }
            return __assign(__assign({}, tab), { id: tab.id || "".concat(tabsId, "-tab-").concat(i + 1), panelId: activeIndex === i
                    ? "".concat(tabsId, "-panel-").concat(activeIndex + 1)
                    : undefined, stacked: typeof tab.stacked === "boolean" ? tab.stacked : stacked, iconAfter: typeof tab.iconAfter === "boolean" ? tab.iconAfter : iconAfter });
        }),
        tabsId: tabsId,
    }); }, [activeIndex, iconAfter, stacked, tabs, tabsId, updateActiveIndex]);
    return _jsx(Provider, __assign({ value: value }, { children: children }));
}
//# sourceMappingURL=TabsManager.js.map