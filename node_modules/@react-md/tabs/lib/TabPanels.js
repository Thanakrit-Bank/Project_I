"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabPanels = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("@react-md/utils");
var TabsManager_1 = require("./TabsManager");
var block = (0, utils_1.bem)("rmd-tab-panels");
/**
 * This component allows you to control the visibility of the `TabPanel`
 * components and animating the next and current panels as needed. This works by
 * looping over all the children and getting the current `TabPanel` by the
 * `activeIndex`. This is why the children for this component can only be
 * `TabPanel` and should not be conditional.
 */
exports.TabPanels = (0, react_1.forwardRef)(function TabPanels(_a, forwardedRef) {
    var className = _a.className, children = _a.children, _b = _a.disableScrollFix, disableScrollFix = _b === void 0 ? false : _b, _c = _a.disableTransition, disableTransition = _c === void 0 ? false : _c, _d = _a.persistent, persistent = _d === void 0 ? false : _d, props = __rest(_a, ["className", "children", "disableScrollFix", "disableTransition", "persistent"]);
    var _e = (0, TabsManager_1.useTabs)(), tabsId = _e.tabsId, tabs = _e.tabs, activeIndex = _e.activeIndex;
    var prevIndex = (0, react_1.useRef)(activeIndex);
    var _f = __read((0, react_1.useState)({
        previous: activeIndex,
        incrementing: true,
    }), 2), _g = _f[0], previous = _g.previous, incrementing = _g.incrementing, setState = _f[1];
    // have to set these in refs since changing these might cause mounting
    // and unmounting in the Transition group component :/ they should only
    // be re-evaluated when the activeIndex changes.
    var transitionable = (0, react_1.useRef)(!persistent && !disableTransition);
    var animatable = (0, react_1.useRef)(persistent && !disableTransition);
    if (prevIndex.current !== activeIndex) {
        prevIndex.current = activeIndex;
        transitionable.current = !persistent && !disableTransition;
        animatable.current = persistent && !disableTransition;
    }
    (0, react_1.useEffect)(function () {
        setState(function (_a) {
            var previous = _a.previous;
            return ({
                incrementing: previous < activeIndex,
                previous: disableTransition ? activeIndex : previous,
            });
        });
        // this is for only updating the incrementing state and should not be fired
        // again if the disableTransition prop is changed
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex]);
    var onEntered = (0, react_1.useCallback)(function () {
        setState(function (_a) {
            var incrementing = _a.incrementing;
            return ({ incrementing: incrementing, previous: activeIndex });
        });
    }, [activeIndex]);
    var _h = __read((0, utils_1.useEnsuredRef)(forwardedRef), 2), ref = _h[0], refHandler = _h[1];
    (0, react_1.useEffect)(function () {
        if (!ref.current || disableScrollFix) {
            return;
        }
        ref.current.scrollTop = 0;
        // don't want it to be triggered if only the disableScrollFix prop has changed
        // since it might be independent from active indexes
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex]);
    return ((0, jsx_runtime_1.jsx)("div", __assign({}, props, { ref: refHandler, className: (0, classnames_1.default)(block({
            "slide-left": incrementing,
            "slide-right": !incrementing,
        }), className) }, { children: react_1.Children.map(children, function (child, index) {
            if (!(0, react_1.isValidElement)(child)) {
                return child;
            }
            var panel = react_1.Children.only(child);
            var labelledBy = panel.props["aria-labelledby"];
            if (!labelledBy && !panel.props["aria-label"] && tabs[index]) {
                // generally guaranteed to be defined by this point since the TabsManager
                // will add ids if missing.
                labelledBy = tabs[index].id;
            }
            return (0, react_1.cloneElement)(child, {
                "aria-labelledby": labelledBy,
                id: "".concat(tabsId, "-panel-").concat(index + 1),
                hidden: persistent && index !== activeIndex && index !== previous,
                temporary: !persistent,
                transitionIn: index === activeIndex,
                timeout: disableTransition ? 0 : panel.props.timeout,
                onEntered: disableTransition ? undefined : onEntered,
            });
        }) })));
});
//# sourceMappingURL=TabPanels.js.map