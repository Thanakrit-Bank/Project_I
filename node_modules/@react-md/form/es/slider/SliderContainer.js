var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from "react";
import cn from "classnames";
import { TextIconSpacing } from "@react-md/icon";
import { bem } from "@react-md/utils";
import { labelStyles } from "../label";
var styles = bem("rmd-slider-container");
/**
 * The `SliderContainer` component is mostly an internal component that is
 * built-in to the `Slider` and `RangeSlider` components to add addons to the
 * left or right of the `SliderTrack`. When vertical, it will add addons to the
 * bottom or top instead.
 *
 * @remarks \@since 2.5.0
 */
export var SliderContainer = forwardRef(function SliderContainer(_a, ref) {
    var className = _a.className, beforeAddon = _a.beforeAddon, afterAddon = _a.afterAddon, children = _a.children, _b = _a.vertical, vertical = _b === void 0 ? false : _b, label = _a.label, labelId = _a.labelId, labelProps = _a.labelProps, _c = _a.disabled, disabled = _c === void 0 ? false : _c, props = __rest(_a, ["className", "beforeAddon", "afterAddon", "children", "vertical", "label", "labelId", "labelProps", "disabled"]);
    return (_jsxs(_Fragment, { children: [label && (_jsx("span", __assign({}, labelProps, { id: labelId, className: cn(labelStyles({ disabled: disabled }), labelProps === null || labelProps === void 0 ? void 0 : labelProps.className) }, { children: label }))), _jsx("div", __assign({}, props, { ref: ref, className: cn(styles({
                    h: !vertical,
                    "pad-left": !vertical && !beforeAddon,
                    "pad-right": !vertical && !afterAddon,
                    "pad-bottom": vertical && !beforeAddon,
                    "pad-top": vertical && !afterAddon,
                    v: vertical,
                }), className) }, { children: _jsx(TextIconSpacing, __assign({ icon: beforeAddon, stacked: vertical, flexReverse: vertical }, { children: _jsx(TextIconSpacing, __assign({ icon: afterAddon, iconAfter: true, stacked: vertical, flexReverse: vertical }, { children: children })) })) }))] }));
});
//# sourceMappingURL=SliderContainer.js.map