var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import cn from "classnames";
import { SimpleListItem } from "@react-md/list";
import { bem } from "@react-md/utils";
var block = bem("rmd-option");
/**
 * The Option component is a simple wrapper for the `SimpleListItem` that adds
 * some required a11y for behaving as the `option` role.
 */
export var Option = forwardRef(function Option(_a, ref) {
    var className = _a.className, _b = _a.selected, selected = _b === void 0 ? false : _b, focused = _a.focused, children = _a.children, _c = _a.textChildren, textChildren = _c === void 0 ? true : _c, props = __rest(_a, ["className", "selected", "focused", "children", "textChildren"]);
    return (_jsx(SimpleListItem, __assign({}, props, { ref: ref, role: "option", "aria-selected": selected || undefined, clickable: true, className: cn(block({
            selected: selected,
            focused: focused,
        }), className), textChildren: textChildren }, { children: children })));
});
//# sourceMappingURL=Option.js.map