"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Password = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var button_1 = require("@react-md/button");
var icon_1 = require("@react-md/icon");
var utils_1 = require("@react-md/utils");
var TextField_1 = require("./TextField");
var block = (0, utils_1.bem)("rmd-password");
function isConfigurableIcon(icon) {
    return !!icon && !(0, react_1.isValidElement)(icon);
}
/**
 * This component is a simple wrapper of the `TextField` that can only be
 * rendered for password inputs. There is built-in functionality to be able to
 * temporarily show the password's value by swapping the `type` to `"text"`.
 */
exports.Password = (0, react_1.forwardRef)(function Password(_a, ref) {
    var className = _a.className, inputClassName = _a.inputClassName, propVisibilityIcon = _a.visibilityIcon, visibilityStyle = _a.visibilityStyle, visibilityClassName = _a.visibilityClassName, _b = _a.visibilityLabel, visibilityLabel = _b === void 0 ? "Show password" : _b, onVisibilityClick = _a.onVisibilityClick, getVisibilityIcon = _a.getVisibilityIcon, _c = _a.disableVisibility, disableVisibility = _c === void 0 ? false : _c, propRightChildren = _a.rightChildren, _d = _a.isRightAddon, isRightAddon = _d === void 0 ? disableVisibility : _d, props = __rest(_a, ["className", "inputClassName", "visibilityIcon", "visibilityStyle", "visibilityClassName", "visibilityLabel", "onVisibilityClick", "getVisibilityIcon", "disableVisibility", "rightChildren", "isRightAddon"]);
    var id = props.id;
    var _e = __read((0, react_1.useState)("password"), 2), type = _e[0], setType = _e[1];
    var toggle = (0, react_1.useCallback)(function (event) {
        if (onVisibilityClick) {
            onVisibilityClick(event);
        }
        setType(function (prevType) { return (prevType === "password" ? "text" : "password"); });
    }, [onVisibilityClick]);
    var visible = type === "text";
    var visibilityIcon = (0, icon_1.useIcon)("password", propVisibilityIcon);
    if (isConfigurableIcon(propVisibilityIcon)) {
        visibilityIcon = visible
            ? propVisibilityIcon.visible
            : propVisibilityIcon.invisible;
    }
    var rightChildren = propRightChildren;
    if (!disableVisibility) {
        rightChildren = ((0, jsx_runtime_1.jsx)(button_1.Button, __assign({ id: "".concat(id, "-password-toggle"), "aria-label": visibilityLabel, "aria-pressed": visible, buttonType: "icon", onClick: toggle, style: visibilityStyle, className: (0, classnames_1.default)(block("toggle"), visibilityClassName) }, { children: typeof getVisibilityIcon === "function"
                ? getVisibilityIcon(type)
                : visibilityIcon })));
    }
    return ((0, jsx_runtime_1.jsx)(TextField_1.TextField, __assign({}, props, { className: (0, classnames_1.default)(block({ offset: !disableVisibility }), className), inputClassName: (0, classnames_1.default)(block("input", { offset: !disableVisibility }), inputClassName), ref: ref, type: type, isRightAddon: isRightAddon, rightChildren: rightChildren })));
});
//# sourceMappingURL=Password.js.map