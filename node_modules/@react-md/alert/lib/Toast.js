"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Toast = void 0;
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var classnames_1 = __importDefault(require("classnames"));
var transition_1 = require("@react-md/transition");
var utils_1 = require("@react-md/utils");
var constants_1 = require("./constants");
var block = (0, utils_1.bem)("rmd-toast");
/**
 * This is a very low-level component that can be used to animate a new toast in
 * to a `Snackbar` as it is mainly just a wrapper of the `CSSTransition`
 * component. If you are using this component, it is generally recommended to
 * provide the `onEntered` callback as a function to start the hide visibility
 * timer and the `onExited` callback to remove the current toast from your
 * queue.
 */
exports.Toast = (0, react_1.forwardRef)(function Toast(_a, nodeRef) {
    var className = _a.className, children = _a.children, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, _b = _a.timeout, timeout = _b === void 0 ? constants_1.DEFAULT_TOAST_TIMEOUT : _b, _c = _a.classNames, classNames = _c === void 0 ? constants_1.DEFAULT_TOAST_CLASSNAMES : _c, _d = _a.action, action = _d === void 0 ? null : _d, _e = _a.stacked, stacked = _e === void 0 ? false : _e, _f = _a.twoLines, twoLines = _f === void 0 ? false : _f, visible = _a.visible, props = __rest(_a, ["className", "children", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "timeout", "classNames", "action", "stacked", "twoLines", "visible"]);
    return ((0, jsx_runtime_1.jsx)(transition_1.CSSTransition, __assign({ appear: true, nodeRef: nodeRef, temporary: true, transitionIn: visible, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, timeout: timeout, classNames: classNames }, { children: (0, jsx_runtime_1.jsxs)("div", __assign({}, props, { className: (0, classnames_1.default)(block({
                stacked: stacked,
                padded: !action || twoLines,
                "two-lines": twoLines,
                action: action,
                "action-2": action && twoLines,
            }), className) }, { children: [(0, jsx_runtime_1.jsx)("span", __assign({ className: block("message", { action: action }) }, { children: children })), action && ((0, jsx_runtime_1.jsx)("span", __assign({ className: block("action", { stacked: stacked }) }, { children: action })))] })) })));
});
//# sourceMappingURL=Toast.js.map