var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import { createContext, useContext, useMemo } from "react";
import { FontIcon } from "./FontIcon";
var DEFAULT_ICONS = {
    back: _jsx(FontIcon, { children: "keyboard_arrow_left" }),
    checkbox: _jsx(FontIcon, { children: "check_box" }),
    upload: _jsx(FontIcon, { children: "file_upload" }),
    dropdown: _jsx(FontIcon, { children: "arrow_drop_down" }),
    error: _jsx(FontIcon, { children: "error_outline" }),
    expander: _jsx(FontIcon, { children: "keyboard_arrow_down" }),
    forward: _jsx(FontIcon, { children: "keyboard_arrow_right" }),
    menu: _jsx(FontIcon, { children: "menu" }),
    notification: _jsx(FontIcon, { children: "notifications" }),
    password: _jsx(FontIcon, { children: "remove_red_eye" }),
    radio: _jsx(FontIcon, { children: "radio_button_checked" }),
    selected: _jsx(FontIcon, { children: "check" }),
    sort: _jsx(FontIcon, { children: "arrow_upward" }),
};
var context = createContext(DEFAULT_ICONS);
var Provider = context.Provider;
/**
 * Gets one of the configured icons from the `IconProvider`. This is probably
 * just for use within `react-md`, but might be helpful outside if you want to
 * reuse the existing icon configuration for other custom components.
 *
 * If te second argument is provided and it is not `undefined`, that value will
 * be used instead of the inherited icon type.
 *
 * @param name - The name of the icon you want to use.
 * @param override - An optional override to use instead of the inherited icon.
 * @returns The overridden icon value or the inherited icon.
 */
export function useIcon(name, override) {
    var icons = useContext(context);
    if (typeof override !== "undefined") {
        return override;
    }
    return icons[name];
}
/**
 * The `IconProvider` component is used to override all the default icons within
 * `react-md` with a newly defined set of icons. This is super nice since you
 * won't need to create new component wrappers for all the components within
 * `react-md` if you want to switch to SVG icons instead of the default font
 * icons.
 */
export function IconProvider(_a) {
    var children = _a.children, _b = _a.back, back = _b === void 0 ? DEFAULT_ICONS.back : _b, _c = _a.checkbox, checkbox = _c === void 0 ? DEFAULT_ICONS.checkbox : _c, _d = _a.dropdown, dropdown = _d === void 0 ? DEFAULT_ICONS.dropdown : _d, _e = _a.expander, expander = _e === void 0 ? DEFAULT_ICONS.expander : _e, _f = _a.error, error = _f === void 0 ? DEFAULT_ICONS.error : _f, _g = _a.forward, forward = _g === void 0 ? DEFAULT_ICONS.forward : _g, _h = _a.menu, menu = _h === void 0 ? DEFAULT_ICONS.menu : _h, _j = _a.notification, notification = _j === void 0 ? DEFAULT_ICONS.notification : _j, _k = _a.password, password = _k === void 0 ? DEFAULT_ICONS.password : _k, _l = _a.radio, radio = _l === void 0 ? DEFAULT_ICONS.radio : _l, _m = _a.selected, selected = _m === void 0 ? DEFAULT_ICONS.selected : _m, _o = _a.sort, sort = _o === void 0 ? DEFAULT_ICONS.sort : _o, _p = _a.upload, upload = _p === void 0 ? DEFAULT_ICONS.upload : _p;
    var value = useMemo(function () { return ({
        back: back,
        checkbox: checkbox,
        dropdown: dropdown,
        error: error,
        expander: expander,
        forward: forward,
        menu: menu,
        notification: notification,
        password: password,
        radio: radio,
        selected: selected,
        sort: sort,
        upload: upload,
    }); }, [
        back,
        checkbox,
        dropdown,
        error,
        expander,
        forward,
        menu,
        notification,
        password,
        radio,
        selected,
        sort,
        upload,
    ]);
    return _jsx(Provider, __assign({ value: value }, { children: children }));
}
//# sourceMappingURL=IconProvider.js.map