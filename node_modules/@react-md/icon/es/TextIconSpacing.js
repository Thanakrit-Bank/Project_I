var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Children, cloneElement, isValidElement } from "react";
import cn from "classnames";
export function TextIconSpacing(_a) {
    var _b;
    var className = _a.className, propIcon = _a.icon, _c = _a.children, children = _c === void 0 ? null : _c, _d = _a.stacked, stacked = _d === void 0 ? false : _d, _e = _a.iconAfter, iconAfter = _e === void 0 ? false : _e, _f = _a.flexReverse, flexReverse = _f === void 0 ? false : _f, _g = _a.forceIconWrap, forceIconWrap = _g === void 0 ? false : _g, _h = _a.beforeClassName, beforeClassName = _h === void 0 ? "rmd-icon--before" : _h, _j = _a.afterClassName, afterClassName = _j === void 0 ? "rmd-icon--after" : _j, _k = _a.aboveClassName, aboveClassName = _k === void 0 ? "rmd-icon--above" : _k, _l = _a.belowClassName, belowClassName = _l === void 0 ? "rmd-icon--below" : _l;
    if (!propIcon) {
        return _jsx(_Fragment, { children: children });
    }
    var isAfter = flexReverse ? !iconAfter : iconAfter;
    var baseClassName = cn((_b = {},
        _b[beforeClassName] = !stacked && !isAfter,
        _b[afterClassName] = !stacked && isAfter,
        _b[aboveClassName] = stacked && !isAfter,
        _b[belowClassName] = stacked && isAfter,
        _b), className);
    var iconEl = propIcon;
    var content = children;
    if (!forceIconWrap && isValidElement(propIcon)) {
        var icon = Children.only(propIcon);
        iconEl = cloneElement(icon, {
            className: cn(baseClassName, icon.props.className),
        });
    }
    else if (propIcon) {
        iconEl = (_jsx("span", __assign({ className: cn("rmd-text-icon-spacing", baseClassName) }, { children: propIcon })));
    }
    if (iconEl) {
        content = (_jsxs(_Fragment, { children: [!iconAfter && iconEl, children, iconAfter && iconEl] }));
    }
    return _jsx(_Fragment, { children: content });
}
//# sourceMappingURL=TextIconSpacing.js.map